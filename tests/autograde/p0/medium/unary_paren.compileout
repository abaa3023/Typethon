------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=UnaryOp(
                op=USub(),
                operand=BinOp(
                    left=Constant(value=1),
                    op=Add(),
                    right=UnaryOp(
                        op=USub(),
                        operand=Constant(value=2))))),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = -(1 + -2)
print(x)

Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=BinOp(
                         left=Constant(value=1),
                         op=Add(),
                         right=UnaryOp(
                              op=USub(),
                              operand=Constant(value=2))))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=2))),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=BinOp(
                    left=Constant(value=1),
                    op=Add(),
                    right=Name(id='new_temp0', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Name(id='new_temp1', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp2', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = -2
new_temp1 = 1 + new_temp0
new_temp2 = -new_temp1
x = new_temp2
print(x)
inject_int(-2)
inject_big(add(project_big(explicate_3),project_big(explicate_4)))
inject_int(explicate_5+explicate_6)
inject_int(-project_int(new_temp1))
inject_int(-project_bool(new_temp1))
<ast.Name object at 0x7f9a3c219a50>

new_temp0 = inject_int(-2)
explicate_3 = inject_int(1)
explicate_4 = new_temp0
if(is_big(explicate_3)):
	if(is_big(explicate_4)):
		new_temp1 = inject_big(add(project_big(explicate_3),project_big(explicate_4)))
else:
	if(is_big(explicate_4)):
		error_pyobj(0)
	else:
		if(is_int(explicate_3)):
			explicate_5 = project_int(explicate_3)
		else:
			explicate_5 = project_bool(explicate_3)
		if(is_int(explicate_4)):
			explicate_6 = project_int(explicate_4)
		else:
			explicate_6 = project_bool(explicate_4)
		new_temp1 = inject_int(explicate_5+explicate_6)
if(is_int(new_temp1)):
	new_temp2 = inject_int(-project_int(new_temp1))
else:
	if(is_bool(new_temp1)):
		new_temp2 = inject_int(-project_bool(new_temp1))
x = new_temp2
print(x)
--------------Explicate code-------
new_temp0 = inject_int(-2)
explicate_3 = inject_int(1)
explicate_4 = new_temp0
if is_big(explicate_3):
    if is_big(explicate_4):
        new_temp1 = inject_big(add(project_big(explicate_3), project_big(explicate_4)))
elif is_big(explicate_4):
    error_pyobj(0)
else:
    if is_int(explicate_3):
        explicate_5 = project_int(explicate_3)
    else:
        explicate_5 = project_bool(explicate_3)
    if is_int(explicate_4):
        explicate_6 = project_int(explicate_4)
    else:
        explicate_6 = project_bool(explicate_4)
    new_temp1 = inject_int(explicate_5 + explicate_6)
if is_int(new_temp1):
    new_temp2 = inject_int(-project_int(new_temp1))
elif is_bool(new_temp1):
    new_temp2 = inject_int(-project_bool(new_temp1))
x = new_temp2
print(x)


--- explicated flattened python ---
new_temp7 = -2
new_temp8 = inject_int(new_temp7)
new_temp0 = new_temp8
new_temp9 = inject_int(1)
explicate_3 = new_temp9
explicate_4 = new_temp0
new_temp10 = is_big(explicate_3)
if new_temp10:
    new_temp11 = is_big(explicate_4)
    if new_temp11:
        new_temp12 = project_big(explicate_3)
        new_temp13 = project_big(explicate_4)
        new_temp14 = add(new_temp12, new_temp13)
        new_temp15 = inject_big(new_temp14)
        new_temp1 = new_temp15
else:
    new_temp16 = is_big(explicate_4)
    if new_temp16:
        error_pyobj(0)
    else:
        new_temp17 = is_int(explicate_3)
        if new_temp17:
            new_temp18 = project_int(explicate_3)
            explicate_5 = new_temp18
        else:
            new_temp19 = project_bool(explicate_3)
            explicate_5 = new_temp19
        new_temp20 = is_int(explicate_4)
        if new_temp20:
            new_temp21 = project_int(explicate_4)
            explicate_6 = new_temp21
        else:
            new_temp22 = project_bool(explicate_4)
            explicate_6 = new_temp22
        new_temp23 = explicate_5 + explicate_6
        new_temp24 = inject_int(new_temp23)
        new_temp1 = new_temp24
new_temp25 = is_int(new_temp1)
if new_temp25:
    new_temp26 = project_int(new_temp1)
    new_temp27 = -new_temp26
    new_temp28 = inject_int(new_temp27)
    new_temp2 = new_temp28
else:
    new_temp29 = is_bool(new_temp1)
    if new_temp29:
        new_temp30 = project_bool(new_temp1)
        new_temp31 = -new_temp30
        new_temp32 = inject_int(new_temp31)
        new_temp2 = new_temp32
x = new_temp2
print(x)


--- x86 IR ---
movl  2 ,  new_temp7
negl  new_temp7
call  inject_int new_temp7
movl  eax ,  new_temp8
movl  new_temp8 ,  new_temp0
call  inject_int 1
movl  eax ,  new_temp9
movl  new_temp9 ,  explicate_3
movl  new_temp0 ,  explicate_4
call  is_big explicate_3
movl  eax ,  new_temp10
if1
cmp 0, new_temp10
je else1
then1
call  is_big explicate_4
movl  eax ,  new_temp11
if2
cmp 0, new_temp11
je end if2
then2
call  project_big explicate_3
movl  eax ,  new_temp12
call  project_big explicate_4
movl  eax ,  new_temp13
call  add new_temp12,new_temp13
movl  eax ,  new_temp14
call  inject_big new_temp14
movl  eax ,  new_temp15
movl  new_temp15 ,  new_temp1
end if2
else1
call  is_big explicate_4
movl  eax ,  new_temp16
if2
cmp 0, new_temp16
je else2
then2
call  error_pyobj 0
else2
call  is_int explicate_3
movl  eax ,  new_temp17
if3
cmp 0, new_temp17
je else3
then3
call  project_int explicate_3
movl  eax ,  new_temp18
movl  new_temp18 ,  explicate_5
else3
call  project_bool explicate_3
movl  eax ,  new_temp19
movl  new_temp19 ,  explicate_5
end if3
call  is_int explicate_4
movl  eax ,  new_temp20
if4
cmp 0, new_temp20
je else4
then4
call  project_int explicate_4
movl  eax ,  new_temp21
movl  new_temp21 ,  explicate_6
else4
call  project_bool explicate_4
movl  eax ,  new_temp22
movl  new_temp22 ,  explicate_6
end if4
movl  explicate_5 ,  new_temp23
addl  explicate_6 ,  new_temp23
call  inject_int new_temp23
movl  eax ,  new_temp24
movl  new_temp24 ,  new_temp1
end if2
end if1
call  is_int new_temp1
movl  eax ,  new_temp25
if2
cmp 0, new_temp25
je else2
then2
call  project_int new_temp1
movl  eax ,  new_temp26
movl  new_temp26 ,  new_temp27
negl  new_temp27
call  inject_int new_temp27
movl  eax ,  new_temp28
movl  new_temp28 ,  new_temp2
else2
call  is_bool new_temp1
movl  eax ,  new_temp29
if3
cmp 0, new_temp29
je end if3
then3
call  project_bool new_temp1
movl  eax ,  new_temp30
movl  new_temp30 ,  new_temp31
negl  new_temp31
call  inject_int new_temp31
movl  eax ,  new_temp32
movl  new_temp32 ,  new_temp2
end if3
end if2
movl  new_temp2 ,  x
call  print x


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp2': {'new_temp12', 'new_temp11', 'edx', 'new_temp24', 'new_temp9', 'new_temp10', 'new_temp7', 'new_temp22', 'new_temp19', 'new_temp13', 'ecx', 'new_temp0', 'explicate_5', 'new_temp15', 'new_temp18', 'new_temp29', 'eax', 'new_temp23', 'new_temp8', 'new_temp21', 'explicate_6', 'new_temp17', 'new_temp20', 'new_temp1', 'new_temp16', 'explicate_3', 'new_temp14', 'new_temp25', 'explicate_4'}, 'new_temp1': {'new_temp29', 'eax', 'new_temp11', 'new_temp8', 'new_temp9', 'new_temp10', 'new_temp7', 'new_temp16', 'ecx', 'edx', 'new_temp0', 'explicate_3', 'new_temp2', 'new_temp25', 'explicate_4'}, 'new_temp7': {'new_temp2', 'new_temp1'}, 'eax': {'new_temp12', 'explicate_5', 'new_temp1', 'new_temp0', 'explicate_3', 'new_temp2', 'explicate_4'}, 'ecx': {'new_temp12', 'explicate_5', 'new_temp1', 'new_temp0', 'explicate_3', 'new_temp2', 'explicate_4'}, 'edx': {'new_temp12', 'explicate_5', 'new_temp1', 'new_temp0', 'explicate_3', 'new_temp2', 'explicate_4'}, 'new_temp8': {'new_temp2', 'new_temp1'}, 'new_temp0': {'eax', 'edx', 'new_temp1', 'ecx', 'explicate_3', 'new_temp2', 'new_temp9'}, 'new_temp9': {'new_temp0', 'new_temp2', 'new_temp1'}, 'explicate_3': {'eax', 'new_temp11', 'new_temp10', 'new_temp17', 'new_temp16', 'new_temp1', 'edx', 'ecx', 'new_temp2', 'new_temp0', 'explicate_4'}, 'explicate_4': {'eax', 'new_temp12', 'new_temp11', 'explicate_5', 'new_temp10', 'new_temp17', 'new_temp19', 'new_temp20', 'new_temp16', 'new_temp1', 'edx', 'ecx', 'explicate_3', 'new_temp2', 'new_temp18'}, 'new_temp10': {'explicate_4', 'explicate_3', 'new_temp2', 'new_temp1'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp11': {'explicate_4', 'explicate_3', 'new_temp2', 'new_temp1'}, 'new_temp16': {'explicate_4', 'explicate_3', 'new_temp2', 'new_temp1'}, 'new_temp12': {'eax', 'new_temp13', 'ecx', 'edx', 'new_temp2', 'explicate_4'}, 'new_temp13': {'new_temp12', 'new_temp2'}, 'new_temp14': {'new_temp2'}, 'new_temp15': {'new_temp2'}, 'new_temp25': {'new_temp2', 'new_temp1'}, 'new_temp17': {'explicate_3', 'new_temp2', 'explicate_4'}, 'new_temp26': set(), 'new_temp27': set(), 'new_temp28': set(), 'new_temp29': {'new_temp2', 'new_temp1'}, 'new_temp18': {'new_temp2', 'explicate_4'}, 'explicate_5': {'eax', 'new_temp21', 'explicate_6', 'new_temp22', 'new_temp20', 'ecx', 'edx', 'new_temp2', 'explicate_4'}, 'new_temp19': {'new_temp2', 'explicate_4'}, 'x': set(), 'new_temp30': set(), 'new_temp31': set(), 'new_temp32': set(), 'new_temp20': {'explicate_5', 'new_temp2', 'explicate_4'}, 'new_temp21': {'explicate_5', 'new_temp2'}, 'explicate_6': {'explicate_5', 'new_temp2', 'new_temp23'}, 'new_temp22': {'explicate_5', 'new_temp2'}, 'new_temp23': {'new_temp2', 'explicate_6'}, 'new_temp24': {'new_temp2'}}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'explicate_5': 4, 'explicate_4': 5, 'new_temp2': 6, 'new_temp12': 4, 'explicate_3': 4, 'new_temp1': 7, 'new_temp0': 5, 'new_temp16': 1, 'new_temp20': 1, 'new_temp17': 1, 'new_temp10': 1, 'new_temp11': 1, 'new_temp18': 1, 'explicate_6': 1, 'new_temp21': 1, 'new_temp23': 2, 'new_temp13': 1, 'new_temp19': 1, 'new_temp22': 1, 'new_temp9': 1, 'new_temp25': 1, 'new_temp14': 1, 'new_temp15': 1, 'new_temp7': 1, 'new_temp24': 1, 'new_temp8': 1, 'new_temp29': 1, 'new_temp28': 1, 'new_temp32': 1, 'new_temp26': 1, 'x': 1, 'new_temp30': 1, 'new_temp31': 1, 'new_temp27': 1}
Spilled set:
 {'new_temp1'}


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp1': -4, 'explicate_5': 'edi', 'explicate_4': 'ebx', 'new_temp2': 'esi', 'new_temp12': 'edi', 'explicate_3': 'edi', 'new_temp0': 'ebx', 'new_temp16': 'eax', 'new_temp20': 'eax', 'new_temp17': 'eax', 'new_temp10': 'eax', 'new_temp11': 'eax', 'new_temp18': 'eax', 'explicate_6': 'eax', 'new_temp21': 'eax', 'new_temp23': 'ecx', 'new_temp13': 'eax', 'new_temp19': 'eax', 'new_temp22': 'eax', 'new_temp9': 'eax', 'new_temp25': 'eax', 'new_temp14': 'eax', 'new_temp15': 'eax', 'new_temp7': 'eax', 'new_temp24': 'eax', 'new_temp8': 'eax', 'new_temp29': 'eax', 'new_temp28': 'eax', 'new_temp32': 'eax', 'new_temp26': 'eax', 'x': 'eax', 'new_temp30': 'eax', 'new_temp31': 'eax', 'new_temp27': 'eax'}
new_temp7
new_temp7
new_temp7
new_temp8
new_temp8
new_temp0
new_temp9
new_temp9
explicate_3
new_temp0
explicate_4
explicate_3
new_temp10
new_temp10
explicate_4
new_temp11
new_temp11
explicate_3
new_temp12
explicate_4
new_temp13
new_temp13
new_temp12
new_temp14
new_temp14
new_temp15
new_temp15
explicate_4
new_temp16
new_temp16
explicate_3
new_temp17
new_temp17
explicate_3
new_temp18
new_temp18
explicate_5
explicate_3
new_temp19
new_temp19
explicate_5
explicate_4
new_temp20
new_temp20
explicate_4
new_temp21
new_temp21
explicate_6
explicate_4
new_temp22
new_temp22
explicate_6
explicate_5
new_temp23
explicate_6
new_temp23
new_temp23
new_temp24
new_temp24
new_temp25
new_temp25
new_temp26
new_temp26
new_temp27
new_temp27
new_temp27
new_temp28
new_temp28
new_temp2
new_temp29
new_temp29
new_temp30
new_temp30
new_temp31
new_temp31
new_temp31
new_temp32
new_temp32
new_temp2
new_temp2
x
x
