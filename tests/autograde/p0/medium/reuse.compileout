------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='tmp0', ctx=Store())],
            value=UnaryOp(
                op=USub(),
                operand=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                        Call(
                            func=Name(id='input', ctx=Load()),
                            args=[],
                            keywords=[])],
                    keywords=[]))),
        Assign(
            targets=[
                Name(id='tmp1', ctx=Store())],
            value=BinOp(
                left=Name(id='tmp0', ctx=Load()),
                op=Add(),
                right=Constant(value=23))),
        Assign(
            targets=[
                Name(id='tmp0', ctx=Store())],
            value=Call(
                func=Name(id='eval', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='input', ctx=Load()),
                        args=[],
                        keywords=[])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='tmp2', ctx=Store())],
            value=BinOp(
                left=Name(id='tmp0', ctx=Load()),
                op=Add(),
                right=Name(id='tmp1', ctx=Load()))),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='tmp2', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='tmp0', ctx=Store())],
            value=UnaryOp(
                op=USub(),
                operand=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                        Call(
                            func=Name(id='input', ctx=Load()),
                            args=[],
                            keywords=[])],
                    keywords=[]))),
        Assign(
            targets=[
                Name(id='tmp1', ctx=Store())],
            value=BinOp(
                left=Name(id='tmp0', ctx=Load()),
                op=Add(),
                right=Constant(value=23))),
        Assign(
            targets=[
                Name(id='tmp0', ctx=Store())],
            value=Call(
                func=Name(id='eval', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='input', ctx=Load()),
                        args=[],
                        keywords=[])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='tmp2', ctx=Store())],
            value=BinOp(
                left=Name(id='tmp0', ctx=Load()),
                op=Add(),
                right=Name(id='tmp1', ctx=Load()))),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='tmp2', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
tmp0 = -eval(input())
tmp1 = tmp0 + 23
tmp0 = eval(input())
tmp2 = tmp0 + tmp1
print(tmp2)

Module(
     body=[
          Assign(
               targets=[
                    Name(id='tmp0', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Call(
                         func=Name(id='eval', ctx=Load()),
                         args=[
                              Call(
                                   func=Name(id='input', ctx=Load()),
                                   args=[],
                                   keywords=[])],
                         keywords=[]))),
          Assign(
               targets=[
                    Name(id='tmp1', ctx=Store())],
               value=BinOp(
                    left=Name(id='tmp0', ctx=Load()),
                    op=Add(),
                    right=Constant(value=23))),
          Assign(
               targets=[
                    Name(id='tmp0', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='tmp2', ctx=Store())],
               value=BinOp(
                    left=Name(id='tmp0', ctx=Load()),
                    op=Add(),
                    right=Name(id='tmp1', ctx=Load()))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='tmp2', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Name(id='new_temp0', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='tmp0', ctx=Store())],
               value=Name(id='new_temp1', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=BinOp(
                    left=Name(id='tmp0', ctx=Load()),
                    op=Add(),
                    right=Constant(value=23))),
          Assign(
               targets=[
                    Name(id='tmp1', ctx=Store())],
               value=Name(id='new_temp2', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='tmp0', ctx=Store())],
               value=Name(id='new_temp3', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=BinOp(
                    left=Name(id='tmp0', ctx=Load()),
                    op=Add(),
                    right=Name(id='tmp1', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='tmp2', ctx=Store())],
               value=Name(id='new_temp4', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='tmp2', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = eval(input())
new_temp1 = -new_temp0
tmp0 = new_temp1
new_temp2 = tmp0 + 23
tmp1 = new_temp2
new_temp3 = eval(input())
tmp0 = new_temp3
new_temp4 = tmp0 + tmp1
tmp2 = new_temp4
print(tmp2)
eval(input())
inject_int(-project_int(new_temp0))
inject_int(-project_bool(new_temp0))
<ast.Name object at 0x7f9e538130d0>
inject_big(add(project_big(explicate_5),project_big(explicate_6)))
inject_int(explicate_7+explicate_8)
<ast.Name object at 0x7f9e53813370>
eval(input())
<ast.Name object at 0x7f9e53813460>
inject_big(add(project_big(explicate_9),project_big(explicate_10)))
inject_int(explicate_11+explicate_12)
<ast.Name object at 0x7f9e53813550>

new_temp0 = eval(input())
if(is_int(new_temp0)):
	new_temp1 = inject_int(-project_int(new_temp0))
else:
	if(is_bool(new_temp0)):
		new_temp1 = inject_int(-project_bool(new_temp0))
tmp0 = new_temp1
explicate_5 = tmp0
explicate_6 = inject_int(23)
if(is_big(explicate_5)):
	if(is_big(explicate_6)):
		new_temp2 = inject_big(add(project_big(explicate_5),project_big(explicate_6)))
else:
	if(is_big(explicate_6)):
		error_pyobj(0)
	else:
		if(is_int(explicate_5)):
			explicate_7 = project_int(explicate_5)
		else:
			explicate_7 = project_bool(explicate_5)
		if(is_int(explicate_6)):
			explicate_8 = project_int(explicate_6)
		else:
			explicate_8 = project_bool(explicate_6)
		new_temp2 = inject_int(explicate_7+explicate_8)
tmp1 = new_temp2
new_temp3 = eval(input())
tmp0 = new_temp3
explicate_9 = tmp0
explicate_10 = tmp1
if(is_big(explicate_9)):
	if(is_big(explicate_10)):
		new_temp4 = inject_big(add(project_big(explicate_9),project_big(explicate_10)))
else:
	if(is_big(explicate_10)):
		error_pyobj(0)
	else:
		if(is_int(explicate_9)):
			explicate_11 = project_int(explicate_9)
		else:
			explicate_11 = project_bool(explicate_9)
		if(is_int(explicate_10)):
			explicate_12 = project_int(explicate_10)
		else:
			explicate_12 = project_bool(explicate_10)
		new_temp4 = inject_int(explicate_11+explicate_12)
tmp2 = new_temp4
print(tmp2)
--------------Explicate code-------
new_temp0 = eval(input())
if is_int(new_temp0):
    new_temp1 = inject_int(-project_int(new_temp0))
elif is_bool(new_temp0):
    new_temp1 = inject_int(-project_bool(new_temp0))
tmp0 = new_temp1
explicate_5 = tmp0
explicate_6 = inject_int(23)
if is_big(explicate_5):
    if is_big(explicate_6):
        new_temp2 = inject_big(add(project_big(explicate_5), project_big(explicate_6)))
elif is_big(explicate_6):
    error_pyobj(0)
else:
    if is_int(explicate_5):
        explicate_7 = project_int(explicate_5)
    else:
        explicate_7 = project_bool(explicate_5)
    if is_int(explicate_6):
        explicate_8 = project_int(explicate_6)
    else:
        explicate_8 = project_bool(explicate_6)
    new_temp2 = inject_int(explicate_7 + explicate_8)
tmp1 = new_temp2
new_temp3 = eval(input())
tmp0 = new_temp3
explicate_9 = tmp0
explicate_10 = tmp1
if is_big(explicate_9):
    if is_big(explicate_10):
        new_temp4 = inject_big(add(project_big(explicate_9), project_big(explicate_10)))
elif is_big(explicate_10):
    error_pyobj(0)
else:
    if is_int(explicate_9):
        explicate_11 = project_int(explicate_9)
    else:
        explicate_11 = project_bool(explicate_9)
    if is_int(explicate_10):
        explicate_12 = project_int(explicate_10)
    else:
        explicate_12 = project_bool(explicate_10)
    new_temp4 = inject_int(explicate_11 + explicate_12)
tmp2 = new_temp4
print(tmp2)


--- explicated flattened python ---
new_temp13 = eval(input())
new_temp0 = new_temp13
new_temp14 = is_int(new_temp0)
if new_temp14:
    new_temp15 = project_int(new_temp0)
    new_temp16 = -new_temp15
    new_temp17 = inject_int(new_temp16)
    new_temp1 = new_temp17
else:
    new_temp18 = is_bool(new_temp0)
    if new_temp18:
        new_temp19 = project_bool(new_temp0)
        new_temp20 = -new_temp19
        new_temp21 = inject_int(new_temp20)
        new_temp1 = new_temp21
tmp0 = new_temp1
explicate_5 = tmp0
new_temp22 = inject_int(23)
explicate_6 = new_temp22
new_temp23 = is_big(explicate_5)
if new_temp23:
    new_temp24 = is_big(explicate_6)
    if new_temp24:
        new_temp25 = project_big(explicate_5)
        new_temp26 = project_big(explicate_6)
        new_temp27 = add(new_temp25, new_temp26)
        new_temp28 = inject_big(new_temp27)
        new_temp2 = new_temp28
else:
    new_temp29 = is_big(explicate_6)
    if new_temp29:
        error_pyobj(0)
    else:
        new_temp30 = is_int(explicate_5)
        if new_temp30:
            new_temp31 = project_int(explicate_5)
            explicate_7 = new_temp31
        else:
            new_temp32 = project_bool(explicate_5)
            explicate_7 = new_temp32
        new_temp33 = is_int(explicate_6)
        if new_temp33:
            new_temp34 = project_int(explicate_6)
            explicate_8 = new_temp34
        else:
            new_temp35 = project_bool(explicate_6)
            explicate_8 = new_temp35
        new_temp36 = explicate_7 + explicate_8
        new_temp37 = inject_int(new_temp36)
        new_temp2 = new_temp37
tmp1 = new_temp2
new_temp38 = eval(input())
new_temp3 = new_temp38
tmp0 = new_temp3
explicate_9 = tmp0
explicate_10 = tmp1
new_temp39 = is_big(explicate_9)
if new_temp39:
    new_temp40 = is_big(explicate_10)
    if new_temp40:
        new_temp41 = project_big(explicate_9)
        new_temp42 = project_big(explicate_10)
        new_temp43 = add(new_temp41, new_temp42)
        new_temp44 = inject_big(new_temp43)
        new_temp4 = new_temp44
else:
    new_temp45 = is_big(explicate_10)
    if new_temp45:
        error_pyobj(0)
    else:
        new_temp46 = is_int(explicate_9)
        if new_temp46:
            new_temp47 = project_int(explicate_9)
            explicate_11 = new_temp47
        else:
            new_temp48 = project_bool(explicate_9)
            explicate_11 = new_temp48
        new_temp49 = is_int(explicate_10)
        if new_temp49:
            new_temp50 = project_int(explicate_10)
            explicate_12 = new_temp50
        else:
            new_temp51 = project_bool(explicate_10)
            explicate_12 = new_temp51
        new_temp52 = explicate_11 + explicate_12
        new_temp53 = inject_int(new_temp52)
        new_temp4 = new_temp53
tmp2 = new_temp4
print(tmp2)


--- x86 IR ---
call  eval None
movl  eax ,  new_temp13
movl  new_temp13 ,  new_temp0
call  is_int new_temp0
movl  eax ,  new_temp14
if1
cmp 0, new_temp14
je else1
then1
call  project_int new_temp0
movl  eax ,  new_temp15
movl  new_temp15 ,  new_temp16
negl  new_temp16
call  inject_int new_temp16
movl  eax ,  new_temp17
movl  new_temp17 ,  new_temp1
else1
call  is_bool new_temp0
movl  eax ,  new_temp18
if2
cmp 0, new_temp18
je end if2
then2
call  project_bool new_temp0
movl  eax ,  new_temp19
movl  new_temp19 ,  new_temp20
negl  new_temp20
call  inject_int new_temp20
movl  eax ,  new_temp21
movl  new_temp21 ,  new_temp1
end if2
end if1
movl  new_temp1 ,  tmp0
movl  tmp0 ,  explicate_5
call  inject_int 23
movl  eax ,  new_temp22
movl  new_temp22 ,  explicate_6
call  is_big explicate_5
movl  eax ,  new_temp23
if2
cmp 0, new_temp23
je else2
then2
call  is_big explicate_6
movl  eax ,  new_temp24
if3
cmp 0, new_temp24
je end if3
then3
call  project_big explicate_5
movl  eax ,  new_temp25
call  project_big explicate_6
movl  eax ,  new_temp26
call  add new_temp25,new_temp26
movl  eax ,  new_temp27
call  inject_big new_temp27
movl  eax ,  new_temp28
movl  new_temp28 ,  new_temp2
end if3
else2
call  is_big explicate_6
movl  eax ,  new_temp29
if3
cmp 0, new_temp29
je else3
then3
call  error_pyobj 0
else3
call  is_int explicate_5
movl  eax ,  new_temp30
if4
cmp 0, new_temp30
je else4
then4
call  project_int explicate_5
movl  eax ,  new_temp31
movl  new_temp31 ,  explicate_7
else4
call  project_bool explicate_5
movl  eax ,  new_temp32
movl  new_temp32 ,  explicate_7
end if4
call  is_int explicate_6
movl  eax ,  new_temp33
if5
cmp 0, new_temp33
je else5
then5
call  project_int explicate_6
movl  eax ,  new_temp34
movl  new_temp34 ,  explicate_8
else5
call  project_bool explicate_6
movl  eax ,  new_temp35
movl  new_temp35 ,  explicate_8
end if5
movl  explicate_7 ,  new_temp36
addl  explicate_8 ,  new_temp36
call  inject_int new_temp36
movl  eax ,  new_temp37
movl  new_temp37 ,  new_temp2
end if3
end if2
movl  new_temp2 ,  tmp1
call  eval None
movl  eax ,  new_temp38
movl  new_temp38 ,  new_temp3
movl  new_temp3 ,  tmp0
movl  tmp0 ,  explicate_9
movl  tmp1 ,  explicate_10
call  is_big explicate_9
movl  eax ,  new_temp39
if3
cmp 0, new_temp39
je else3
then3
call  is_big explicate_10
movl  eax ,  new_temp40
if4
cmp 0, new_temp40
je end if4
then4
call  project_big explicate_9
movl  eax ,  new_temp41
call  project_big explicate_10
movl  eax ,  new_temp42
call  add new_temp41,new_temp42
movl  eax ,  new_temp43
call  inject_big new_temp43
movl  eax ,  new_temp44
movl  new_temp44 ,  new_temp4
end if4
else3
call  is_big explicate_10
movl  eax ,  new_temp45
if4
cmp 0, new_temp45
je else4
then4
call  error_pyobj 0
else4
call  is_int explicate_9
movl  eax ,  new_temp46
if5
cmp 0, new_temp46
je else5
then5
call  project_int explicate_9
movl  eax ,  new_temp47
movl  new_temp47 ,  explicate_11
else5
call  project_bool explicate_9
movl  eax ,  new_temp48
movl  new_temp48 ,  explicate_11
end if5
call  is_int explicate_10
movl  eax ,  new_temp49
if6
cmp 0, new_temp49
je else6
then6
call  project_int explicate_10
movl  eax ,  new_temp50
movl  new_temp50 ,  explicate_12
else6
call  project_bool explicate_10
movl  eax ,  new_temp51
movl  new_temp51 ,  explicate_12
end if6
movl  explicate_11 ,  new_temp52
addl  explicate_12 ,  new_temp52
call  inject_int new_temp52
movl  eax ,  new_temp53
movl  new_temp53 ,  new_temp4
end if4
end if3
movl  new_temp4 ,  tmp2
call  print tmp2


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp1': {'new_temp0', 'eax', 'new_temp14', 'new_temp18', 'edx', 'new_temp2', 'ecx', 'new_temp13', 'new_temp4'}, 'eax': {'new_temp0', 'new_temp1', 'explicate_10', 'explicate_11', 'tmp1', 'new_temp41', 'explicate_6', 'new_temp2', 'explicate_9', 'explicate_7', 'explicate_5', 'new_temp25', 'new_temp4'}, 'ecx': {'new_temp0', 'new_temp1', 'explicate_10', 'explicate_11', 'tmp1', 'new_temp41', 'explicate_6', 'new_temp2', 'explicate_9', 'explicate_7', 'explicate_5', 'new_temp25', 'new_temp4'}, 'edx': {'new_temp0', 'new_temp1', 'explicate_10', 'explicate_11', 'tmp1', 'new_temp41', 'explicate_6', 'new_temp2', 'explicate_9', 'explicate_7', 'explicate_5', 'new_temp25', 'new_temp4'}, 'new_temp4': {'eax', 'new_temp14', 'new_temp2', 'new_temp16', 'new_temp15', 'new_temp31', 'new_temp22', 'explicate_5', 'new_temp39', 'explicate_7', 'new_temp25', 'new_temp1', 'new_temp38', 'tmp1', 'new_temp45', 'new_temp24', 'new_temp17', 'new_temp28', 'explicate_9', 'new_temp0', 'new_temp27', 'new_temp35', 'new_temp18', 'tmp0', 'explicate_6', 'new_temp26', 'new_temp3', 'new_temp40', 'new_temp32', 'new_temp34', 'new_temp13', 'new_temp37', 'new_temp23', 'new_temp33', 'new_temp36', 'explicate_10', 'explicate_8', 'edx', 'ecx', 'new_temp20', 'new_temp21', 'new_temp29', 'new_temp30', 'new_temp19'}, 'new_temp2': {'new_temp0', 'eax', 'new_temp14', 'new_temp18', 'tmp0', 'explicate_6', 'new_temp16', 'new_temp15', 'new_temp22', 'explicate_5', 'new_temp13', 'new_temp23', 'new_temp1', 'edx', 'new_temp24', 'ecx', 'new_temp20', 'new_temp21', 'new_temp29', 'new_temp17', 'new_temp19', 'new_temp4'}, 'new_temp13': {'new_temp1', 'new_temp4', 'new_temp2'}, 'new_temp0': {'eax', 'new_temp1', 'new_temp14', 'new_temp18', 'edx', 'new_temp2', 'ecx', 'new_temp4'}, 'new_temp14': {'new_temp2', 'new_temp0', 'new_temp1', 'new_temp4'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp15': {'new_temp4', 'new_temp2'}, 'new_temp16': {'new_temp2', 'new_temp4'}, 'new_temp17': {'new_temp4', 'new_temp2'}, 'new_temp18': {'new_temp2', 'new_temp0', 'new_temp1', 'new_temp4'}, 'tmp0': {'tmp1', 'new_temp4', 'new_temp2'}, 'explicate_5': {'new_temp23', 'eax', 'edx', 'explicate_6', 'new_temp2', 'new_temp24', 'ecx', 'new_temp29', 'new_temp22', 'new_temp30', 'new_temp4'}, 'new_temp22': {'new_temp2', 'explicate_5', 'new_temp4'}, 'explicate_6': {'new_temp23', 'new_temp33', 'eax', 'new_temp30', 'edx', 'new_temp2', 'new_temp32', 'new_temp24', 'ecx', 'new_temp29', 'new_temp31', 'explicate_7', 'explicate_5', 'new_temp25', 'new_temp4'}, 'new_temp23': {'new_temp4', 'explicate_5', 'explicate_6', 'new_temp2'}, 'new_temp19': {'new_temp4', 'new_temp2'}, 'new_temp20': {'new_temp2', 'new_temp4'}, 'new_temp21': {'new_temp4', 'new_temp2'}, 'new_temp24': {'new_temp4', 'explicate_5', 'explicate_6', 'new_temp2'}, 'new_temp29': {'new_temp2', 'explicate_5', 'explicate_6', 'new_temp4'}, 'new_temp25': {'eax', 'ecx', 'edx', 'explicate_6', 'new_temp26', 'new_temp4'}, 'new_temp26': {'new_temp25', 'new_temp4'}, 'new_temp27': {'new_temp4'}, 'new_temp28': {'new_temp4'}, 'tmp1': {'eax', 'new_temp38', 'edx', 'tmp0', 'new_temp3', 'ecx', 'explicate_9', 'new_temp4'}, 'new_temp38': {'tmp1', 'new_temp4'}, 'new_temp3': {'new_temp4', 'tmp1'}, 'explicate_9': {'new_temp46', 'eax', 'explicate_10', 'tmp1', 'edx', 'new_temp45', 'new_temp40', 'ecx', 'new_temp39', 'new_temp4'}, 'explicate_10': {'new_temp46', 'new_temp47', 'eax', 'explicate_11', 'new_temp41', 'edx', 'new_temp45', 'new_temp49', 'new_temp40', 'ecx', 'new_temp48', 'new_temp39', 'explicate_9', 'new_temp4'}, 'new_temp39': {'explicate_10', 'explicate_9', 'new_temp4'}, 'new_temp30': {'explicate_5', 'explicate_6', 'new_temp4'}, 'new_temp40': {'explicate_10', 'explicate_9', 'new_temp4'}, 'new_temp45': {'explicate_10', 'explicate_9', 'new_temp4'}, 'new_temp31': {'explicate_6', 'new_temp4'}, 'explicate_7': {'new_temp33', 'eax', 'explicate_8', 'edx', 'explicate_6', 'ecx', 'new_temp34', 'new_temp35', 'new_temp4'}, 'new_temp32': {'explicate_6', 'new_temp4'}, 'new_temp41': {'eax', 'explicate_10', 'edx', 'ecx', 'new_temp42'}, 'new_temp42': {'new_temp41'}, 'new_temp43': set(), 'new_temp44': set(), 'tmp2': set(), 'new_temp46': {'explicate_10', 'explicate_9'}, 'new_temp33': {'explicate_7', 'explicate_6', 'new_temp4'}, 'new_temp47': {'explicate_10'}, 'explicate_11': {'eax', 'explicate_10', 'new_temp51', 'explicate_12', 'edx', 'new_temp49', 'new_temp50', 'ecx'}, 'new_temp48': {'explicate_10'}, 'new_temp34': {'explicate_7', 'new_temp4'}, 'explicate_8': {'explicate_7', 'new_temp36', 'new_temp4'}, 'new_temp35': {'explicate_7', 'new_temp4'}, 'new_temp49': {'explicate_10', 'explicate_11'}, 'new_temp36': {'new_temp4', 'explicate_8'}, 'new_temp37': {'new_temp4'}, 'new_temp50': {'explicate_11'}, 'explicate_12': {'new_temp52', 'explicate_11'}, 'new_temp51': {'explicate_11'}, 'new_temp52': {'explicate_12'}, 'new_temp53': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp41': 4, 'explicate_10': 5, 'new_temp4': 4, 'explicate_9': 6, 'tmp1': 5, 'explicate_6': 5, 'new_temp25': 6, 'explicate_7': 6, 'explicate_5': 6, 'new_temp2': 7, 'new_temp0': 5, 'new_temp1': 6, 'explicate_11': 4, 'new_temp30': 1, 'new_temp29': 1, 'new_temp33': 1, 'new_temp23': 1, 'new_temp40': 1, 'new_temp18': 1, 'new_temp24': 1, 'new_temp45': 1, 'new_temp39': 1, 'new_temp14': 1, 'new_temp35': 1, 'explicate_8': 1, 'new_temp36': 2, 'new_temp13': 1, 'new_temp38': 1, 'new_temp22': 1, 'new_temp34': 1, 'new_temp31': 1, 'new_temp32': 1, 'new_temp3': 1, 'new_temp49': 1, 'new_temp26': 1, 'tmp0': 1, 'new_temp46': 1, 'new_temp19': 1, 'new_temp21': 1, 'new_temp28': 1, 'new_temp17': 1, 'new_temp42': 1, 'new_temp20': 1, 'new_temp37': 1, 'new_temp15': 1, 'new_temp48': 1, 'new_temp50': 1, 'new_temp16': 1, 'explicate_12': 1, 'new_temp52': 2, 'new_temp51': 1, 'new_temp27': 1, 'new_temp47': 1, 'new_temp44': 1, 'new_temp53': 1, 'tmp2': 1, 'new_temp43': 1}
Spilled set:
 {'new_temp2'}


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp2': -4, 'new_temp41': 'edi', 'explicate_10': 'ebx', 'new_temp4': 'edi', 'explicate_9': 'esi', 'tmp1': 'ebx', 'explicate_6': 'ebx', 'new_temp25': 'esi', 'explicate_7': 'esi', 'explicate_5': 'esi', 'new_temp0': 'ebx', 'new_temp1': 'esi', 'explicate_11': 'edi', 'new_temp30': 'eax', 'new_temp29': 'eax', 'new_temp33': 'eax', 'new_temp23': 'eax', 'new_temp40': 'eax', 'new_temp18': 'eax', 'new_temp24': 'eax', 'new_temp45': 'eax', 'new_temp39': 'eax', 'new_temp14': 'eax', 'new_temp35': 'eax', 'explicate_8': 'eax', 'new_temp36': 'ecx', 'new_temp13': 'eax', 'new_temp38': 'eax', 'new_temp22': 'eax', 'new_temp34': 'eax', 'new_temp31': 'eax', 'new_temp32': 'eax', 'new_temp3': 'eax', 'new_temp49': 'eax', 'new_temp26': 'eax', 'tmp0': 'eax', 'new_temp46': 'eax', 'new_temp19': 'eax', 'new_temp21': 'eax', 'new_temp28': 'eax', 'new_temp17': 'eax', 'new_temp42': 'eax', 'new_temp20': 'eax', 'new_temp37': 'eax', 'new_temp15': 'eax', 'new_temp48': 'eax', 'new_temp50': 'eax', 'new_temp16': 'eax', 'explicate_12': 'eax', 'new_temp52': 'ecx', 'new_temp51': 'eax', 'new_temp27': 'eax', 'new_temp47': 'eax', 'new_temp44': 'eax', 'new_temp53': 'eax', 'tmp2': 'eax', 'new_temp43': 'eax'}
new_temp13
new_temp13
new_temp0
new_temp0
new_temp14
new_temp14
new_temp0
new_temp15
new_temp15
new_temp16
new_temp16
new_temp16
new_temp17
new_temp17
new_temp1
new_temp0
new_temp18
new_temp18
new_temp0
new_temp19
new_temp19
new_temp20
new_temp20
new_temp20
new_temp21
new_temp21
new_temp1
new_temp1
tmp0
tmp0
explicate_5
new_temp22
new_temp22
explicate_6
explicate_5
new_temp23
new_temp23
explicate_6
new_temp24
new_temp24
explicate_5
new_temp25
explicate_6
new_temp26
new_temp26
new_temp25
new_temp27
new_temp27
new_temp28
new_temp28
explicate_6
new_temp29
new_temp29
explicate_5
new_temp30
new_temp30
explicate_5
new_temp31
new_temp31
explicate_7
explicate_5
new_temp32
new_temp32
explicate_7
explicate_6
new_temp33
new_temp33
explicate_6
new_temp34
new_temp34
explicate_8
explicate_6
new_temp35
new_temp35
explicate_8
explicate_7
new_temp36
explicate_8
new_temp36
new_temp36
new_temp37
new_temp37
tmp1
new_temp38
new_temp38
new_temp3
new_temp3
tmp0
tmp0
explicate_9
tmp1
explicate_10
explicate_9
new_temp39
new_temp39
explicate_10
new_temp40
new_temp40
explicate_9
new_temp41
explicate_10
new_temp42
new_temp42
new_temp41
new_temp43
new_temp43
new_temp44
new_temp44
new_temp4
explicate_10
new_temp45
new_temp45
explicate_9
new_temp46
new_temp46
explicate_9
new_temp47
new_temp47
explicate_11
explicate_9
new_temp48
new_temp48
explicate_11
explicate_10
new_temp49
new_temp49
explicate_10
new_temp50
new_temp50
explicate_12
explicate_10
new_temp51
new_temp51
explicate_12
explicate_11
new_temp52
explicate_12
new_temp52
new_temp52
new_temp53
new_temp53
new_temp4
new_temp4
tmp2
tmp2
