--------------Original code----------------
eval(input()) + eval(input())
eval(input())
Module(
     body=[
          Expr(
               value=BinOp(
                    left=Call(
                         func=Name(id='eval', ctx=Load()),
                         args=[
                              Call(
                                   func=Name(id='input', ctx=Load()),
                                   args=[],
                                   keywords=[])],
                         keywords=[]),
                    op=Add(),
                    right=Call(
                         func=Name(id='eval', ctx=Load()),
                         args=[
                              Call(
                                   func=Name(id='input', ctx=Load()),
                                   args=[],
                                   keywords=[])],
                         keywords=[]))),
          Expr(
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Expr(
               value=BinOp(
                    left=Name(id='new_temp0', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp1', ctx=Load()))),
          Expr(
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = eval(input())
new_temp1 = eval(input())
new_temp0 + new_temp1
eval(input())
eval(input())
eval(input())

new_temp0 = eval(input())
new_temp1 = eval(input())
eval(input())
--------------Explicate code-------
new_temp0 = eval(input())
new_temp1 = eval(input())
eval(input())


--- explicated flattened python ---
new_temp2 = eval(input())
new_temp0 = new_temp2
new_temp3 = eval(input())
new_temp1 = new_temp3
eval(input())


--- x86 IR ---
call  eval None
movl  eax ,  new_temp2
movl  new_temp2 ,  new_temp0
call  eval None
movl  eax ,  new_temp3
movl  new_temp3 ,  new_temp1
call  eval None


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp2': set(), 'new_temp0': set(), 'new_temp3': set(), 'new_temp1': set(), 'eax': set(), 'ecx': set(), 'edx': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp0': 1, 'new_temp3': 1, 'new_temp1': 1, 'new_temp2': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp0': 'eax', 'new_temp3': 'eax', 'new_temp1': 'eax', 'new_temp2': 'eax'}
new_temp2
new_temp2
new_temp0
new_temp3
new_temp3
new_temp1
