--------------Original code----------------
print(1 + 2)
------------------Tree of original code--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=Constant(value=1),
                        op=Add(),
                        right=Constant(value=2))],
                keywords=[]))],
    type_ignores=[])
------------------Tree after removing AnnAssign--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=Constant(value=1),
                        op=Add(),
                        right=Constant(value=2))],
                keywords=[]))],
    type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=BinOp(
                    left=Constant(value=1),
                    op=Add(),
                    right=Constant(value=2))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp0', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = 1 + 2
print(new_temp0)
--------------Explicate code-------
explicate_1 = inject_int(1)
explicate_2 = inject_int(2)
explicate_3 = project_int(explicate_1)
explicate_4 = project_int(explicate_2)
new_temp0 = inject_int(explicate_3 + explicate_4)
print(new_temp0)


--- explicated flattened python ---
new_temp5 = inject_int(1)
explicate_1 = new_temp5
new_temp6 = inject_int(2)
explicate_2 = new_temp6
new_temp7 = project_int(explicate_1)
explicate_3 = new_temp7
new_temp8 = project_int(explicate_2)
explicate_4 = new_temp8
new_temp9 = explicate_3 + explicate_4
new_temp10 = inject_int(new_temp9)
new_temp0 = new_temp10
print(new_temp0)


--- x86 IR ---
call  inject_int 1
movl  eax ,  new_temp5
movl  new_temp5 ,  explicate_1
call  inject_int 2
movl  eax ,  new_temp6
movl  new_temp6 ,  explicate_2
call  project_int explicate_1
movl  eax ,  new_temp7
movl  new_temp7 ,  explicate_3
call  project_int explicate_2
movl  eax ,  new_temp8
movl  new_temp8 ,  explicate_4
movl  explicate_3 ,  new_temp9
addl  explicate_4 ,  new_temp9
call  inject_int new_temp9
movl  eax ,  new_temp10
movl  new_temp10 ,  new_temp0
call  print new_temp0


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp5': set(), 'explicate_1': {'explicate_2', 'ecx', 'new_temp6', 'edx', 'eax'}, 'eax': {'explicate_2', 'explicate_1', 'explicate_3'}, 'ecx': {'explicate_2', 'explicate_1', 'explicate_3'}, 'edx': {'explicate_2', 'explicate_1', 'explicate_3'}, 'new_temp6': {'explicate_1'}, 'explicate_2': {'explicate_1', 'explicate_3', 'ecx', 'new_temp7', 'edx', 'eax'}, 'new_temp7': {'explicate_2'}, 'explicate_3': {'explicate_2', 'ecx', 'explicate_4', 'edx', 'new_temp8', 'eax'}, 'new_temp8': {'explicate_3'}, 'explicate_4': {'new_temp9', 'explicate_3'}, 'new_temp9': {'explicate_4'}, 'new_temp10': set(), 'new_temp0': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'explicate_3': 4, 'explicate_2': 5, 'explicate_1': 4, 'new_temp8': 1, 'explicate_4': 1, 'new_temp7': 1, 'new_temp6': 1, 'new_temp9': 2, 'new_temp5': 1, 'new_temp0': 1, 'new_temp10': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'explicate_3': 'edi', 'explicate_2': 'ebx', 'explicate_1': 'edi', 'new_temp8': 'eax', 'explicate_4': 'eax', 'new_temp7': 'eax', 'new_temp6': 'eax', 'new_temp9': 'ecx', 'new_temp5': 'eax', 'new_temp0': 'eax', 'new_temp10': 'eax'}
ir.func_name =  inject_int
new_temp5
new_temp5
explicate_1
ir.func_name =  inject_int
new_temp6
new_temp6
explicate_2
explicate_1
ir.func_name =  project_int
new_temp7
new_temp7
explicate_3
explicate_2
ir.func_name =  project_int
new_temp8
new_temp8
explicate_4
explicate_3
new_temp9
explicate_4
new_temp9
new_temp9
ir.func_name =  inject_int
new_temp10
new_temp10
new_temp0
new_temp0
ir.func_name =  print
