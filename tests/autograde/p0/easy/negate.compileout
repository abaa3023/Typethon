--------------Original code----------------
x = 2
y = -x
print(x)
print(y)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Name(id='x', ctx=Load()))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='y', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Name(id='x', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='new_temp0', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='y', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
x = 2
new_temp0 = -x
y = new_temp0
print(x)
print(y)
<ast.Constant object at 0x7f37518a8f40>
inject_int(-project_int(x))
inject_int(-project_bool(x))
<ast.Name object at 0x7f37518a90f0>

x = inject_int(2)
if(is_int(x)):
	new_temp0 = inject_int(-project_int(x))
else:
	if(is_bool(x)):
		new_temp0 = inject_int(-project_bool(x))
y = new_temp0
print(x)
print(y)
--------------Explicate code-------
x = inject_int(2)
if is_int(x):
    new_temp0 = inject_int(-project_int(x))
elif is_bool(x):
    new_temp0 = inject_int(-project_bool(x))
y = new_temp0
print(x)
print(y)


--- explicated flattened python ---
new_temp1 = inject_int(2)
x = new_temp1
new_temp2 = is_int(x)
if new_temp2:
    new_temp3 = project_int(x)
    new_temp4 = -new_temp3
    new_temp5 = inject_int(new_temp4)
    new_temp0 = new_temp5
else:
    new_temp6 = is_bool(x)
    if new_temp6:
        new_temp7 = project_bool(x)
        new_temp8 = -new_temp7
        new_temp9 = inject_int(new_temp8)
        new_temp0 = new_temp9
y = new_temp0
print(x)
print(y)


--- x86 IR ---
call  inject_int 2
movl  eax ,  new_temp1
movl  new_temp1 ,  x
call  is_int x
movl  eax ,  new_temp2
if1
cmp 0, new_temp2
je else1
then1
call  project_int x
movl  eax ,  new_temp3
movl  new_temp3 ,  new_temp4
negl  new_temp4
call  inject_int new_temp4
movl  eax ,  new_temp5
movl  new_temp5 ,  new_temp0
else1
call  is_bool x
movl  eax ,  new_temp6
if2
cmp 0, new_temp6
je end if2
then2
call  project_bool x
movl  eax ,  new_temp7
movl  new_temp7 ,  new_temp8
negl  new_temp8
call  inject_int new_temp8
movl  eax ,  new_temp9
movl  new_temp9 ,  new_temp0
end if2
end if1
movl  new_temp0 ,  y
call  print x
call  print y


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp0': {'edx', 'eax', 'x', 'new_temp1', 'new_temp6', 'new_temp2', 'ecx'}, 'eax': {'new_temp0', 'y', 'x'}, 'ecx': {'new_temp0', 'y', 'x'}, 'edx': {'new_temp0', 'y', 'x'}, 'new_temp1': {'new_temp0'}, 'x': {'new_temp3', 'new_temp0', 'new_temp9', 'new_temp4', 'edx', 'ecx', 'new_temp7', 'eax', 'new_temp5', 'y', 'new_temp2', 'new_temp6', 'new_temp8'}, 'new_temp2': {'new_temp0', 'x'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp3': {'x'}, 'new_temp4': {'x'}, 'new_temp5': {'x'}, 'new_temp6': {'new_temp0', 'x'}, 'y': {'ecx', 'eax', 'x', 'edx'}, 'new_temp7': {'x'}, 'new_temp8': {'x'}, 'new_temp9': {'x'}}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'y': 4, 'x': 5, 'new_temp0': 4, 'new_temp2': 1, 'new_temp6': 1, 'new_temp8': 1, 'new_temp1': 1, 'new_temp5': 1, 'new_temp4': 1, 'new_temp9': 1, 'new_temp7': 1, 'new_temp3': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'y': 'edi', 'x': 'ebx', 'new_temp0': 'edi', 'new_temp2': 'eax', 'new_temp6': 'eax', 'new_temp8': 'eax', 'new_temp1': 'eax', 'new_temp5': 'eax', 'new_temp4': 'eax', 'new_temp9': 'eax', 'new_temp7': 'eax', 'new_temp3': 'eax'}
new_temp1
new_temp1
x
x
new_temp2
new_temp2
x
new_temp3
new_temp3
new_temp4
new_temp4
new_temp4
new_temp5
new_temp5
new_temp0
x
new_temp6
new_temp6
x
new_temp7
new_temp7
new_temp8
new_temp8
new_temp8
new_temp9
new_temp9
new_temp0
new_temp0
y
x
y
