------------------CORRECT TREE--------------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=Call(
                            func=Name(id='eval', ctx=Load()),
                            args=[
                                Call(
                                    func=Name(id='input', ctx=Load()),
                                    args=[],
                                    keywords=[])],
                            keywords=[]),
                        op=Add(),
                        right=Call(
                            func=Name(id='eval', ctx=Load()),
                            args=[
                                Call(
                                    func=Name(id='input', ctx=Load()),
                                    args=[],
                                    keywords=[])],
                            keywords=[]))],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=Call(
                            func=Name(id='eval', ctx=Load()),
                            args=[
                                Call(
                                    func=Name(id='input', ctx=Load()),
                                    args=[],
                                    keywords=[])],
                            keywords=[]),
                        op=Add(),
                        right=Call(
                            func=Name(id='eval', ctx=Load()),
                            args=[
                                Call(
                                    func=Name(id='input', ctx=Load()),
                                    args=[],
                                    keywords=[])],
                            keywords=[]))],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
print(eval(input()) + eval(input()))
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         BinOp(
                              left=Call(
                                   func=Name(id='eval', ctx=Load()),
                                   args=[
                                        Call(
                                             func=Name(id='input', ctx=Load()),
                                             args=[],
                                             keywords=[])],
                                   keywords=[]),
                              op=Add(),
                              right=Call(
                                   func=Name(id='eval', ctx=Load()),
                                   args=[
                                        Call(
                                             func=Name(id='input', ctx=Load()),
                                             args=[],
                                             keywords=[])],
                                   keywords=[]))],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=BinOp(
                    left=Name(id='new_temp0', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp1', ctx=Load()))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp2', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = eval(input())
new_temp1 = eval(input())
new_temp2 = new_temp0 + new_temp1
print(new_temp2)
eval(input())
eval(input())
inject_big(add(project_big(explicate_3),project_big(explicate_4)))
inject_int(explicate_5+explicate_6)

new_temp0 = eval(input())
new_temp1 = eval(input())
explicate_3 = new_temp0
explicate_4 = new_temp1
if(is_big(explicate_3)):
	if(is_big(explicate_4)):
		new_temp2 = inject_big(add(project_big(explicate_3),project_big(explicate_4)))
else:
	if(is_big(explicate_4)):
		error_pyobj(0)
	else:
		if(is_int(explicate_3)):
			explicate_5 = project_int(explicate_3)
		else:
			explicate_5 = project_bool(explicate_3)
		if(is_int(explicate_4)):
			explicate_6 = project_int(explicate_4)
		else:
			explicate_6 = project_bool(explicate_4)
		new_temp2 = inject_int(explicate_5+explicate_6)
print(new_temp2)
--------------Explicate code-------
new_temp0 = eval(input())
new_temp1 = eval(input())
explicate_3 = new_temp0
explicate_4 = new_temp1
if is_big(explicate_3):
    if is_big(explicate_4):
        new_temp2 = inject_big(add(project_big(explicate_3), project_big(explicate_4)))
elif is_big(explicate_4):
    error_pyobj(0)
else:
    if is_int(explicate_3):
        explicate_5 = project_int(explicate_3)
    else:
        explicate_5 = project_bool(explicate_3)
    if is_int(explicate_4):
        explicate_6 = project_int(explicate_4)
    else:
        explicate_6 = project_bool(explicate_4)
    new_temp2 = inject_int(explicate_5 + explicate_6)
print(new_temp2)


--- explicated flattened python ---
new_temp7 = eval(input())
new_temp0 = new_temp7
new_temp8 = eval(input())
new_temp1 = new_temp8
explicate_3 = new_temp0
explicate_4 = new_temp1
new_temp9 = is_big(explicate_3)
if new_temp9:
    new_temp10 = is_big(explicate_4)
    if new_temp10:
        new_temp11 = project_big(explicate_3)
        new_temp12 = project_big(explicate_4)
        new_temp13 = add(new_temp11, new_temp12)
        new_temp14 = inject_big(new_temp13)
        new_temp2 = new_temp14
else:
    new_temp15 = is_big(explicate_4)
    if new_temp15:
        error_pyobj(0)
    else:
        new_temp16 = is_int(explicate_3)
        if new_temp16:
            new_temp17 = project_int(explicate_3)
            explicate_5 = new_temp17
        else:
            new_temp18 = project_bool(explicate_3)
            explicate_5 = new_temp18
        new_temp19 = is_int(explicate_4)
        if new_temp19:
            new_temp20 = project_int(explicate_4)
            explicate_6 = new_temp20
        else:
            new_temp21 = project_bool(explicate_4)
            explicate_6 = new_temp21
        new_temp22 = explicate_5 + explicate_6
        new_temp23 = inject_int(new_temp22)
        new_temp2 = new_temp23
print(new_temp2)


--- x86 IR ---
call  eval None
movl  eax ,  new_temp7
movl  new_temp7 ,  new_temp0
call  eval None
movl  eax ,  new_temp8
movl  new_temp8 ,  new_temp1
movl  new_temp0 ,  explicate_3
movl  new_temp1 ,  explicate_4
call  is_big explicate_3
movl  eax ,  new_temp9
if1
cmp 0, new_temp9
je else1
then1
call  is_big explicate_4
movl  eax ,  new_temp10
if2
cmp 0, new_temp10
je end if2
then2
call  project_big explicate_3
movl  eax ,  new_temp11
call  project_big explicate_4
movl  eax ,  new_temp12
call  add new_temp11,new_temp12
movl  eax ,  new_temp13
call  inject_big new_temp13
movl  eax ,  new_temp14
movl  new_temp14 ,  new_temp2
end if2
else1
call  is_big explicate_4
movl  eax ,  new_temp15
if2
cmp 0, new_temp15
je else2
then2
call  error_pyobj 0
else2
call  is_int explicate_3
movl  eax ,  new_temp16
if3
cmp 0, new_temp16
je else3
then3
call  project_int explicate_3
movl  eax ,  new_temp17
movl  new_temp17 ,  explicate_5
else3
call  project_bool explicate_3
movl  eax ,  new_temp18
movl  new_temp18 ,  explicate_5
end if3
call  is_int explicate_4
movl  eax ,  new_temp19
if4
cmp 0, new_temp19
je else4
then4
call  project_int explicate_4
movl  eax ,  new_temp20
movl  new_temp20 ,  explicate_6
else4
call  project_bool explicate_4
movl  eax ,  new_temp21
movl  new_temp21 ,  explicate_6
end if4
movl  explicate_5 ,  new_temp22
addl  explicate_6 ,  new_temp22
call  inject_int new_temp22
movl  eax ,  new_temp23
movl  new_temp23 ,  new_temp2
end if2
end if1
call  print new_temp2


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp2': {'new_temp7', 'new_temp9', 'new_temp10', 'new_temp0', 'new_temp8', 'edx', 'explicate_4', 'eax', 'ecx', 'explicate_3', 'new_temp15', 'new_temp1'}, 'eax': {'new_temp0', 'explicate_4', 'explicate_5', 'explicate_3', 'new_temp11', 'new_temp2'}, 'ecx': {'new_temp0', 'explicate_4', 'explicate_5', 'explicate_3', 'new_temp11', 'new_temp2'}, 'edx': {'new_temp0', 'explicate_4', 'explicate_5', 'explicate_3', 'new_temp11', 'new_temp2'}, 'new_temp7': {'new_temp2'}, 'new_temp0': {'new_temp8', 'edx', 'ecx', 'eax', 'new_temp1', 'new_temp2'}, 'new_temp8': {'new_temp0', 'new_temp2'}, 'new_temp1': {'new_temp0', 'explicate_3', 'new_temp2'}, 'explicate_3': {'new_temp9', 'new_temp10', 'edx', 'ecx', 'eax', 'explicate_4', 'new_temp16', 'new_temp15', 'new_temp1', 'new_temp2'}, 'explicate_4': {'new_temp19', 'new_temp9', 'new_temp10', 'edx', 'ecx', 'eax', 'explicate_3', 'explicate_5', 'new_temp16', 'new_temp18', 'new_temp17', 'new_temp15', 'new_temp11', 'new_temp2'}, 'new_temp9': {'explicate_3', 'new_temp2', 'explicate_4'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp10': {'explicate_3', 'new_temp2', 'explicate_4'}, 'new_temp15': {'explicate_4', 'explicate_3', 'new_temp2'}, 'new_temp11': {'edx', 'ecx', 'eax', 'explicate_4', 'new_temp12'}, 'new_temp12': {'new_temp11'}, 'new_temp13': set(), 'new_temp14': set(), 'new_temp16': {'explicate_3', 'explicate_4'}, 'new_temp17': {'explicate_4'}, 'explicate_5': {'new_temp20', 'explicate_6', 'edx', 'explicate_4', 'eax', 'ecx', 'new_temp19', 'new_temp21'}, 'new_temp18': {'explicate_4'}, 'new_temp19': {'explicate_5', 'explicate_4'}, 'new_temp20': {'explicate_5'}, 'explicate_6': {'explicate_5', 'new_temp22'}, 'new_temp21': {'explicate_5'}, 'new_temp22': {'explicate_6'}, 'new_temp23': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'explicate_3': 4, 'new_temp2': 5, 'explicate_4': 6, 'new_temp11': 4, 'new_temp0': 4, 'explicate_5': 4, 'new_temp15': 1, 'new_temp10': 1, 'new_temp9': 1, 'new_temp19': 1, 'new_temp1': 1, 'new_temp16': 1, 'new_temp8': 1, 'new_temp21': 1, 'new_temp17': 1, 'new_temp18': 1, 'new_temp12': 1, 'explicate_6': 1, 'new_temp22': 2, 'new_temp20': 1, 'new_temp7': 1, 'new_temp14': 1, 'new_temp13': 1, 'new_temp23': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'explicate_3': 'edi', 'new_temp2': 'ebx', 'explicate_4': 'esi', 'new_temp11': 'edi', 'new_temp0': 'edi', 'explicate_5': 'edi', 'new_temp15': 'eax', 'new_temp10': 'eax', 'new_temp9': 'eax', 'new_temp19': 'eax', 'new_temp1': 'eax', 'new_temp16': 'eax', 'new_temp8': 'eax', 'new_temp21': 'eax', 'new_temp17': 'eax', 'new_temp18': 'eax', 'new_temp12': 'eax', 'explicate_6': 'eax', 'new_temp22': 'ecx', 'new_temp20': 'eax', 'new_temp7': 'eax', 'new_temp14': 'eax', 'new_temp13': 'eax', 'new_temp23': 'eax'}
new_temp7
new_temp7
new_temp0
new_temp8
new_temp8
new_temp1
new_temp0
explicate_3
new_temp1
explicate_4
explicate_3
new_temp9
new_temp9
explicate_4
new_temp10
new_temp10
explicate_3
new_temp11
explicate_4
new_temp12
new_temp12
new_temp11
new_temp13
new_temp13
new_temp14
new_temp14
new_temp2
explicate_4
new_temp15
new_temp15
explicate_3
new_temp16
new_temp16
explicate_3
new_temp17
new_temp17
explicate_5
explicate_3
new_temp18
new_temp18
explicate_5
explicate_4
new_temp19
new_temp19
explicate_4
new_temp20
new_temp20
explicate_6
explicate_4
new_temp21
new_temp21
explicate_6
explicate_5
new_temp22
explicate_6
new_temp22
new_temp22
new_temp23
new_temp23
new_temp2
new_temp2
