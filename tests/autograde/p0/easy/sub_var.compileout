------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=UnaryOp(
                op=USub(),
                operand=Constant(value=2))),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=Name(id='y', ctx=Load()))],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=UnaryOp(
                op=USub(),
                operand=Constant(value=2))),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=Name(id='y', ctx=Load()))],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = 1
y = -2
print(x + y)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=2))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         BinOp(
                              left=Name(id='x', ctx=Load()),
                              op=Add(),
                              right=Name(id='y', ctx=Load()))],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=2))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='new_temp0', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Name(id='y', ctx=Load()))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp1', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
x = 1
new_temp0 = -2
y = new_temp0
new_temp1 = x + y
print(new_temp1)
<ast.Constant object at 0x7fcf6b94aa40>
inject_int(-2)
<ast.Name object at 0x7fcf6b94b010>
inject_big(add(project_big(explicate_2),project_big(explicate_3)))
inject_int(explicate_4+explicate_5)

x = inject_int(1)
new_temp0 = inject_int(-2)
y = new_temp0
explicate_2 = x
explicate_3 = y
if(is_big(explicate_2)):
	if(is_big(explicate_3)):
		new_temp1 = inject_big(add(project_big(explicate_2),project_big(explicate_3)))
else:
	if(is_big(explicate_3)):
		error_pyobj(0)
	else:
		if(is_int(explicate_2)):
			explicate_4 = project_int(explicate_2)
		else:
			explicate_4 = project_bool(explicate_2)
		if(is_int(explicate_3)):
			explicate_5 = project_int(explicate_3)
		else:
			explicate_5 = project_bool(explicate_3)
		new_temp1 = inject_int(explicate_4+explicate_5)
print(new_temp1)
--------------Explicate code-------
x = inject_int(1)
new_temp0 = inject_int(-2)
y = new_temp0
explicate_2 = x
explicate_3 = y
if is_big(explicate_2):
    if is_big(explicate_3):
        new_temp1 = inject_big(add(project_big(explicate_2), project_big(explicate_3)))
elif is_big(explicate_3):
    error_pyobj(0)
else:
    if is_int(explicate_2):
        explicate_4 = project_int(explicate_2)
    else:
        explicate_4 = project_bool(explicate_2)
    if is_int(explicate_3):
        explicate_5 = project_int(explicate_3)
    else:
        explicate_5 = project_bool(explicate_3)
    new_temp1 = inject_int(explicate_4 + explicate_5)
print(new_temp1)


--- explicated flattened python ---
new_temp6 = inject_int(1)
x = new_temp6
new_temp7 = -2
new_temp8 = inject_int(new_temp7)
new_temp0 = new_temp8
y = new_temp0
explicate_2 = x
explicate_3 = y
new_temp9 = is_big(explicate_2)
if new_temp9:
    new_temp10 = is_big(explicate_3)
    if new_temp10:
        new_temp11 = project_big(explicate_2)
        new_temp12 = project_big(explicate_3)
        new_temp13 = add(new_temp11, new_temp12)
        new_temp14 = inject_big(new_temp13)
        new_temp1 = new_temp14
else:
    new_temp15 = is_big(explicate_3)
    if new_temp15:
        error_pyobj(0)
    else:
        new_temp16 = is_int(explicate_2)
        if new_temp16:
            new_temp17 = project_int(explicate_2)
            explicate_4 = new_temp17
        else:
            new_temp18 = project_bool(explicate_2)
            explicate_4 = new_temp18
        new_temp19 = is_int(explicate_3)
        if new_temp19:
            new_temp20 = project_int(explicate_3)
            explicate_5 = new_temp20
        else:
            new_temp21 = project_bool(explicate_3)
            explicate_5 = new_temp21
        new_temp22 = explicate_4 + explicate_5
        new_temp23 = inject_int(new_temp22)
        new_temp1 = new_temp23
print(new_temp1)


--- x86 IR ---
call  inject_int 1
movl  eax ,  new_temp6
movl  new_temp6 ,  x
movl  2 ,  new_temp7
negl  new_temp7
call  inject_int new_temp7
movl  eax ,  new_temp8
movl  new_temp8 ,  new_temp0
movl  new_temp0 ,  y
movl  x ,  explicate_2
movl  y ,  explicate_3
call  is_big explicate_2
movl  eax ,  new_temp9
if1
cmp 0, new_temp9
je else1
then1
call  is_big explicate_3
movl  eax ,  new_temp10
if2
cmp 0, new_temp10
je end if2
then2
call  project_big explicate_2
movl  eax ,  new_temp11
call  project_big explicate_3
movl  eax ,  new_temp12
call  add new_temp11,new_temp12
movl  eax ,  new_temp13
call  inject_big new_temp13
movl  eax ,  new_temp14
movl  new_temp14 ,  new_temp1
end if2
else1
call  is_big explicate_3
movl  eax ,  new_temp15
if2
cmp 0, new_temp15
je else2
then2
call  error_pyobj 0
else2
call  is_int explicate_2
movl  eax ,  new_temp16
if3
cmp 0, new_temp16
je else3
then3
call  project_int explicate_2
movl  eax ,  new_temp17
movl  new_temp17 ,  explicate_4
else3
call  project_bool explicate_2
movl  eax ,  new_temp18
movl  new_temp18 ,  explicate_4
end if3
call  is_int explicate_3
movl  eax ,  new_temp19
if4
cmp 0, new_temp19
je else4
then4
call  project_int explicate_3
movl  eax ,  new_temp20
movl  new_temp20 ,  explicate_5
else4
call  project_bool explicate_3
movl  eax ,  new_temp21
movl  new_temp21 ,  explicate_5
end if4
movl  explicate_4 ,  new_temp22
addl  explicate_5 ,  new_temp22
call  inject_int new_temp22
movl  eax ,  new_temp23
movl  new_temp23 ,  new_temp1
end if2
end if1
call  print new_temp1


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp1': {'y', 'new_temp0', 'ecx', 'new_temp10', 'new_temp8', 'new_temp6', 'new_temp7', 'new_temp9', 'edx', 'explicate_3', 'new_temp15', 'eax', 'x', 'explicate_2'}, 'eax': {'new_temp1', 'x', 'explicate_3', 'explicate_4', 'new_temp11', 'explicate_2'}, 'ecx': {'new_temp1', 'x', 'explicate_3', 'explicate_4', 'new_temp11', 'explicate_2'}, 'edx': {'new_temp1', 'x', 'explicate_3', 'explicate_4', 'new_temp11', 'explicate_2'}, 'new_temp6': {'new_temp1'}, 'x': {'y', 'new_temp0', 'ecx', 'new_temp1', 'edx', 'eax', 'new_temp8', 'new_temp7'}, 'new_temp7': {'x', 'new_temp1'}, 'new_temp8': {'x', 'new_temp1'}, 'new_temp0': {'x', 'new_temp1'}, 'y': {'x', 'explicate_2', 'new_temp1'}, 'explicate_2': {'y', 'new_temp10', 'ecx', 'new_temp1', 'new_temp9', 'edx', 'explicate_3', 'new_temp16', 'eax', 'new_temp15'}, 'explicate_3': {'new_temp10', 'ecx', 'new_temp17', 'new_temp18', 'new_temp19', 'new_temp1', 'new_temp9', 'edx', 'new_temp15', 'new_temp16', 'explicate_4', 'eax', 'new_temp11', 'explicate_2'}, 'new_temp9': {'explicate_3', 'explicate_2', 'new_temp1'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp10': {'new_temp1', 'explicate_2', 'explicate_3'}, 'new_temp15': {'explicate_3', 'explicate_2', 'new_temp1'}, 'new_temp11': {'ecx', 'new_temp12', 'edx', 'explicate_3', 'eax'}, 'new_temp12': {'new_temp11'}, 'new_temp13': set(), 'new_temp14': set(), 'new_temp16': {'explicate_2', 'explicate_3'}, 'new_temp17': {'explicate_3'}, 'explicate_4': {'ecx', 'new_temp21', 'new_temp19', 'edx', 'explicate_3', 'eax', 'explicate_5', 'new_temp20'}, 'new_temp18': {'explicate_3'}, 'new_temp19': {'explicate_4', 'explicate_3'}, 'new_temp20': {'explicate_4'}, 'explicate_5': {'explicate_4', 'new_temp22'}, 'new_temp21': {'explicate_4'}, 'new_temp22': {'explicate_5'}, 'new_temp23': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'x': 4, 'new_temp1': 5, 'explicate_2': 4, 'explicate_3': 6, 'explicate_4': 4, 'new_temp11': 4, 'new_temp15': 1, 'new_temp10': 1, 'new_temp9': 1, 'new_temp16': 1, 'new_temp7': 1, 'new_temp0': 1, 'new_temp19': 1, 'new_temp8': 1, 'y': 1, 'explicate_5': 1, 'new_temp20': 1, 'new_temp22': 2, 'new_temp12': 1, 'new_temp6': 1, 'new_temp21': 1, 'new_temp17': 1, 'new_temp18': 1, 'new_temp14': 1, 'new_temp23': 1, 'new_temp13': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'x': 'edi', 'new_temp1': 'ebx', 'explicate_2': 'edi', 'explicate_3': 'esi', 'explicate_4': 'edi', 'new_temp11': 'edi', 'new_temp15': 'eax', 'new_temp10': 'eax', 'new_temp9': 'eax', 'new_temp16': 'eax', 'new_temp7': 'eax', 'new_temp0': 'eax', 'new_temp19': 'eax', 'new_temp8': 'eax', 'y': 'eax', 'explicate_5': 'eax', 'new_temp20': 'eax', 'new_temp22': 'ecx', 'new_temp12': 'eax', 'new_temp6': 'eax', 'new_temp21': 'eax', 'new_temp17': 'eax', 'new_temp18': 'eax', 'new_temp14': 'eax', 'new_temp23': 'eax', 'new_temp13': 'eax'}
new_temp6
new_temp6
x
new_temp7
new_temp7
new_temp7
new_temp8
new_temp8
new_temp0
new_temp0
y
x
explicate_2
y
explicate_3
explicate_2
new_temp9
new_temp9
explicate_3
new_temp10
new_temp10
explicate_2
new_temp11
explicate_3
new_temp12
new_temp12
new_temp11
new_temp13
new_temp13
new_temp14
new_temp14
new_temp1
explicate_3
new_temp15
new_temp15
explicate_2
new_temp16
new_temp16
explicate_2
new_temp17
new_temp17
explicate_4
explicate_2
new_temp18
new_temp18
explicate_4
explicate_3
new_temp19
new_temp19
explicate_3
new_temp20
new_temp20
explicate_5
explicate_3
new_temp21
new_temp21
explicate_5
explicate_4
new_temp22
explicate_5
new_temp22
new_temp22
new_temp23
new_temp23
new_temp1
new_temp1
