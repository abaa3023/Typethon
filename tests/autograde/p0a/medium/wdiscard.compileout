Syntax error at 'x'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=10)),
        While(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=0)])],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=UnaryOp(
                            op=USub(),
                            operand=Constant(value=1)))),
                Expr(
                    value=Call(
                        func=Name(id='eval', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='input', ctx=Load()),
                                args=[],
                                keywords=[])],
                        keywords=[]))],
            orelse=[])],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        BinOp(
            left=Name(id='x', ctx=Load()),
            op=Add(),
            right=UnaryOp(
                op=USub(),
                operand=Constant(value=1))),
        Call(
            func=Name(id='eval', ctx=Load()),
            args=[
                Call(
                    func=Name(id='input', ctx=Load()),
                    args=[],
                    keywords=[])],
            keywords=[])],
    type_ignores=[])
--------------Original code----------------
x = 10
while (int(x != 0)):
    x = x + -1
    eval(input())
Module(
     body=[
          BinOp(
               left=Name(id='x', ctx=Load()),
               op=Add(),
               right=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))),
          Call(
               func=Name(id='eval', ctx=Load()),
               args=[
                    Call(
                         func=Name(id='input', ctx=Load()),
                         args=[],
                         keywords=[])],
               keywords=[])],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1)))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = -1
inject_int(-1)

new_temp0 = inject_int(-1)
--------------Explicate code-------
new_temp0 = inject_int(-1)


--- explicated flattened python ---
new_temp1 = -1
new_temp2 = inject_int(new_temp1)
new_temp0 = new_temp2


--- x86 IR ---
movl  1 ,  new_temp1
negl  new_temp1
call  inject_int new_temp1
movl  eax ,  new_temp2
movl  new_temp2 ,  new_temp0


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp1': set(), 'new_temp2': set(), 'new_temp0': set(), 'eax': set(), 'ecx': set(), 'edx': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp0': 1, 'new_temp1': 1, 'new_temp2': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp0': 'eax', 'new_temp1': 'eax', 'new_temp2': 'eax'}
new_temp1
new_temp1
new_temp1
new_temp2
new_temp2
new_temp0
