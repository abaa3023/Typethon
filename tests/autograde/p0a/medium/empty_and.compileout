--------------Original code----------------
print(1 and 5)
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         BoolOp(
                              op=And(),
                              values=[
                                   Constant(value=1),
                                   Constant(value=5)])],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          If(
               test=Constant(value=1),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Constant(value=5))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Constant(value=1))]),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp1', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
if 1:
    new_temp0 = 5
else:
    new_temp0 = 1
new_temp1 = new_temp0
print(new_temp1)
<ast.Constant object at 0x7f2834bc0ac0>
<ast.Constant object at 0x7f2834bc0130>
<ast.Name object at 0x7f2834bc11e0>

if(1):

	new_temp0 = inject_int(5)
else:

	new_temp0 = inject_int(1)
new_temp1 = new_temp0
print(new_temp1)
--------------Explicate code-------
if 1:
    new_temp0 = inject_int(5)
else:
    new_temp0 = inject_int(1)
new_temp1 = new_temp0
print(new_temp1)


--- explicated flattened python ---
if 1:
    new_temp2 = inject_int(5)
    new_temp0 = new_temp2
else:
    new_temp3 = inject_int(1)
    new_temp0 = new_temp3
new_temp1 = new_temp0
print(new_temp1)


--- x86 IR ---
if1
cmp 0, 1
je else1
then1
call  inject_int 5
movl  eax ,  new_temp2
movl  new_temp2 ,  new_temp0
else1
call  inject_int 1
movl  eax ,  new_temp3
movl  new_temp3 ,  new_temp0
end if1
movl  new_temp0 ,  new_temp1
call  print new_temp1


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'eax': set(), 'ecx': set(), 'edx': set(), 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp2': set(), 'new_temp0': set(), 'new_temp3': set(), 'new_temp1': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp0': 1, 'new_temp3': 1, 'new_temp1': 1, 'new_temp2': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 {'unspillable_0'}
continue_looping
 True


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'unspillable_0': set(), 'eax': set(), 'ecx': set(), 'edx': set(), 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp2': set(), 'new_temp0': set(), 'new_temp3': set(), 'new_temp1': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'unspillable_0': 1, 'new_temp3': 1, 'new_temp0': 1, 'new_temp1': 1, 'new_temp2': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 {'unspillable_0'}
continue_looping
 False



Homes for CFG0:  {'unspillable_0': 'eax', 'new_temp3': 'eax', 'new_temp0': 'eax', 'new_temp1': 'eax', 'new_temp2': 'eax'}
unspillable_0
unspillable_0
new_temp2
new_temp2
new_temp0
new_temp3
new_temp3
new_temp0
new_temp0
new_temp1
new_temp1
