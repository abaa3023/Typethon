------------------CORRECT TREE--------------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='int', ctx=Load()),
                        args=[
                            Compare(
                                left=BoolOp(
                                    op=And(),
                                    values=[
                                        Constant(value=1),
                                        Constant(value=2)]),
                                ops=[
                                    Eq()],
                                comparators=[
                                    BoolOp(
                                        op=And(),
                                        values=[
                                            Constant(value=3),
                                            Constant(value=5)])])],
                        keywords=[])],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='int', ctx=Load()),
                        args=[
                            Compare(
                                left=BoolOp(
                                    op=And(),
                                    values=[
                                        Constant(value=1),
                                        Constant(value=2)]),
                                ops=[
                                    Eq()],
                                comparators=[
                                    BoolOp(
                                        op=And(),
                                        values=[
                                            Constant(value=3),
                                            Constant(value=5)])])],
                        keywords=[])],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
print(int((1 and 2) == (3 and 5)))

Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='int', ctx=Load()),
                              args=[
                                   Compare(
                                        left=BoolOp(
                                             op=And(),
                                             values=[
                                                  Constant(value=1),
                                                  Constant(value=2)]),
                                        ops=[
                                             Eq()],
                                        comparators=[
                                             BoolOp(
                                                  op=And(),
                                                  values=[
                                                       Constant(value=3),
                                                       Constant(value=5)])])],
                              keywords=[])],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          If(
               test=Constant(value=1),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Constant(value=2))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Constant(value=1))]),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          If(
               test=Constant(value=3),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Constant(value=5))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Constant(value=3))]),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=Name(id='new_temp2', ctx=Store())),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=Compare(
                    left=Name(id='new_temp1', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Name(id='new_temp3', ctx=Load())])),
          Assign(
               targets=[
                    Name(id='new_temp5', ctx=Store())],
               value=Name(id='new_temp4', ctx=Store())),
          Assign(
               targets=[
                    Name(id='new_temp6', ctx=Store())],
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp5', ctx=Load())],
                    keywords=[])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp6', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
if 1:
    new_temp0 = 2
else:
    new_temp0 = 1
new_temp1 = new_temp0
if 3:
    new_temp2 = 5
else:
    new_temp2 = 3
new_temp3 = new_temp2
new_temp4 = new_temp1 == new_temp3
new_temp5 = new_temp4
new_temp6 = int(new_temp5)
print(new_temp6)
<ast.Constant object at 0x7fed6c2ee440>
<ast.Constant object at 0x7fed6c2ed030>
<ast.Name object at 0x7fed6c2eef20>
<ast.Constant object at 0x7fed6c2ee410>
<ast.Constant object at 0x7fed6c2ee470>
<ast.Name object at 0x7fed6c2ef1c0>
inject_bool(equal(project_big(explicate_7),project_big(explicate_8)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_9==explicate_10)
<ast.Name object at 0x7fed6c2ef040>
inject_int(project_bool(explicate_11))

if(1):

	new_temp0 = inject_int(2)
else:

	new_temp0 = inject_int(1)
new_temp1 = new_temp0
if(3):

	new_temp2 = inject_int(5)
else:

	new_temp2 = inject_int(3)
new_temp3 = new_temp2
explicate_7 = new_temp1
explicate_8 = new_temp3
if(is_big(explicate_7)):
	if(is_big(explicate_8)):
		new_temp4 = inject_bool(equal(project_big(explicate_7),project_big(explicate_8)))
	else:
		new_temp4 = inject_bool(0)
else:
	if(is_big(explicate_8)):
		new_temp4 = inject_bool(0)
	else:
		if(is_int(explicate_7)):
			explicate_9 = project_int(explicate_7)
		else:
			explicate_9 = project_bool(explicate_7)
		if(is_int(explicate_8)):
			explicate_10 = project_int(explicate_8)
		else:
			explicate_10 = project_bool(explicate_8)
		new_temp4 = inject_bool(explicate_9==explicate_10)
new_temp5 = new_temp4
explicate_11 = new_temp5
if(is_bool(explicate_11)):
	new_temp6 = inject_int(project_bool(explicate_11))
print(new_temp6)
--------------Explicate code-------
if 1:
    new_temp0 = inject_int(2)
else:
    new_temp0 = inject_int(1)
new_temp1 = new_temp0
if 3:
    new_temp2 = inject_int(5)
else:
    new_temp2 = inject_int(3)
new_temp3 = new_temp2
explicate_7 = new_temp1
explicate_8 = new_temp3
if is_big(explicate_7):
    if is_big(explicate_8):
        new_temp4 = inject_bool(equal(project_big(explicate_7), project_big(explicate_8)))
    else:
        new_temp4 = inject_bool(0)
elif is_big(explicate_8):
    new_temp4 = inject_bool(0)
else:
    if is_int(explicate_7):
        explicate_9 = project_int(explicate_7)
    else:
        explicate_9 = project_bool(explicate_7)
    if is_int(explicate_8):
        explicate_10 = project_int(explicate_8)
    else:
        explicate_10 = project_bool(explicate_8)
    new_temp4 = inject_bool(explicate_9 == explicate_10)
new_temp5 = new_temp4
explicate_11 = new_temp5
if is_bool(explicate_11):
    new_temp6 = inject_int(project_bool(explicate_11))
print(new_temp6)


--- explicated flattened python ---
if 1:
    new_temp12 = inject_int(2)
    new_temp0 = new_temp12
else:
    new_temp13 = inject_int(1)
    new_temp0 = new_temp13
new_temp1 = new_temp0
if 3:
    new_temp14 = inject_int(5)
    new_temp2 = new_temp14
else:
    new_temp15 = inject_int(3)
    new_temp2 = new_temp15
new_temp3 = new_temp2
explicate_7 = new_temp1
explicate_8 = new_temp3
new_temp16 = is_big(explicate_7)
if new_temp16:
    new_temp17 = is_big(explicate_8)
    if new_temp17:
        new_temp18 = project_big(explicate_7)
        new_temp19 = project_big(explicate_8)
        new_temp20 = equal(new_temp18, new_temp19)
        new_temp21 = inject_bool(new_temp20)
        new_temp4 = new_temp21
    else:
        new_temp22 = inject_bool(0)
        new_temp4 = new_temp22
else:
    new_temp23 = is_big(explicate_8)
    if new_temp23:
        new_temp24 = inject_bool(0)
        new_temp4 = new_temp24
    else:
        new_temp25 = is_int(explicate_7)
        if new_temp25:
            new_temp26 = project_int(explicate_7)
            explicate_9 = new_temp26
        else:
            new_temp27 = project_bool(explicate_7)
            explicate_9 = new_temp27
        new_temp28 = is_int(explicate_8)
        if new_temp28:
            new_temp29 = project_int(explicate_8)
            explicate_10 = new_temp29
        else:
            new_temp30 = project_bool(explicate_8)
            explicate_10 = new_temp30
        new_temp31 = explicate_9 == explicate_10
        new_temp32 = new_temp31
        new_temp33 = inject_bool(new_temp32)
        new_temp4 = new_temp33
new_temp5 = new_temp4
explicate_11 = new_temp5
new_temp34 = is_bool(explicate_11)
if new_temp34:
    new_temp35 = project_bool(explicate_11)
    new_temp36 = inject_int(new_temp35)
    new_temp6 = new_temp36
print(new_temp6)


--- x86 IR ---
if1
cmp 0, 1
je else1
then1
call  inject_int 2
movl  eax ,  new_temp12
movl  new_temp12 ,  new_temp0
else1
call  inject_int 1
movl  eax ,  new_temp13
movl  new_temp13 ,  new_temp0
end if1
movl  new_temp0 ,  new_temp1
if2
cmp 0, 3
je else2
then2
call  inject_int 5
movl  eax ,  new_temp14
movl  new_temp14 ,  new_temp2
else2
call  inject_int 3
movl  eax ,  new_temp15
movl  new_temp15 ,  new_temp2
end if2
movl  new_temp2 ,  new_temp3
movl  new_temp1 ,  explicate_7
movl  new_temp3 ,  explicate_8
call  is_big explicate_7
movl  eax ,  new_temp16
if3
cmp 0, new_temp16
je else3
then3
call  is_big explicate_8
movl  eax ,  new_temp17
if4
cmp 0, new_temp17
je else4
then4
call  project_big explicate_7
movl  eax ,  new_temp18
call  project_big explicate_8
movl  eax ,  new_temp19
call  equal new_temp18,new_temp19
movl  eax ,  new_temp20
call  inject_bool new_temp20
movl  eax ,  new_temp21
movl  new_temp21 ,  new_temp4
else4
call  inject_bool 0
movl  eax ,  new_temp22
movl  new_temp22 ,  new_temp4
end if4
else3
call  is_big explicate_8
movl  eax ,  new_temp23
if4
cmp 0, new_temp23
je else4
then4
call  inject_bool 0
movl  eax ,  new_temp24
movl  new_temp24 ,  new_temp4
else4
call  is_int explicate_7
movl  eax ,  new_temp25
if5
cmp 0, new_temp25
je else5
then5
call  project_int explicate_7
movl  eax ,  new_temp26
movl  new_temp26 ,  explicate_9
else5
call  project_bool explicate_7
movl  eax ,  new_temp27
movl  new_temp27 ,  explicate_9
end if5
call  is_int explicate_8
movl  eax ,  new_temp28
if6
cmp 0, new_temp28
je else6
then6
call  project_int explicate_8
movl  eax ,  new_temp29
movl  new_temp29 ,  explicate_10
else6
call  project_bool explicate_8
movl  eax ,  new_temp30
movl  new_temp30 ,  explicate_10
end if6
int_compare  explicate_9 Eq explicate_10 ,  new_temp31
movl  new_temp31 ,  new_temp32
call  inject_bool new_temp32
movl  eax ,  new_temp33
movl  new_temp33 ,  new_temp4
end if4
end if3
movl  new_temp4 ,  new_temp5
movl  new_temp5 ,  explicate_11
call  is_bool explicate_11
movl  eax ,  new_temp34
if4
cmp 0, new_temp34
je end if4
then4
call  project_bool explicate_11
movl  eax ,  new_temp35
call  inject_int new_temp35
movl  eax ,  new_temp36
movl  new_temp36 ,  new_temp6
end if4
call  print new_temp6


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'eax': {'explicate_7', 'explicate_9', 'new_temp31', 'new_temp1', 'new_temp6', 'explicate_11', 'explicate_8', 'new_temp18'}, 'ecx': {'explicate_7', 'explicate_9', 'new_temp1', 'new_temp6', 'explicate_11', 'explicate_8', 'new_temp18'}, 'edx': {'explicate_7', 'explicate_9', 'new_temp1', 'new_temp6', 'explicate_11', 'explicate_8', 'new_temp18'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp6': {'new_temp23', 'new_temp31', 'new_temp12', 'new_temp16', 'new_temp26', 'new_temp25', 'new_temp32', 'new_temp0', 'new_temp19', 'new_temp30', 'new_temp2', 'new_temp5', 'new_temp28', 'new_temp17', 'new_temp4', 'new_temp20', 'edx', 'new_temp21', 'new_temp34', 'ecx', 'new_temp22', 'eax', 'explicate_11', 'new_temp18', 'new_temp24', 'new_temp14', 'explicate_7', 'explicate_9', 'new_temp29', 'new_temp13', 'new_temp1', 'new_temp33', 'new_temp3', 'new_temp15', 'new_temp27', 'explicate_8', 'explicate_10'}, 'new_temp12': {'new_temp6'}, 'new_temp0': {'new_temp6'}, 'new_temp13': {'new_temp6'}, 'new_temp1': {'new_temp2', 'edx', 'new_temp3', 'new_temp15', 'new_temp6', 'ecx', 'eax', 'new_temp14'}, 'new_temp14': {'new_temp6', 'new_temp1'}, 'new_temp2': {'new_temp6', 'new_temp1'}, 'new_temp15': {'new_temp6', 'new_temp1'}, 'new_temp3': {'explicate_7', 'new_temp6', 'new_temp1'}, 'explicate_7': {'new_temp23', 'new_temp17', 'new_temp16', 'edx', 'new_temp3', 'new_temp25', 'new_temp6', 'ecx', 'eax', 'explicate_8'}, 'explicate_8': {'explicate_7', 'new_temp23', 'new_temp17', 'explicate_9', 'new_temp28', 'new_temp16', 'new_temp26', 'edx', 'new_temp25', 'new_temp6', 'ecx', 'eax', 'new_temp27', 'new_temp18'}, 'new_temp16': {'explicate_7', 'new_temp6', 'explicate_8'}, 'new_temp17': {'explicate_7', 'new_temp6', 'explicate_8'}, 'new_temp23': {'explicate_7', 'new_temp6', 'explicate_8'}, 'new_temp18': {'new_temp6', 'ecx', 'eax', 'explicate_8', 'new_temp19', 'edx'}, 'new_temp19': {'new_temp6', 'new_temp18'}, 'new_temp20': {'new_temp6'}, 'new_temp21': {'new_temp6'}, 'new_temp4': {'new_temp6'}, 'new_temp22': {'new_temp6'}, 'new_temp24': {'new_temp6'}, 'new_temp25': {'explicate_7', 'new_temp6', 'explicate_8'}, 'new_temp5': {'new_temp6'}, 'explicate_11': {'edx', 'new_temp34', 'new_temp6', 'ecx', 'eax'}, 'new_temp34': {'explicate_11', 'new_temp6'}, 'new_temp26': {'new_temp6', 'explicate_8'}, 'explicate_9': {'new_temp28', 'new_temp29', 'edx', 'new_temp6', 'ecx', 'eax', 'explicate_8', 'new_temp30', 'explicate_10'}, 'new_temp27': {'new_temp6', 'explicate_8'}, 'new_temp35': set(), 'new_temp36': set(), 'new_temp28': {'explicate_9', 'new_temp6', 'explicate_8'}, 'new_temp29': {'explicate_9', 'new_temp6'}, 'explicate_10': {'explicate_9', 'new_temp6'}, 'new_temp30': {'explicate_9', 'new_temp6'}, 'new_temp31': {'new_temp6', 'eax'}, 'new_temp32': {'new_temp6'}, 'new_temp33': {'new_temp6'}}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'explicate_8': 4, 'explicate_9': 5, 'new_temp6': 6, 'explicate_7': 5, 'new_temp18': 5, 'new_temp1': 4, 'explicate_11': 4, 'new_temp3': 1, 'new_temp25': 1, 'new_temp16': 1, 'new_temp17': 1, 'new_temp28': 1, 'new_temp23': 1, 'explicate_10': 1, 'new_temp27': 1, 'new_temp15': 1, 'new_temp2': 1, 'new_temp29': 1, 'new_temp14': 1, 'new_temp30': 1, 'new_temp19': 1, 'new_temp34': 1, 'new_temp26': 1, 'new_temp31': 2, 'new_temp5': 1, 'new_temp24': 1, 'new_temp0': 1, 'new_temp22': 1, 'new_temp32': 1, 'new_temp33': 1, 'new_temp21': 1, 'new_temp20': 1, 'new_temp4': 1, 'new_temp13': 1, 'new_temp12': 1, 'new_temp36': 1, 'new_temp35': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 {'unspillable_0', 'unspillable_1'}
continue_looping
 True


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp6': {'new_temp23', 'new_temp31', 'new_temp12', 'new_temp16', 'new_temp26', 'new_temp25', 'new_temp32', 'unspillable_1', 'new_temp0', 'new_temp19', 'new_temp30', 'new_temp2', 'new_temp5', 'unspillable_0', 'new_temp17', 'new_temp28', 'new_temp4', 'new_temp20', 'edx', 'new_temp21', 'new_temp34', 'ecx', 'new_temp22', 'eax', 'explicate_11', 'new_temp18', 'new_temp24', 'new_temp14', 'explicate_7', 'explicate_9', 'new_temp29', 'new_temp13', 'new_temp1', 'new_temp33', 'new_temp3', 'new_temp15', 'new_temp27', 'explicate_8', 'explicate_10'}, 'unspillable_0': {'new_temp6'}, 'eax': {'explicate_7', 'explicate_9', 'new_temp31', 'new_temp1', 'new_temp6', 'explicate_11', 'explicate_8', 'new_temp18'}, 'ecx': {'explicate_7', 'explicate_9', 'new_temp1', 'new_temp6', 'explicate_11', 'explicate_8', 'new_temp18'}, 'edx': {'explicate_7', 'explicate_9', 'new_temp1', 'new_temp6', 'explicate_11', 'explicate_8', 'new_temp18'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp12': {'new_temp6'}, 'new_temp0': {'new_temp6'}, 'new_temp13': {'new_temp6'}, 'new_temp1': {'new_temp2', 'edx', 'new_temp3', 'new_temp15', 'new_temp6', 'unspillable_1', 'ecx', 'eax', 'new_temp14'}, 'unspillable_1': {'new_temp6', 'new_temp1'}, 'new_temp14': {'new_temp6', 'new_temp1'}, 'new_temp2': {'new_temp6', 'new_temp1'}, 'new_temp15': {'new_temp6', 'new_temp1'}, 'new_temp3': {'explicate_7', 'new_temp6', 'new_temp1'}, 'explicate_7': {'new_temp23', 'new_temp17', 'new_temp16', 'edx', 'new_temp3', 'new_temp25', 'new_temp6', 'ecx', 'eax', 'explicate_8'}, 'explicate_8': {'explicate_7', 'new_temp23', 'new_temp17', 'explicate_9', 'new_temp28', 'new_temp16', 'new_temp26', 'edx', 'new_temp25', 'new_temp6', 'ecx', 'eax', 'new_temp27', 'new_temp18'}, 'new_temp16': {'explicate_7', 'new_temp6', 'explicate_8'}, 'new_temp17': {'explicate_7', 'new_temp6', 'explicate_8'}, 'new_temp23': {'explicate_7', 'new_temp6', 'explicate_8'}, 'new_temp18': {'new_temp6', 'ecx', 'eax', 'explicate_8', 'new_temp19', 'edx'}, 'new_temp19': {'new_temp6', 'new_temp18'}, 'new_temp20': {'new_temp6'}, 'new_temp21': {'new_temp6'}, 'new_temp4': {'new_temp6'}, 'new_temp22': {'new_temp6'}, 'new_temp24': {'new_temp6'}, 'new_temp25': {'explicate_7', 'new_temp6', 'explicate_8'}, 'new_temp5': {'new_temp6'}, 'explicate_11': {'edx', 'new_temp34', 'new_temp6', 'ecx', 'eax'}, 'new_temp34': {'explicate_11', 'new_temp6'}, 'new_temp26': {'new_temp6', 'explicate_8'}, 'explicate_9': {'new_temp28', 'new_temp29', 'edx', 'new_temp6', 'ecx', 'eax', 'explicate_8', 'new_temp30', 'explicate_10'}, 'new_temp27': {'new_temp6', 'explicate_8'}, 'new_temp35': set(), 'new_temp36': set(), 'new_temp28': {'explicate_9', 'new_temp6', 'explicate_8'}, 'new_temp29': {'explicate_9', 'new_temp6'}, 'explicate_10': {'explicate_9', 'new_temp6'}, 'new_temp30': {'explicate_9', 'new_temp6'}, 'new_temp31': {'new_temp6', 'eax'}, 'new_temp32': {'new_temp6'}, 'new_temp33': {'new_temp6'}}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'unspillable_1': 1, 'unspillable_0': 1, 'explicate_8': 4, 'explicate_9': 5, 'new_temp6': 6, 'explicate_7': 5, 'new_temp18': 5, 'new_temp1': 4, 'explicate_11': 4, 'new_temp3': 1, 'new_temp25': 1, 'new_temp16': 1, 'new_temp17': 1, 'new_temp28': 1, 'new_temp23': 1, 'explicate_10': 1, 'new_temp27': 1, 'new_temp15': 1, 'new_temp2': 1, 'new_temp29': 1, 'new_temp14': 1, 'new_temp30': 1, 'new_temp19': 1, 'new_temp34': 1, 'new_temp26': 1, 'new_temp31': 2, 'new_temp5': 1, 'new_temp24': 1, 'new_temp0': 1, 'new_temp22': 1, 'new_temp32': 1, 'new_temp33': 1, 'new_temp21': 1, 'new_temp20': 1, 'new_temp4': 1, 'new_temp13': 1, 'new_temp12': 1, 'new_temp36': 1, 'new_temp35': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 {'unspillable_0', 'unspillable_1'}
continue_looping
 False



Homes for CFG0:  {'unspillable_1': 'eax', 'unspillable_0': 'eax', 'explicate_8': 'edi', 'explicate_9': 'ebx', 'new_temp6': 'esi', 'explicate_7': 'ebx', 'new_temp18': 'ebx', 'new_temp1': 'edi', 'explicate_11': 'edi', 'new_temp3': 'eax', 'new_temp25': 'eax', 'new_temp16': 'eax', 'new_temp17': 'eax', 'new_temp28': 'eax', 'new_temp23': 'eax', 'explicate_10': 'eax', 'new_temp27': 'eax', 'new_temp15': 'eax', 'new_temp2': 'eax', 'new_temp29': 'eax', 'new_temp14': 'eax', 'new_temp30': 'eax', 'new_temp19': 'eax', 'new_temp34': 'eax', 'new_temp26': 'eax', 'new_temp31': 'ecx', 'new_temp5': 'eax', 'new_temp24': 'eax', 'new_temp0': 'eax', 'new_temp22': 'eax', 'new_temp32': 'eax', 'new_temp33': 'eax', 'new_temp21': 'eax', 'new_temp20': 'eax', 'new_temp4': 'eax', 'new_temp13': 'eax', 'new_temp12': 'eax', 'new_temp36': 'eax', 'new_temp35': 'eax'}
unspillable_0
unspillable_0
new_temp12
new_temp12
new_temp0
new_temp13
new_temp13
new_temp0
new_temp0
new_temp1
unspillable_1
unspillable_1
new_temp14
new_temp14
new_temp2
new_temp15
new_temp15
new_temp2
new_temp2
new_temp3
new_temp1
explicate_7
new_temp3
explicate_8
explicate_7
new_temp16
new_temp16
explicate_8
new_temp17
new_temp17
explicate_7
new_temp18
explicate_8
new_temp19
new_temp19
new_temp18
new_temp20
new_temp20
new_temp21
new_temp21
new_temp4
new_temp22
new_temp22
new_temp4
explicate_8
new_temp23
new_temp23
new_temp24
new_temp24
new_temp4
explicate_7
new_temp25
new_temp25
explicate_7
new_temp26
new_temp26
explicate_9
explicate_7
new_temp27
new_temp27
explicate_9
explicate_8
new_temp28
new_temp28
explicate_8
new_temp29
new_temp29
explicate_10
explicate_8
new_temp30
new_temp30
explicate_10
explicate_9
explicate_10
new_temp31
new_temp31
new_temp31
new_temp31
new_temp31
new_temp31
new_temp32
new_temp32
new_temp33
new_temp33
new_temp4
new_temp4
new_temp5
new_temp5
explicate_11
explicate_11
new_temp34
new_temp34
explicate_11
new_temp35
new_temp35
new_temp36
new_temp36
new_temp6
new_temp6
