------------------CORRECT TREE--------------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=Call(
                            func=Name(id='int', ctx=Load()),
                            args=[
                                UnaryOp(
                                    op=Not(),
                                    operand=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            UnaryOp(
                                                op=Not(),
                                                operand=Constant(value=0))],
                                        keywords=[]))],
                            keywords=[]),
                        op=Add(),
                        right=Constant(value=1))],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=Call(
                            func=Name(id='int', ctx=Load()),
                            args=[
                                UnaryOp(
                                    op=Not(),
                                    operand=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            UnaryOp(
                                                op=Not(),
                                                operand=Constant(value=0))],
                                        keywords=[]))],
                            keywords=[]),
                        op=Add(),
                        right=Constant(value=1))],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
print(int(not int(not 0)) + 1)

Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         BinOp(
                              left=Call(
                                   func=Name(id='int', ctx=Load()),
                                   args=[
                                        UnaryOp(
                                             op=Not(),
                                             operand=Call(
                                                  func=Name(id='int', ctx=Load()),
                                                  args=[
                                                       UnaryOp(
                                                            op=Not(),
                                                            operand=Constant(value=0))],
                                                  keywords=[]))],
                                   keywords=[]),
                              op=Add(),
                              right=Constant(value=1))],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          If(
               test=Constant(value=0),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Constant(value=False))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Constant(value=True))]),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp0', ctx=Load())],
                    keywords=[])),
          If(
               test=Name(id='new_temp1', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Constant(value=False))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Constant(value=True))]),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp2', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=BinOp(
                    left=Name(id='new_temp3', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp4', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
if 0:
    new_temp0 = False
else:
    new_temp0 = True
new_temp1 = int(new_temp0)
if new_temp1:
    new_temp2 = False
else:
    new_temp2 = True
new_temp3 = int(new_temp2)
new_temp4 = new_temp3 + 1
print(new_temp4)
<ast.Constant object at 0x7fb6607c3370>
<ast.Constant object at 0x7fb6607c34f0>
inject_int(project_bool(explicate_5))
<ast.Constant object at 0x7fb6607c3160>
<ast.Constant object at 0x7fb6607c35e0>
inject_int(project_bool(explicate_6))
inject_big(add(project_big(explicate_7),project_big(explicate_8)))
inject_int(explicate_9+explicate_10)

if(0):

	new_temp0 = inject_bool(0)
else:

	new_temp0 = inject_bool(1)
explicate_5 = new_temp0
if(is_bool(explicate_5)):
	new_temp1 = inject_int(project_bool(explicate_5))
if(is_true(new_temp1)):

	new_temp2 = inject_bool(0)
else:

	new_temp2 = inject_bool(1)
explicate_6 = new_temp2
if(is_bool(explicate_6)):
	new_temp3 = inject_int(project_bool(explicate_6))
explicate_7 = new_temp3
explicate_8 = inject_int(1)
if(is_big(explicate_7)):
	if(is_big(explicate_8)):
		new_temp4 = inject_big(add(project_big(explicate_7),project_big(explicate_8)))
else:
	if(is_big(explicate_8)):
		error_pyobj(0)
	else:
		if(is_int(explicate_7)):
			explicate_9 = project_int(explicate_7)
		else:
			explicate_9 = project_bool(explicate_7)
		if(is_int(explicate_8)):
			explicate_10 = project_int(explicate_8)
		else:
			explicate_10 = project_bool(explicate_8)
		new_temp4 = inject_int(explicate_9+explicate_10)
print(new_temp4)
--------------Explicate code-------
if 0:
    new_temp0 = inject_bool(0)
else:
    new_temp0 = inject_bool(1)
explicate_5 = new_temp0
if is_bool(explicate_5):
    new_temp1 = inject_int(project_bool(explicate_5))
if is_true(new_temp1):
    new_temp2 = inject_bool(0)
else:
    new_temp2 = inject_bool(1)
explicate_6 = new_temp2
if is_bool(explicate_6):
    new_temp3 = inject_int(project_bool(explicate_6))
explicate_7 = new_temp3
explicate_8 = inject_int(1)
if is_big(explicate_7):
    if is_big(explicate_8):
        new_temp4 = inject_big(add(project_big(explicate_7), project_big(explicate_8)))
elif is_big(explicate_8):
    error_pyobj(0)
else:
    if is_int(explicate_7):
        explicate_9 = project_int(explicate_7)
    else:
        explicate_9 = project_bool(explicate_7)
    if is_int(explicate_8):
        explicate_10 = project_int(explicate_8)
    else:
        explicate_10 = project_bool(explicate_8)
    new_temp4 = inject_int(explicate_9 + explicate_10)
print(new_temp4)


--- explicated flattened python ---
if 0:
    new_temp11 = inject_bool(0)
    new_temp0 = new_temp11
else:
    new_temp12 = inject_bool(1)
    new_temp0 = new_temp12
explicate_5 = new_temp0
new_temp13 = is_bool(explicate_5)
if new_temp13:
    new_temp14 = project_bool(explicate_5)
    new_temp15 = inject_int(new_temp14)
    new_temp1 = new_temp15
new_temp16 = is_true(new_temp1)
if new_temp16:
    new_temp17 = inject_bool(0)
    new_temp2 = new_temp17
else:
    new_temp18 = inject_bool(1)
    new_temp2 = new_temp18
explicate_6 = new_temp2
new_temp19 = is_bool(explicate_6)
if new_temp19:
    new_temp20 = project_bool(explicate_6)
    new_temp21 = inject_int(new_temp20)
    new_temp3 = new_temp21
explicate_7 = new_temp3
new_temp22 = inject_int(1)
explicate_8 = new_temp22
new_temp23 = is_big(explicate_7)
if new_temp23:
    new_temp24 = is_big(explicate_8)
    if new_temp24:
        new_temp25 = project_big(explicate_7)
        new_temp26 = project_big(explicate_8)
        new_temp27 = add(new_temp25, new_temp26)
        new_temp28 = inject_big(new_temp27)
        new_temp4 = new_temp28
else:
    new_temp29 = is_big(explicate_8)
    if new_temp29:
        error_pyobj(0)
    else:
        new_temp30 = is_int(explicate_7)
        if new_temp30:
            new_temp31 = project_int(explicate_7)
            explicate_9 = new_temp31
        else:
            new_temp32 = project_bool(explicate_7)
            explicate_9 = new_temp32
        new_temp33 = is_int(explicate_8)
        if new_temp33:
            new_temp34 = project_int(explicate_8)
            explicate_10 = new_temp34
        else:
            new_temp35 = project_bool(explicate_8)
            explicate_10 = new_temp35
        new_temp36 = explicate_9 + explicate_10
        new_temp37 = inject_int(new_temp36)
        new_temp4 = new_temp37
print(new_temp4)


--- x86 IR ---
if1
cmp 0, 0
je else1
then1
call  inject_bool 0
movl  eax ,  new_temp11
movl  new_temp11 ,  new_temp0
else1
call  inject_bool 1
movl  eax ,  new_temp12
movl  new_temp12 ,  new_temp0
end if1
movl  new_temp0 ,  explicate_5
call  is_bool explicate_5
movl  eax ,  new_temp13
if2
cmp 0, new_temp13
je end if2
then2
call  project_bool explicate_5
movl  eax ,  new_temp14
call  inject_int new_temp14
movl  eax ,  new_temp15
movl  new_temp15 ,  new_temp1
end if2
call  is_true new_temp1
movl  eax ,  new_temp16
if3
cmp 0, new_temp16
je else3
then3
call  inject_bool 0
movl  eax ,  new_temp17
movl  new_temp17 ,  new_temp2
else3
call  inject_bool 1
movl  eax ,  new_temp18
movl  new_temp18 ,  new_temp2
end if3
movl  new_temp2 ,  explicate_6
call  is_bool explicate_6
movl  eax ,  new_temp19
if4
cmp 0, new_temp19
je end if4
then4
call  project_bool explicate_6
movl  eax ,  new_temp20
call  inject_int new_temp20
movl  eax ,  new_temp21
movl  new_temp21 ,  new_temp3
end if4
movl  new_temp3 ,  explicate_7
call  inject_int 1
movl  eax ,  new_temp22
movl  new_temp22 ,  explicate_8
call  is_big explicate_7
movl  eax ,  new_temp23
if5
cmp 0, new_temp23
je else5
then5
call  is_big explicate_8
movl  eax ,  new_temp24
if6
cmp 0, new_temp24
je end if6
then6
call  project_big explicate_7
movl  eax ,  new_temp25
call  project_big explicate_8
movl  eax ,  new_temp26
call  add new_temp25,new_temp26
movl  eax ,  new_temp27
call  inject_big new_temp27
movl  eax ,  new_temp28
movl  new_temp28 ,  new_temp4
end if6
else5
call  is_big explicate_8
movl  eax ,  new_temp29
if6
cmp 0, new_temp29
je else6
then6
call  error_pyobj 0
else6
call  is_int explicate_7
movl  eax ,  new_temp30
if7
cmp 0, new_temp30
je else7
then7
call  project_int explicate_7
movl  eax ,  new_temp31
movl  new_temp31 ,  explicate_9
else7
call  project_bool explicate_7
movl  eax ,  new_temp32
movl  new_temp32 ,  explicate_9
end if7
call  is_int explicate_8
movl  eax ,  new_temp33
if8
cmp 0, new_temp33
je else8
then8
call  project_int explicate_8
movl  eax ,  new_temp34
movl  new_temp34 ,  explicate_10
else8
call  project_bool explicate_8
movl  eax ,  new_temp35
movl  new_temp35 ,  explicate_10
end if8
movl  explicate_9 ,  new_temp36
addl  explicate_10 ,  new_temp36
call  inject_int new_temp36
movl  eax ,  new_temp37
movl  new_temp37 ,  new_temp4
end if6
end if5
call  print new_temp4


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'eax': {'explicate_8', 'explicate_6', 'new_temp4', 'explicate_7', 'explicate_9', 'new_temp1', 'new_temp25', 'explicate_5', 'new_temp3'}, 'ecx': {'explicate_8', 'explicate_6', 'new_temp4', 'explicate_7', 'explicate_9', 'new_temp1', 'new_temp25', 'explicate_5', 'new_temp3'}, 'edx': {'explicate_8', 'explicate_6', 'new_temp4', 'explicate_7', 'explicate_9', 'new_temp1', 'new_temp25', 'explicate_5', 'new_temp3'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp4': {'explicate_8', 'new_temp13', 'new_temp16', 'explicate_7', 'new_temp24', 'new_temp19', 'new_temp22', 'edx', 'new_temp12', 'new_temp17', 'new_temp21', 'new_temp1', 'new_temp20', 'ecx', 'new_temp23', 'new_temp18', 'explicate_6', 'new_temp11', 'new_temp0', 'new_temp29', 'new_temp2', 'explicate_5', 'new_temp15', 'eax', 'new_temp14', 'new_temp3'}, 'new_temp1': {'new_temp13', 'new_temp4', 'new_temp11', 'edx', 'new_temp12', 'new_temp0', 'explicate_5', 'eax', 'ecx', 'new_temp3'}, 'new_temp3': {'new_temp13', 'new_temp16', 'new_temp19', 'edx', 'new_temp12', 'new_temp17', 'new_temp1', 'ecx', 'new_temp18', 'explicate_6', 'new_temp4', 'new_temp11', 'new_temp0', 'new_temp2', 'explicate_5', 'new_temp15', 'eax', 'new_temp14'}, 'new_temp11': {'new_temp4', 'new_temp1', 'new_temp3'}, 'new_temp0': {'new_temp4', 'new_temp1', 'new_temp3'}, 'new_temp12': {'new_temp4', 'new_temp1', 'new_temp3'}, 'explicate_5': {'new_temp13', 'new_temp4', 'new_temp1', 'edx', 'eax', 'ecx', 'new_temp3'}, 'new_temp13': {'explicate_5', 'new_temp4', 'new_temp1', 'new_temp3'}, 'new_temp14': {'new_temp4', 'new_temp3'}, 'new_temp15': {'new_temp4', 'new_temp3'}, 'new_temp16': {'new_temp4', 'new_temp3'}, 'new_temp17': {'new_temp4', 'new_temp3'}, 'new_temp2': {'new_temp4', 'new_temp3'}, 'new_temp18': {'new_temp4', 'new_temp3'}, 'explicate_6': {'new_temp4', 'new_temp19', 'edx', 'eax', 'ecx', 'new_temp3'}, 'new_temp19': {'explicate_6', 'new_temp4', 'new_temp3'}, 'new_temp20': {'new_temp4'}, 'new_temp21': {'new_temp4'}, 'explicate_7': {'explicate_8', 'new_temp4', 'new_temp24', 'new_temp22', 'edx', 'new_temp29', 'new_temp30', 'new_temp23', 'eax', 'ecx'}, 'new_temp22': {'new_temp4', 'explicate_7'}, 'explicate_8': {'new_temp31', 'new_temp4', 'explicate_7', 'new_temp24', 'explicate_9', 'new_temp32', 'ecx', 'edx', 'new_temp29', 'new_temp25', 'new_temp30', 'new_temp33', 'eax', 'new_temp23'}, 'new_temp23': {'explicate_8', 'new_temp4', 'explicate_7'}, 'new_temp24': {'explicate_8', 'new_temp4', 'explicate_7'}, 'new_temp29': {'explicate_8', 'new_temp4', 'explicate_7'}, 'new_temp25': {'explicate_8', 'new_temp26', 'edx', 'eax', 'ecx'}, 'new_temp26': {'new_temp25'}, 'new_temp27': set(), 'new_temp28': set(), 'new_temp30': {'explicate_8', 'explicate_7'}, 'new_temp31': {'explicate_8'}, 'explicate_9': {'explicate_8', 'new_temp35', 'explicate_10', 'edx', 'new_temp34', 'new_temp33', 'eax', 'ecx'}, 'new_temp32': {'explicate_8'}, 'new_temp33': {'explicate_8', 'explicate_9'}, 'new_temp34': {'explicate_9'}, 'explicate_10': {'new_temp36', 'explicate_9'}, 'new_temp35': {'explicate_9'}, 'new_temp36': {'explicate_10'}, 'new_temp37': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'explicate_9': 4, 'explicate_8': 5, 'new_temp4': 4, 'explicate_7': 6, 'new_temp25': 4, 'new_temp3': 5, 'explicate_5': 6, 'new_temp1': 7, 'explicate_6': 6, 'new_temp29': 1, 'new_temp23': 1, 'new_temp19': 1, 'new_temp24': 1, 'new_temp13': 1, 'new_temp33': 1, 'new_temp15': 1, 'new_temp14': 1, 'new_temp2': 1, 'new_temp30': 1, 'new_temp0': 1, 'new_temp11': 1, 'new_temp18': 1, 'new_temp17': 1, 'new_temp12': 1, 'new_temp22': 1, 'new_temp16': 1, 'new_temp20': 1, 'new_temp21': 1, 'new_temp34': 1, 'explicate_10': 1, 'new_temp36': 2, 'new_temp35': 1, 'new_temp26': 1, 'new_temp32': 1, 'new_temp31': 1, 'new_temp28': 1, 'new_temp37': 1, 'new_temp27': 1}
Spilled set:
 {'new_temp1'}


--------------Spilling----------------
unspillable_set
 {'unspillable_0'}
continue_looping
 True


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp4': {'explicate_8', 'new_temp13', 'new_temp16', 'explicate_7', 'new_temp24', 'new_temp19', 'new_temp22', 'edx', 'new_temp12', 'new_temp17', 'new_temp21', 'new_temp1', 'new_temp20', 'ecx', 'new_temp23', 'new_temp18', 'explicate_6', 'new_temp11', 'new_temp0', 'new_temp29', 'new_temp2', 'unspillable_0', 'explicate_5', 'new_temp15', 'eax', 'new_temp14', 'new_temp3'}, 'new_temp3': {'new_temp13', 'new_temp16', 'new_temp19', 'edx', 'new_temp12', 'new_temp17', 'new_temp1', 'ecx', 'new_temp18', 'explicate_6', 'new_temp4', 'new_temp11', 'new_temp0', 'new_temp2', 'unspillable_0', 'explicate_5', 'new_temp15', 'eax', 'new_temp14'}, 'unspillable_0': {'new_temp4', 'new_temp3'}, 'eax': {'explicate_8', 'explicate_6', 'new_temp4', 'explicate_7', 'explicate_9', 'new_temp25', 'explicate_5', 'new_temp3'}, 'ecx': {'explicate_8', 'explicate_6', 'new_temp4', 'explicate_7', 'explicate_9', 'new_temp25', 'explicate_5', 'new_temp3'}, 'edx': {'explicate_8', 'explicate_6', 'new_temp4', 'explicate_7', 'explicate_9', 'new_temp25', 'explicate_5', 'new_temp3'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp11': {'new_temp4', 'new_temp3'}, 'new_temp0': {'new_temp4', 'new_temp3'}, 'new_temp12': {'new_temp4', 'new_temp3'}, 'explicate_5': {'new_temp13', 'new_temp4', 'edx', 'eax', 'ecx', 'new_temp3'}, 'new_temp13': {'explicate_5', 'new_temp4', 'new_temp3'}, 'new_temp14': {'new_temp4', 'new_temp3'}, 'new_temp15': {'new_temp4', 'new_temp3'}, 'new_temp16': {'new_temp4', 'new_temp3'}, 'new_temp17': {'new_temp4', 'new_temp3'}, 'new_temp2': {'new_temp4', 'new_temp3'}, 'new_temp18': {'new_temp4', 'new_temp3'}, 'explicate_6': {'new_temp4', 'new_temp19', 'edx', 'eax', 'ecx', 'new_temp3'}, 'new_temp19': {'explicate_6', 'new_temp4', 'new_temp3'}, 'new_temp20': {'new_temp4'}, 'new_temp21': {'new_temp4'}, 'explicate_7': {'explicate_8', 'new_temp4', 'new_temp24', 'new_temp22', 'edx', 'new_temp29', 'new_temp30', 'new_temp23', 'eax', 'ecx'}, 'new_temp22': {'new_temp4', 'explicate_7'}, 'explicate_8': {'new_temp31', 'new_temp4', 'explicate_7', 'new_temp24', 'explicate_9', 'new_temp32', 'ecx', 'edx', 'new_temp29', 'new_temp25', 'new_temp30', 'new_temp33', 'eax', 'new_temp23'}, 'new_temp23': {'explicate_8', 'new_temp4', 'explicate_7'}, 'new_temp24': {'explicate_8', 'new_temp4', 'explicate_7'}, 'new_temp29': {'explicate_8', 'new_temp4', 'explicate_7'}, 'new_temp25': {'explicate_8', 'new_temp26', 'edx', 'eax', 'ecx'}, 'new_temp26': {'new_temp25'}, 'new_temp27': set(), 'new_temp28': set(), 'new_temp30': {'explicate_8', 'explicate_7'}, 'new_temp31': {'explicate_8'}, 'explicate_9': {'explicate_8', 'new_temp35', 'explicate_10', 'edx', 'new_temp34', 'new_temp33', 'eax', 'ecx'}, 'new_temp32': {'explicate_8'}, 'new_temp33': {'explicate_8', 'explicate_9'}, 'new_temp34': {'explicate_9'}, 'explicate_10': {'new_temp36', 'explicate_9'}, 'new_temp35': {'explicate_9'}, 'new_temp36': {'explicate_10'}, 'new_temp37': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'unspillable_0': 1, 'explicate_9': 4, 'explicate_8': 5, 'new_temp4': 4, 'explicate_7': 6, 'new_temp25': 4, 'new_temp3': 5, 'explicate_5': 6, 'explicate_6': 6, 'new_temp29': 1, 'new_temp23': 1, 'new_temp19': 1, 'new_temp24': 1, 'new_temp13': 1, 'new_temp33': 1, 'new_temp15': 1, 'new_temp14': 1, 'new_temp2': 1, 'new_temp30': 1, 'new_temp0': 1, 'new_temp11': 1, 'new_temp18': 1, 'new_temp17': 1, 'new_temp12': 1, 'new_temp22': 1, 'new_temp16': 1, 'new_temp20': 1, 'new_temp21': 1, 'new_temp34': 1, 'explicate_10': 1, 'new_temp36': 2, 'new_temp35': 1, 'new_temp26': 1, 'new_temp32': 1, 'new_temp31': 1, 'new_temp28': 1, 'new_temp37': 1, 'new_temp27': 1}
Spilled set:
 {'new_temp1'}


--------------Spilling----------------
unspillable_set
 {'unspillable_0'}
continue_looping
 False



Homes for CFG0:  {'new_temp1': -4, 'unspillable_0': 'eax', 'explicate_9': 'edi', 'explicate_8': 'ebx', 'new_temp4': 'edi', 'explicate_7': 'esi', 'new_temp25': 'edi', 'new_temp3': 'ebx', 'explicate_5': 'esi', 'explicate_6': 'esi', 'new_temp29': 'eax', 'new_temp23': 'eax', 'new_temp19': 'eax', 'new_temp24': 'eax', 'new_temp13': 'eax', 'new_temp33': 'eax', 'new_temp15': 'eax', 'new_temp14': 'eax', 'new_temp2': 'eax', 'new_temp30': 'eax', 'new_temp0': 'eax', 'new_temp11': 'eax', 'new_temp18': 'eax', 'new_temp17': 'eax', 'new_temp12': 'eax', 'new_temp22': 'eax', 'new_temp16': 'eax', 'new_temp20': 'eax', 'new_temp21': 'eax', 'new_temp34': 'eax', 'explicate_10': 'eax', 'new_temp36': 'ecx', 'new_temp35': 'eax', 'new_temp26': 'eax', 'new_temp32': 'eax', 'new_temp31': 'eax', 'new_temp28': 'eax', 'new_temp37': 'eax', 'new_temp27': 'eax'}
unspillable_0
unspillable_0
new_temp11
new_temp11
new_temp0
new_temp12
new_temp12
new_temp0
new_temp0
explicate_5
explicate_5
new_temp13
new_temp13
explicate_5
new_temp14
new_temp14
new_temp15
new_temp15
new_temp16
new_temp16
new_temp17
new_temp17
new_temp2
new_temp18
new_temp18
new_temp2
new_temp2
explicate_6
explicate_6
new_temp19
new_temp19
explicate_6
new_temp20
new_temp20
new_temp21
new_temp21
new_temp3
new_temp3
explicate_7
new_temp22
new_temp22
explicate_8
explicate_7
new_temp23
new_temp23
explicate_8
new_temp24
new_temp24
explicate_7
new_temp25
explicate_8
new_temp26
new_temp26
new_temp25
new_temp27
new_temp27
new_temp28
new_temp28
new_temp4
explicate_8
new_temp29
new_temp29
explicate_7
new_temp30
new_temp30
explicate_7
new_temp31
new_temp31
explicate_9
explicate_7
new_temp32
new_temp32
explicate_9
explicate_8
new_temp33
new_temp33
explicate_8
new_temp34
new_temp34
explicate_10
explicate_8
new_temp35
new_temp35
explicate_10
explicate_9
new_temp36
explicate_10
new_temp36
new_temp36
new_temp37
new_temp37
new_temp4
new_temp4
