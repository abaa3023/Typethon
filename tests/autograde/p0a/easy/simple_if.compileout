Syntax error at 'print'
Syntax error at 'else'
------------------CORRECT TREE--------------------
Module(
    body=[
        If(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Call(
                            func=Name(id='eval', ctx=Load()),
                            args=[
                                Call(
                                    func=Name(id='input', ctx=Load()),
                                    args=[],
                                    keywords=[])],
                            keywords=[]),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=23)])],
                keywords=[]),
            body=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value=42)],
                        keywords=[]))],
            orelse=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value=0)],
                        keywords=[]))])],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Constant(value=0)],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
if int(eval(input()) == 23):
    print(42)
else:
    print(0)

Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=0)],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=0)],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
print(0)

print(inject_int(0))
--------------Explicate code-------
print(inject_int(0))


--- explicated flattened python ---
new_temp0 = inject_int(0)
print(new_temp0)


--- x86 IR ---
call  inject_int 0
movl  eax ,  new_temp0
call  print new_temp0


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp0': set(), 'eax': set(), 'ecx': set(), 'edx': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp0': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp0': 'eax'}
new_temp0
new_temp0
