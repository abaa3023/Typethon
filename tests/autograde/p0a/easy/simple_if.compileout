------------------CORRECT TREE--------------------
Module(
    body=[
        If(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Call(
                            func=Name(id='eval', ctx=Load()),
                            args=[
                                Call(
                                    func=Name(id='input', ctx=Load()),
                                    args=[],
                                    keywords=[])],
                            keywords=[]),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=23)])],
                keywords=[]),
            body=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value=42)],
                        keywords=[]))],
            orelse=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value=0)],
                        keywords=[]))])],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        If(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Call(
                            func=Name(id='eval', ctx=Load()),
                            args=[
                                Call(
                                    func=Name(id='input', ctx=Load()),
                                    args=[],
                                    keywords=[])],
                            keywords=[]),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=23)])],
                keywords=[]),
            body=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value=42)],
                        keywords=[]))],
            orelse=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value=0)],
                        keywords=[]))])],
    type_ignores=[])
--------------Original code----------------
if int(eval(input()) == 23):
    print(42)
else:
    print(0)

Module(
     body=[
          If(
               test=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Call(
                                   func=Name(id='eval', ctx=Load()),
                                   args=[
                                        Call(
                                             func=Name(id='input', ctx=Load()),
                                             args=[],
                                             keywords=[])],
                                   keywords=[]),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Constant(value=23)])],
                    keywords=[]),
               body=[
                    Expr(
                         value=Call(
                              func=Name(id='print', ctx=Load()),
                              args=[
                                   Constant(value=42)],
                              keywords=[]))],
               orelse=[
                    Expr(
                         value=Call(
                              func=Name(id='print', ctx=Load()),
                              args=[
                                   Constant(value=0)],
                              keywords=[]))])],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Compare(
                    left=Name(id='new_temp0', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Constant(value=23)])),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=Name(id='new_temp1', ctx=Store())),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp2', ctx=Load())],
                    keywords=[])),
          If(
               test=Name(id='new_temp3', ctx=Load()),
               body=[
                    Expr(
                         value=Call(
                              func=Name(id='print', ctx=Load()),
                              args=[
                                   Constant(value=42)],
                              keywords=[]))],
               orelse=[
                    Expr(
                         value=Call(
                              func=Name(id='print', ctx=Load()),
                              args=[
                                   Constant(value=0)],
                              keywords=[]))])],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = eval(input())
new_temp1 = new_temp0 == 23
new_temp2 = new_temp1
new_temp3 = int(new_temp2)
if new_temp3:
    print(42)
else:
    print(0)
eval(input())
inject_bool(equal(project_big(explicate_4),project_big(explicate_5)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_6==explicate_7)
<ast.Name object at 0x7fe1b4386ec0>
inject_int(project_bool(explicate_8))

new_temp0 = eval(input())
explicate_4 = new_temp0
explicate_5 = inject_int(23)
if(is_big(explicate_4)):
	if(is_big(explicate_5)):
		new_temp1 = inject_bool(equal(project_big(explicate_4),project_big(explicate_5)))
	else:
		new_temp1 = inject_bool(0)
else:
	if(is_big(explicate_5)):
		new_temp1 = inject_bool(0)
	else:
		if(is_int(explicate_4)):
			explicate_6 = project_int(explicate_4)
		else:
			explicate_6 = project_bool(explicate_4)
		if(is_int(explicate_5)):
			explicate_7 = project_int(explicate_5)
		else:
			explicate_7 = project_bool(explicate_5)
		new_temp1 = inject_bool(explicate_6==explicate_7)
new_temp2 = new_temp1
explicate_8 = new_temp2
if(is_bool(explicate_8)):
	new_temp3 = inject_int(project_bool(explicate_8))
if(is_true(new_temp3)):

	print(inject_int(42))
else:

	print(inject_int(0))
--------------Explicate code-------
new_temp0 = eval(input())
explicate_4 = new_temp0
explicate_5 = inject_int(23)
if is_big(explicate_4):
    if is_big(explicate_5):
        new_temp1 = inject_bool(equal(project_big(explicate_4), project_big(explicate_5)))
    else:
        new_temp1 = inject_bool(0)
elif is_big(explicate_5):
    new_temp1 = inject_bool(0)
else:
    if is_int(explicate_4):
        explicate_6 = project_int(explicate_4)
    else:
        explicate_6 = project_bool(explicate_4)
    if is_int(explicate_5):
        explicate_7 = project_int(explicate_5)
    else:
        explicate_7 = project_bool(explicate_5)
    new_temp1 = inject_bool(explicate_6 == explicate_7)
new_temp2 = new_temp1
explicate_8 = new_temp2
if is_bool(explicate_8):
    new_temp3 = inject_int(project_bool(explicate_8))
if is_true(new_temp3):
    print(inject_int(42))
else:
    print(inject_int(0))


--- explicated flattened python ---
new_temp9 = eval(input())
new_temp0 = new_temp9
explicate_4 = new_temp0
new_temp10 = inject_int(23)
explicate_5 = new_temp10
new_temp11 = is_big(explicate_4)
if new_temp11:
    new_temp12 = is_big(explicate_5)
    if new_temp12:
        new_temp13 = project_big(explicate_4)
        new_temp14 = project_big(explicate_5)
        new_temp15 = equal(new_temp13, new_temp14)
        new_temp16 = inject_bool(new_temp15)
        new_temp1 = new_temp16
    else:
        new_temp17 = inject_bool(0)
        new_temp1 = new_temp17
else:
    new_temp18 = is_big(explicate_5)
    if new_temp18:
        new_temp19 = inject_bool(0)
        new_temp1 = new_temp19
    else:
        new_temp20 = is_int(explicate_4)
        if new_temp20:
            new_temp21 = project_int(explicate_4)
            explicate_6 = new_temp21
        else:
            new_temp22 = project_bool(explicate_4)
            explicate_6 = new_temp22
        new_temp23 = is_int(explicate_5)
        if new_temp23:
            new_temp24 = project_int(explicate_5)
            explicate_7 = new_temp24
        else:
            new_temp25 = project_bool(explicate_5)
            explicate_7 = new_temp25
        new_temp26 = explicate_6 == explicate_7
        new_temp27 = new_temp26
        new_temp28 = inject_bool(new_temp27)
        new_temp1 = new_temp28
new_temp2 = new_temp1
explicate_8 = new_temp2
new_temp29 = is_bool(explicate_8)
if new_temp29:
    new_temp30 = project_bool(explicate_8)
    new_temp31 = inject_int(new_temp30)
    new_temp3 = new_temp31
new_temp32 = is_true(new_temp3)
if new_temp32:
    new_temp33 = inject_int(42)
    print(new_temp33)
else:
    new_temp34 = inject_int(0)
    print(new_temp34)


--- x86 IR ---
call  eval None
movl  eax ,  new_temp9
movl  new_temp9 ,  new_temp0
movl  new_temp0 ,  explicate_4
call  inject_int 23
movl  eax ,  new_temp10
movl  new_temp10 ,  explicate_5
call  is_big explicate_4
movl  eax ,  new_temp11
if1
cmp 0, new_temp11
je else1
then1
call  is_big explicate_5
movl  eax ,  new_temp12
if2
cmp 0, new_temp12
je else2
then2
call  project_big explicate_4
movl  eax ,  new_temp13
call  project_big explicate_5
movl  eax ,  new_temp14
call  equal new_temp13,new_temp14
movl  eax ,  new_temp15
call  inject_bool new_temp15
movl  eax ,  new_temp16
movl  new_temp16 ,  new_temp1
else2
call  inject_bool 0
movl  eax ,  new_temp17
movl  new_temp17 ,  new_temp1
end if2
else1
call  is_big explicate_5
movl  eax ,  new_temp18
if2
cmp 0, new_temp18
je else2
then2
call  inject_bool 0
movl  eax ,  new_temp19
movl  new_temp19 ,  new_temp1
else2
call  is_int explicate_4
movl  eax ,  new_temp20
if3
cmp 0, new_temp20
je else3
then3
call  project_int explicate_4
movl  eax ,  new_temp21
movl  new_temp21 ,  explicate_6
else3
call  project_bool explicate_4
movl  eax ,  new_temp22
movl  new_temp22 ,  explicate_6
end if3
call  is_int explicate_5
movl  eax ,  new_temp23
if4
cmp 0, new_temp23
je else4
then4
call  project_int explicate_5
movl  eax ,  new_temp24
movl  new_temp24 ,  explicate_7
else4
call  project_bool explicate_5
movl  eax ,  new_temp25
movl  new_temp25 ,  explicate_7
end if4
int_compare  explicate_6 Eq explicate_7 ,  new_temp26
movl  new_temp26 ,  new_temp27
call  inject_bool new_temp27
movl  eax ,  new_temp28
movl  new_temp28 ,  new_temp1
end if2
end if1
movl  new_temp1 ,  new_temp2
movl  new_temp2 ,  explicate_8
call  is_bool explicate_8
movl  eax ,  new_temp29
if2
cmp 0, new_temp29
je end if2
then2
call  project_bool explicate_8
movl  eax ,  new_temp30
call  inject_int new_temp30
movl  eax ,  new_temp31
movl  new_temp31 ,  new_temp3
end if2
call  is_true new_temp3
movl  eax ,  new_temp32
if3
cmp 0, new_temp32
je else3
then3
call  inject_int 42
movl  eax ,  new_temp33
call  print new_temp33
else3
call  inject_int 0
movl  eax ,  new_temp34
call  print new_temp34
end if3


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp3': {'new_temp26', 'new_temp2', 'explicate_5', 'new_temp29', 'new_temp11', 'explicate_7', 'new_temp12', 'new_temp19', 'edx', 'eax', 'new_temp20', 'new_temp16', 'new_temp21', 'new_temp22', 'new_temp9', 'explicate_8', 'new_temp23', 'new_temp17', 'new_temp24', 'new_temp28', 'ecx', 'explicate_4', 'new_temp10', 'new_temp25', 'new_temp0', 'new_temp14', 'new_temp13', 'new_temp1', 'new_temp27', 'new_temp18', 'new_temp15', 'explicate_6'}, 'eax': {'new_temp26', 'explicate_5', 'explicate_4', 'new_temp13', 'explicate_8', 'explicate_6', 'new_temp3'}, 'ecx': {'explicate_5', 'explicate_4', 'new_temp13', 'explicate_8', 'explicate_6', 'new_temp3'}, 'edx': {'explicate_5', 'explicate_4', 'new_temp13', 'explicate_8', 'explicate_6', 'new_temp3'}, 'new_temp9': {'new_temp3'}, 'new_temp0': {'new_temp3'}, 'explicate_4': {'explicate_5', 'new_temp11', 'new_temp10', 'ecx', 'new_temp12', 'edx', 'eax', 'new_temp20', 'new_temp18', 'new_temp3'}, 'new_temp10': {'explicate_4', 'new_temp3'}, 'explicate_5': {'new_temp11', 'new_temp12', 'ecx', 'explicate_4', 'edx', 'eax', 'new_temp13', 'new_temp20', 'new_temp21', 'new_temp18', 'new_temp22', 'new_temp23', 'explicate_6', 'new_temp3'}, 'new_temp11': {'explicate_4', 'explicate_5', 'new_temp3'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp12': {'explicate_4', 'explicate_5', 'new_temp3'}, 'new_temp18': {'explicate_4', 'explicate_5', 'new_temp3'}, 'new_temp13': {'eax', 'new_temp14', 'explicate_5', 'ecx', 'edx', 'new_temp3'}, 'new_temp14': {'new_temp13', 'new_temp3'}, 'new_temp15': {'new_temp3'}, 'new_temp16': {'new_temp3'}, 'new_temp1': {'new_temp3'}, 'new_temp17': {'new_temp3'}, 'new_temp19': {'new_temp3'}, 'new_temp20': {'explicate_4', 'explicate_5', 'new_temp3'}, 'new_temp2': {'new_temp3'}, 'explicate_8': {'new_temp29', 'ecx', 'edx', 'eax', 'new_temp3'}, 'new_temp29': {'explicate_8', 'new_temp3'}, 'new_temp21': {'explicate_5', 'new_temp3'}, 'explicate_6': {'new_temp24', 'explicate_5', 'explicate_7', 'ecx', 'new_temp25', 'edx', 'eax', 'new_temp23', 'new_temp3'}, 'new_temp22': {'explicate_5', 'new_temp3'}, 'new_temp30': set(), 'new_temp31': set(), 'new_temp32': set(), 'new_temp23': {'explicate_5', 'explicate_6', 'new_temp3'}, 'new_temp33': set(), 'new_temp34': set(), 'new_temp24': {'explicate_6', 'new_temp3'}, 'explicate_7': {'explicate_6', 'new_temp3'}, 'new_temp25': {'explicate_6', 'new_temp3'}, 'new_temp26': {'eax', 'new_temp3'}, 'new_temp27': {'new_temp3'}, 'new_temp28': {'new_temp3'}}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'explicate_6': 4, 'new_temp3': 5, 'explicate_5': 6, 'new_temp13': 4, 'explicate_4': 4, 'explicate_8': 4, 'new_temp18': 1, 'new_temp23': 1, 'new_temp20': 1, 'new_temp12': 1, 'new_temp11': 1, 'new_temp14': 1, 'new_temp25': 1, 'new_temp10': 1, 'new_temp24': 1, 'new_temp22': 1, 'new_temp21': 1, 'explicate_7': 1, 'new_temp29': 1, 'new_temp26': 2, 'new_temp15': 1, 'new_temp17': 1, 'new_temp9': 1, 'new_temp27': 1, 'new_temp1': 1, 'new_temp16': 1, 'new_temp0': 1, 'new_temp19': 1, 'new_temp28': 1, 'new_temp2': 1, 'new_temp31': 1, 'new_temp34': 1, 'new_temp30': 1, 'new_temp33': 1, 'new_temp32': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'explicate_6': 'edi', 'new_temp3': 'ebx', 'explicate_5': 'esi', 'new_temp13': 'edi', 'explicate_4': 'edi', 'explicate_8': 'edi', 'new_temp18': 'eax', 'new_temp23': 'eax', 'new_temp20': 'eax', 'new_temp12': 'eax', 'new_temp11': 'eax', 'new_temp14': 'eax', 'new_temp25': 'eax', 'new_temp10': 'eax', 'new_temp24': 'eax', 'new_temp22': 'eax', 'new_temp21': 'eax', 'explicate_7': 'eax', 'new_temp29': 'eax', 'new_temp26': 'ecx', 'new_temp15': 'eax', 'new_temp17': 'eax', 'new_temp9': 'eax', 'new_temp27': 'eax', 'new_temp1': 'eax', 'new_temp16': 'eax', 'new_temp0': 'eax', 'new_temp19': 'eax', 'new_temp28': 'eax', 'new_temp2': 'eax', 'new_temp31': 'eax', 'new_temp34': 'eax', 'new_temp30': 'eax', 'new_temp33': 'eax', 'new_temp32': 'eax'}
new_temp9
new_temp9
new_temp0
new_temp0
explicate_4
new_temp10
new_temp10
explicate_5
explicate_4
new_temp11
new_temp11
explicate_5
new_temp12
new_temp12
explicate_4
new_temp13
explicate_5
new_temp14
new_temp14
new_temp13
new_temp15
new_temp15
new_temp16
new_temp16
new_temp1
new_temp17
new_temp17
new_temp1
explicate_5
new_temp18
new_temp18
new_temp19
new_temp19
new_temp1
explicate_4
new_temp20
new_temp20
explicate_4
new_temp21
new_temp21
explicate_6
explicate_4
new_temp22
new_temp22
explicate_6
explicate_5
new_temp23
new_temp23
explicate_5
new_temp24
new_temp24
explicate_7
explicate_5
new_temp25
new_temp25
explicate_7
explicate_6
explicate_7
new_temp26
new_temp26
new_temp26
new_temp26
new_temp27
new_temp27
new_temp28
new_temp28
new_temp1
new_temp1
new_temp2
new_temp2
explicate_8
explicate_8
new_temp29
new_temp29
explicate_8
new_temp30
new_temp30
new_temp31
new_temp31
new_temp3
new_temp3
new_temp32
new_temp32
new_temp33
new_temp33
new_temp34
new_temp34
