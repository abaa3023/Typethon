Illegal character ':'
Illegal character ':'
------------------CORRECT TREE--------------------
Module(
    body=[
        If(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Call(
                            func=Name(id='eval', ctx=Load()),
                            args=[
                                Call(
                                    func=Name(id='input', ctx=Load()),
                                    args=[],
                                    keywords=[])],
                            keywords=[]),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=23)])],
                keywords=[]),
            body=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value=42)],
                        keywords=[]))],
            orelse=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value=0)],
                        keywords=[]))])],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Call(
                            func=Name(id='eval', ctx=Load()),
                            args=[
                                Call(
                                    func=Name(id='input', ctx=Load()),
                                    args=[],
                                    keywords=[])],
                            keywords=[]),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=23)])],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Constant(value=42)],
                keywords=[])),
        Expr(
            value=Name(id='else', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Constant(value=0)],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
if int(eval(input()) == 23):
    print(42)
else:
    print(0)

Module(
     body=[
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Call(
                                   func=Name(id='eval', ctx=Load()),
                                   args=[
                                        Call(
                                             func=Name(id='input', ctx=Load()),
                                             args=[],
                                             keywords=[])],
                                   keywords=[]),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Constant(value=23)])],
                    keywords=[])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=42)],
                    keywords=[])),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=0)],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Compare(
                    left=Name(id='new_temp0', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Constant(value=23)])),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=Name(id='new_temp1', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp2', ctx=Load())],
                    keywords=[])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=42)],
                    keywords=[])),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=0)],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
if
new_temp0 = eval(input())
new_temp1 = new_temp0 == 23
new_temp2 = new_temp1
int(new_temp2)
print(42)
else
print(0)
eval(input())
inject_bool(equal(project_big(explicate_3),project_big(explicate_4)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_5==explicate_6)
<ast.Name object at 0x7f34be102710>
