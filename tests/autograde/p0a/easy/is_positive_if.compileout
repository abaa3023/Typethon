Illegal character ':'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=12)),
        Assign(
            targets=[
                Name(id='is_positive', ctx=Store())],
            value=Constant(value=1)),
        If(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=0)])],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Name(id='is_positive', ctx=Store())],
                    value=Constant(value=0))],
            orelse=[]),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='is_positive', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=12)),
        Assign(
            targets=[
                Name(id='is_positive', ctx=Store())],
            value=Constant(value=1)),
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=0)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='is_positive', ctx=Store())],
            value=Constant(value=0)),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='is_positive', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = 12
is_positive = 1
if int(x != 0):
    is_positive = 0

print(is_positive)

Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=12)),
          Assign(
               targets=[
                    Name(id='is_positive', ctx=Store())],
               value=Constant(value=1)),
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='x', ctx=Load()),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Constant(value=0)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='is_positive', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='is_positive', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=12)),
          Assign(
               targets=[
                    Name(id='is_positive', ctx=Store())],
               value=Constant(value=1)),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Compare(
                    left=Name(id='x', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Constant(value=0)])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp1', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='is_positive', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='is_positive', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
x = 12
is_positive = 1
if
new_temp0 = x != 0
new_temp1 = new_temp0
int(new_temp1)
is_positive = 0
print(is_positive)
<ast.Constant object at 0x7fa81afd9c00>
<ast.Constant object at 0x7fa81afd9bd0>
inject_bool(not_equal(project_big(explicate_2),project_big(explicate_3)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_4!=explicate_5)
<ast.Name object at 0x7fa81afda620>
<ast.Constant object at 0x7fa81afd9f90>
