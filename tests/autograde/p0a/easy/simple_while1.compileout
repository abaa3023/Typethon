Syntax error at 'x'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=100)),
        While(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Name(id='y', ctx=Load())])],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=Constant(value=1))),
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            BoolOp(
                                op=And(),
                                values=[
                                    Name(id='x', ctx=Load()),
                                    Name(id='y', ctx=Load())])],
                        keywords=[]))],
            orelse=[])],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        BinOp(
            left=Name(id='x', ctx=Load()),
            op=Add(),
            right=Constant(value=1)),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BoolOp(
                        op=And(),
                        values=[
                            Name(id='x', ctx=Load()),
                            Name(id='y', ctx=Load())])],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = 1
y = 100
while (int(x != y)):
  x = x + 1
  print(x and y)
Module(
     body=[
          BinOp(
               left=Name(id='x', ctx=Load()),
               op=Add(),
               right=Constant(value=1)),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         BoolOp(
                              op=And(),
                              values=[
                                   Name(id='x', ctx=Load()),
                                   Name(id='y', ctx=Load())])],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          If(
               test=Name(id='x', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Name(id='y', ctx=Load()))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Name(id='x', ctx=Load()))]),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp1', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
if x:
    new_temp0 = y
else:
    new_temp0 = x
new_temp1 = new_temp0
print(new_temp1)
<ast.Name object at 0x7f942fc7ec80>
<ast.Name object at 0x7f942fc7d2a0>
<ast.Name object at 0x7f942fc7f3d0>

if(is_true(x)):

	new_temp0 = y
else:

	new_temp0 = x
new_temp1 = new_temp0
print(new_temp1)
--------------Explicate code-------
if is_true(x):
    new_temp0 = y
else:
    new_temp0 = x
new_temp1 = new_temp0
print(new_temp1)


--- explicated flattened python ---
new_temp2 = is_true(x)
if new_temp2:
    new_temp0 = y
else:
    new_temp0 = x
new_temp1 = new_temp0
print(new_temp1)


--- x86 IR ---
call  is_true x
movl  eax ,  new_temp2
if1
cmp 0, new_temp2
je else1
then1
movl  y ,  new_temp0
else1
movl  x ,  new_temp0
end if1
movl  new_temp0 ,  new_temp1
call  print new_temp1


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'y': {'new_temp2', 'ecx', 'edx', 'eax'}, 'eax': {'y', 'x'}, 'ecx': {'y', 'x'}, 'edx': {'y', 'x'}, 'x': {'new_temp2', 'ecx', 'edx', 'eax'}, 'new_temp2': {'y', 'x'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp0': set(), 'new_temp1': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'y': 4, 'x': 4, 'new_temp2': 1, 'new_temp0': 1, 'new_temp1': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'y': 'edi', 'x': 'edi', 'new_temp2': 'eax', 'new_temp0': 'eax', 'new_temp1': 'eax'}
x
new_temp2
new_temp2
y
new_temp0
x
new_temp0
new_temp0
new_temp1
new_temp1
