Illegal character ':'
Illegal character ':'
Illegal character ':'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=Constant(value=0)),
        While(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=10)])],
                keywords=[]),
            body=[
                While(
                    test=Call(
                        func=Name(id='int', ctx=Load()),
                        args=[
                            Compare(
                                left=Name(id='y', ctx=Load()),
                                ops=[
                                    NotEq()],
                                comparators=[
                                    Constant(value=0)])],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='temp', ctx=Store())],
                            value=Name(id='x', ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='temp2', ctx=Store())],
                            value=Name(id='y', ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='product', ctx=Store())],
                            value=Constant(value=0)),
                        While(
                            test=Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    Compare(
                                        left=Name(id='temp', ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value=0)])],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='product', ctx=Store())],
                                    value=BinOp(
                                        left=Name(id='product', ctx=Load()),
                                        op=Add(),
                                        right=Name(id='temp2', ctx=Load()))),
                                Assign(
                                    targets=[
                                        Name(id='temp', ctx=Store())],
                                    value=BinOp(
                                        left=Name(id='temp', ctx=Load()),
                                        op=Add(),
                                        right=UnaryOp(
                                            op=USub(),
                                            operand=Constant(value=1))))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='z', ctx=Store())],
                            value=BinOp(
                                left=Name(id='z', ctx=Load()),
                                op=Add(),
                                right=Name(id='product', ctx=Load()))),
                        Assign(
                            targets=[
                                Name(id='y', ctx=Store())],
                            value=BinOp(
                                left=Name(id='y', ctx=Load()),
                                op=Add(),
                                right=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1))))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=Constant(value=1))),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Constant(value=2))],
            orelse=[]),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Name(id='z', ctx=Load()))),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='z', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=Constant(value=0)),
        Expr(
            value=Name(id='while', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=10)])],
                keywords=[])),
        Expr(
            value=Name(id='while', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='y', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=0)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='temp', ctx=Store())],
            value=Name(id='x', ctx=Load())),
        Assign(
            targets=[
                Name(id='temp2', ctx=Store())],
            value=Name(id='y', ctx=Load())),
        Assign(
            targets=[
                Name(id='product', ctx=Store())],
            value=Constant(value=0)),
        Expr(
            value=Name(id='while', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='temp', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=0)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='product', ctx=Store())],
            value=BinOp(
                left=Name(id='product', ctx=Load()),
                op=Add(),
                right=Name(id='temp2', ctx=Load()))),
        Assign(
            targets=[
                Name(id='temp', ctx=Store())],
            value=BinOp(
                left=Name(id='temp', ctx=Load()),
                op=Add(),
                right=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1)))),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Name(id='product', ctx=Load()))),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=BinOp(
                left=Name(id='y', ctx=Load()),
                op=Add(),
                right=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1)))),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Name(id='z', ctx=Load()))),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='z', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = 1
y = 2
z = 0

while int(x != 10):
    while int(y != 0):
        temp = x
        temp2 = y
        product = 0
        
        while int(temp != 0):
            product = product + temp2
            temp = temp + -1
        
        z = z + product
        y = y + -1 
        
    x = x + 1
    y = 2

z = z + z

print(z)


Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='x', ctx=Load()),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Constant(value=10)])],
                    keywords=[])),
          Expr(
               value=Name(id='while', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='y', ctx=Load()),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Constant(value=0)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='temp', ctx=Store())],
               value=Name(id='x', ctx=Load())),
          Assign(
               targets=[
                    Name(id='temp2', ctx=Store())],
               value=Name(id='y', ctx=Load())),
          Assign(
               targets=[
                    Name(id='product', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='temp', ctx=Load()),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Constant(value=0)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='product', ctx=Store())],
               value=BinOp(
                    left=Name(id='product', ctx=Load()),
                    op=Add(),
                    right=Name(id='temp2', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='temp', ctx=Store())],
               value=BinOp(
                    left=Name(id='temp', ctx=Load()),
                    op=Add(),
                    right=UnaryOp(
                         op=USub(),
                         operand=Constant(value=1)))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Name(id='product', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=BinOp(
                    left=Name(id='y', ctx=Load()),
                    op=Add(),
                    right=UnaryOp(
                         op=USub(),
                         operand=Constant(value=1)))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Name(id='z', ctx=Load()))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Compare(
                    left=Name(id='x', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Constant(value=10)])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp1', ctx=Load())],
                    keywords=[])),
          Expr(
               value=Name(id='while', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=Compare(
                    left=Name(id='y', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Constant(value=0)])),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=Name(id='new_temp2', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp3', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='temp', ctx=Store())],
               value=Name(id='x', ctx=Load())),
          Assign(
               targets=[
                    Name(id='temp2', ctx=Store())],
               value=Name(id='y', ctx=Load())),
          Assign(
               targets=[
                    Name(id='product', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=Compare(
                    left=Name(id='temp', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Constant(value=0)])),
          Assign(
               targets=[
                    Name(id='new_temp5', ctx=Store())],
               value=Name(id='new_temp4', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp5', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp6', ctx=Store())],
               value=BinOp(
                    left=Name(id='product', ctx=Load()),
                    op=Add(),
                    right=Name(id='temp2', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='product', ctx=Store())],
               value=Name(id='new_temp6', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp7', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='new_temp8', ctx=Store())],
               value=BinOp(
                    left=Name(id='temp', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp7', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='temp', ctx=Store())],
               value=Name(id='new_temp8', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp9', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Name(id='product', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp9', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp10', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='new_temp11', ctx=Store())],
               value=BinOp(
                    left=Name(id='y', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp10', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='new_temp11', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp12', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp12', ctx=Load())),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='new_temp13', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Name(id='z', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp13', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
x = 1
y = 2
z = 0
while
new_temp0 = x != 10
new_temp1 = new_temp0
int(new_temp1)
while
new_temp2 = y != 0
new_temp3 = new_temp2
int(new_temp3)
temp = x
temp2 = y
product = 0
while
new_temp4 = temp != 0
new_temp5 = new_temp4
int(new_temp5)
new_temp6 = product + temp2
product = new_temp6
new_temp7 = -1
new_temp8 = temp + new_temp7
temp = new_temp8
new_temp9 = z + product
z = new_temp9
new_temp10 = -1
new_temp11 = y + new_temp10
y = new_temp11
new_temp12 = x + 1
x = new_temp12
y = 2
new_temp13 = z + z
z = new_temp13
print(z)
<ast.Constant object at 0x7f00c7a40a00>
<ast.Constant object at 0x7f00c7a40a30>
<ast.Constant object at 0x7f00c7a40a60>
inject_bool(not_equal(project_big(explicate_14),project_big(explicate_15)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_16!=explicate_17)
<ast.Name object at 0x7f00c7a8c3a0>
inject_bool(not_equal(project_big(explicate_18),project_big(explicate_19)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_20!=explicate_21)
<ast.Name object at 0x7f00c7a8c430>
<ast.Name object at 0x7f00c7a42e00>
<ast.Name object at 0x7f00c7a42ec0>
<ast.Constant object at 0x7f00c7a42fe0>
inject_bool(not_equal(project_big(explicate_22),project_big(explicate_23)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_24!=explicate_25)
<ast.Name object at 0x7f00c7a8c5e0>
inject_big(add(project_big(explicate_26),project_big(explicate_27)))
inject_int(explicate_28+explicate_29)
<ast.Name object at 0x7f00c7a43370>
inject_int(-1)
inject_big(add(project_big(explicate_30),project_big(explicate_31)))
inject_int(explicate_32+explicate_33)
<ast.Name object at 0x7f00c7a8c6a0>
inject_big(add(project_big(explicate_34),project_big(explicate_35)))
inject_int(explicate_36+explicate_37)
<ast.Name object at 0x7f00c7a8c880>
inject_int(-1)
inject_big(add(project_big(explicate_38),project_big(explicate_39)))
inject_int(explicate_40+explicate_41)
<ast.Name object at 0x7f00c7a8c970>
inject_big(add(project_big(explicate_42),project_big(explicate_43)))
inject_int(explicate_44+explicate_45)
<ast.Name object at 0x7f00c7a8cb50>
<ast.Constant object at 0x7f00c7a43fa0>
inject_big(add(project_big(explicate_46),project_big(explicate_47)))
inject_int(explicate_48+explicate_49)
<ast.Name object at 0x7f00c7a8cb80>
