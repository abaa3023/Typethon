Illegal character ':'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='climb', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='fall', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='peak', ctx=Store())],
            value=Constant(value=40)),
        While(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='fall', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Name(id='peak', ctx=Load())])],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Name(id='climb', ctx=Store())],
                    value=BinOp(
                        left=Name(id='fall', ctx=Load()),
                        op=Add(),
                        right=Constant(value=2))),
                Assign(
                    targets=[
                        Name(id='fall', ctx=Store())],
                    value=BinOp(
                        left=Name(id='climb', ctx=Load()),
                        op=Add(),
                        right=UnaryOp(
                            op=USub(),
                            operand=Constant(value=1))))],
            orelse=[])],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='climb', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='fall', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='peak', ctx=Store())],
            value=Constant(value=40)),
        Expr(
            value=Name(id='while', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='fall', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Name(id='peak', ctx=Load())])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='climb', ctx=Store())],
            value=BinOp(
                left=Name(id='fall', ctx=Load()),
                op=Add(),
                right=Constant(value=2))),
        Assign(
            targets=[
                Name(id='fall', ctx=Store())],
            value=BinOp(
                left=Name(id='climb', ctx=Load()),
                op=Add(),
                right=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))))],
    type_ignores=[])
--------------Original code----------------
climb = 2
fall = 1
peak = 40
while int(fall != peak):
    climb = fall + 2
    fall = climb + -1

Module(
     body=[
          Assign(
               targets=[
                    Name(id='climb', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='fall', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='peak', ctx=Store())],
               value=Constant(value=40)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='fall', ctx=Load()),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Name(id='peak', ctx=Load())])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='climb', ctx=Store())],
               value=BinOp(
                    left=Name(id='fall', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Assign(
               targets=[
                    Name(id='fall', ctx=Store())],
               value=BinOp(
                    left=Name(id='climb', ctx=Load()),
                    op=Add(),
                    right=UnaryOp(
                         op=USub(),
                         operand=Constant(value=1))))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='climb', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='fall', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='peak', ctx=Store())],
               value=Constant(value=40)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Compare(
                    left=Name(id='fall', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Name(id='peak', ctx=Load())])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp1', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=BinOp(
                    left=Name(id='fall', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Assign(
               targets=[
                    Name(id='climb', ctx=Store())],
               value=Name(id='new_temp2', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=BinOp(
                    left=Name(id='climb', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp3', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='fall', ctx=Store())],
               value=Name(id='new_temp4', ctx=Load()))],
     type_ignores=[])
--------------Code after flattening-------
climb = 2
fall = 1
peak = 40
while
new_temp0 = fall != peak
new_temp1 = new_temp0
int(new_temp1)
new_temp2 = fall + 2
climb = new_temp2
new_temp3 = -1
new_temp4 = climb + new_temp3
fall = new_temp4
<ast.Constant object at 0x7f0611458280>
<ast.Constant object at 0x7f0611458670>
<ast.Constant object at 0x7f06114580a0>
inject_bool(not_equal(project_big(explicate_5),project_big(explicate_6)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_7!=explicate_8)
<ast.Name object at 0x7f061145a590>
inject_big(add(project_big(explicate_9),project_big(explicate_10)))
inject_int(explicate_11+explicate_12)
<ast.Name object at 0x7f061145a3e0>
inject_int(-1)
inject_big(add(project_big(explicate_13),project_big(explicate_14)))
inject_int(explicate_15+explicate_16)
<ast.Name object at 0x7f061145a650>
