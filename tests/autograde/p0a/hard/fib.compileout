Illegal character ':'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='n1', ctx=Store())],
            value=Constant(value=0)),
        Assign(
            targets=[
                Name(id='n2', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='count', ctx=Store())],
            value=Constant(value=0)),
        While(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='count', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=10)])],
                keywords=[]),
            body=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Name(id='n1', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='nth', ctx=Store())],
                    value=BinOp(
                        left=Name(id='n1', ctx=Load()),
                        op=Add(),
                        right=Name(id='n2', ctx=Load()))),
                Assign(
                    targets=[
                        Name(id='n1', ctx=Store())],
                    value=Name(id='n2', ctx=Load())),
                Assign(
                    targets=[
                        Name(id='n2', ctx=Store())],
                    value=Name(id='nth', ctx=Load())),
                Assign(
                    targets=[
                        Name(id='count', ctx=Store())],
                    value=BinOp(
                        left=Name(id='count', ctx=Load()),
                        op=Add(),
                        right=Constant(value=1)))],
            orelse=[])],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='n1', ctx=Store())],
            value=Constant(value=0)),
        Assign(
            targets=[
                Name(id='n2', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='count', ctx=Store())],
            value=Constant(value=0)),
        Expr(
            value=Name(id='while', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='count', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=10)])],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='n1', ctx=Load())],
                keywords=[])),
        Assign(
            targets=[
                Name(id='nth', ctx=Store())],
            value=BinOp(
                left=Name(id='n1', ctx=Load()),
                op=Add(),
                right=Name(id='n2', ctx=Load()))),
        Assign(
            targets=[
                Name(id='n1', ctx=Store())],
            value=Name(id='n2', ctx=Load())),
        Assign(
            targets=[
                Name(id='n2', ctx=Store())],
            value=Name(id='nth', ctx=Load())),
        Assign(
            targets=[
                Name(id='count', ctx=Store())],
            value=BinOp(
                left=Name(id='count', ctx=Load()),
                op=Add(),
                right=Constant(value=1)))],
    type_ignores=[])
--------------Original code----------------
n1 = 0
n2 = 1
count = 0
while int(count != 10):
  print(n1)
  nth = n1 + n2
  n1 = n2
  n2 = nth
  count = count + 1

Module(
     body=[
          Assign(
               targets=[
                    Name(id='n1', ctx=Store())],
               value=Constant(value=0)),
          Assign(
               targets=[
                    Name(id='n2', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='count', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='count', ctx=Load()),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Constant(value=10)])],
                    keywords=[])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='n1', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='nth', ctx=Store())],
               value=BinOp(
                    left=Name(id='n1', ctx=Load()),
                    op=Add(),
                    right=Name(id='n2', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='n1', ctx=Store())],
               value=Name(id='n2', ctx=Load())),
          Assign(
               targets=[
                    Name(id='n2', ctx=Store())],
               value=Name(id='nth', ctx=Load())),
          Assign(
               targets=[
                    Name(id='count', ctx=Store())],
               value=BinOp(
                    left=Name(id='count', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1)))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='n1', ctx=Store())],
               value=Constant(value=0)),
          Assign(
               targets=[
                    Name(id='n2', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='count', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Compare(
                    left=Name(id='count', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Constant(value=10)])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp1', ctx=Load())],
                    keywords=[])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='n1', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=BinOp(
                    left=Name(id='n1', ctx=Load()),
                    op=Add(),
                    right=Name(id='n2', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='nth', ctx=Store())],
               value=Name(id='new_temp2', ctx=Load())),
          Assign(
               targets=[
                    Name(id='n1', ctx=Store())],
               value=Name(id='n2', ctx=Load())),
          Assign(
               targets=[
                    Name(id='n2', ctx=Store())],
               value=Name(id='nth', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=BinOp(
                    left=Name(id='count', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='count', ctx=Store())],
               value=Name(id='new_temp3', ctx=Load()))],
     type_ignores=[])
--------------Code after flattening-------
n1 = 0
n2 = 1
count = 0
while
new_temp0 = count != 10
new_temp1 = new_temp0
int(new_temp1)
print(n1)
new_temp2 = n1 + n2
nth = new_temp2
n1 = n2
n2 = nth
new_temp3 = count + 1
count = new_temp3
<ast.Constant object at 0x7efc4d945f00>
<ast.Constant object at 0x7efc4d945ed0>
<ast.Constant object at 0x7efc4d945ea0>
inject_bool(not_equal(project_big(explicate_4),project_big(explicate_5)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_6!=explicate_7)
<ast.Name object at 0x7efc4d946e00>
inject_big(add(project_big(explicate_8),project_big(explicate_9)))
inject_int(explicate_10+explicate_11)
<ast.Name object at 0x7efc4d946c50>
<ast.Name object at 0x7efc4d9467d0>
<ast.Name object at 0x7efc4d946860>
inject_big(add(project_big(explicate_12),project_big(explicate_13)))
inject_int(explicate_14+explicate_15)
<ast.Name object at 0x7efc4d946ec0>
