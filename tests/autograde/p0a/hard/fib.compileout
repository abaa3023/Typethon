Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at 'int'
Illegal character ' '
Illegal character ' '
Syntax error at ':'
Syntax error at '  '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at '  '
Illegal character ' '
Illegal character ' '
Syntax error at '  '
Illegal character ' '
Illegal character ' '
Syntax error at '  '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='n1', ctx=Store())],
            value=Constant(value=0)),
        Assign(
            targets=[
                Name(id='n2', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='count', ctx=Store())],
            value=Constant(value=0)),
        While(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='count', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=10)])],
                keywords=[]),
            body=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Name(id='n1', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='nth', ctx=Store())],
                    value=BinOp(
                        left=Name(id='n1', ctx=Load()),
                        op=Add(),
                        right=Name(id='n2', ctx=Load()))),
                Assign(
                    targets=[
                        Name(id='n1', ctx=Store())],
                    value=Name(id='n2', ctx=Load())),
                Assign(
                    targets=[
                        Name(id='n2', ctx=Store())],
                    value=Name(id='nth', ctx=Load())),
                Assign(
                    targets=[
                        Name(id='count', ctx=Store())],
                    value=BinOp(
                        left=Name(id='count', ctx=Load()),
                        op=Add(),
                        right=Constant(value=1)))],
            orelse=[])],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='count', ctx=Store())],
            value=BinOp(
                left=Name(id='count', ctx=Load()),
                op=Add(),
                right=Constant(value=1)))],
    type_ignores=[])
--------------Original code----------------
n1 = 0
n2 = 1
count = 0
while int(count != 10):
  print(n1)
  nth = n1 + n2
  n1 = n2
  n2 = nth
  count = count + 1

Module(
     body=[
          Assign(
               targets=[
                    Name(id='count', ctx=Store())],
               value=BinOp(
                    left=Name(id='count', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1)))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=BinOp(
                    left=Name(id='count', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='count', ctx=Store())],
               value=Name(id='new_temp0', ctx=Load()))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = count + 1
count = new_temp0
inject_big(add(project_big(explicate_1),project_big(explicate_2)))
inject_int(explicate_3+explicate_4)
<ast.Name object at 0x7f713bb8aef0>

explicate_1 = count
explicate_2 = inject_int(1)
if(is_big(explicate_1)):
	if(is_big(explicate_2)):
		new_temp0 = inject_big(add(project_big(explicate_1),project_big(explicate_2)))
else:
	if(is_big(explicate_2)):
		error_pyobj(0)
	else:
		if(is_int(explicate_1)):
			explicate_3 = project_int(explicate_1)
		else:
			explicate_3 = project_bool(explicate_1)
		if(is_int(explicate_2)):
			explicate_4 = project_int(explicate_2)
		else:
			explicate_4 = project_bool(explicate_2)
		new_temp0 = inject_int(explicate_3+explicate_4)
count = new_temp0
--------------Explicate code-------
explicate_1 = count
explicate_2 = inject_int(1)
if is_big(explicate_1):
    if is_big(explicate_2):
        new_temp0 = inject_big(add(project_big(explicate_1), project_big(explicate_2)))
elif is_big(explicate_2):
    error_pyobj(0)
else:
    if is_int(explicate_1):
        explicate_3 = project_int(explicate_1)
    else:
        explicate_3 = project_bool(explicate_1)
    if is_int(explicate_2):
        explicate_4 = project_int(explicate_2)
    else:
        explicate_4 = project_bool(explicate_2)
    new_temp0 = inject_int(explicate_3 + explicate_4)
count = new_temp0


--- explicated flattened python ---
explicate_1 = count
new_temp5 = inject_int(1)
explicate_2 = new_temp5
new_temp6 = is_big(explicate_1)
if new_temp6:
    new_temp7 = is_big(explicate_2)
    if new_temp7:
        new_temp8 = project_big(explicate_1)
        new_temp9 = project_big(explicate_2)
        new_temp10 = add(new_temp8, new_temp9)
        new_temp11 = inject_big(new_temp10)
        new_temp0 = new_temp11
else:
    new_temp12 = is_big(explicate_2)
    if new_temp12:
        error_pyobj(0)
    else:
        new_temp13 = is_int(explicate_1)
        if new_temp13:
            new_temp14 = project_int(explicate_1)
            explicate_3 = new_temp14
        else:
            new_temp15 = project_bool(explicate_1)
            explicate_3 = new_temp15
        new_temp16 = is_int(explicate_2)
        if new_temp16:
            new_temp17 = project_int(explicate_2)
            explicate_4 = new_temp17
        else:
            new_temp18 = project_bool(explicate_2)
            explicate_4 = new_temp18
        new_temp19 = explicate_3 + explicate_4
        new_temp20 = inject_int(new_temp19)
        new_temp0 = new_temp20
count = new_temp0


--- x86 IR ---
movl  count ,  explicate_1
call  inject_int 1
movl  eax ,  new_temp5
movl  new_temp5 ,  explicate_2
call  is_big explicate_1
movl  eax ,  new_temp6
if1
cmp 0, new_temp6
je else1
then1
call  is_big explicate_2
movl  eax ,  new_temp7
if2
cmp 0, new_temp7
je end if2
then2
call  project_big explicate_1
movl  eax ,  new_temp8
call  project_big explicate_2
movl  eax ,  new_temp9
call  add new_temp8,new_temp9
movl  eax ,  new_temp10
call  inject_big new_temp10
movl  eax ,  new_temp11
movl  new_temp11 ,  new_temp0
end if2
else1
call  is_big explicate_2
movl  eax ,  new_temp12
if2
cmp 0, new_temp12
je else2
then2
call  error_pyobj 0
else2
call  is_int explicate_1
movl  eax ,  new_temp13
if3
cmp 0, new_temp13
je else3
then3
call  project_int explicate_1
movl  eax ,  new_temp14
movl  new_temp14 ,  explicate_3
else3
call  project_bool explicate_1
movl  eax ,  new_temp15
movl  new_temp15 ,  explicate_3
end if3
call  is_int explicate_2
movl  eax ,  new_temp16
if4
cmp 0, new_temp16
je else4
then4
call  project_int explicate_2
movl  eax ,  new_temp17
movl  new_temp17 ,  explicate_4
else4
call  project_bool explicate_2
movl  eax ,  new_temp18
movl  new_temp18 ,  explicate_4
end if4
movl  explicate_3 ,  new_temp19
addl  explicate_4 ,  new_temp19
call  inject_int new_temp19
movl  eax ,  new_temp20
movl  new_temp20 ,  new_temp0
end if2
end if1
movl  new_temp0 ,  count


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp0': {'new_temp5', 'ecx', 'eax', 'new_temp12', 'new_temp7', 'edx', 'new_temp6', 'explicate_2', 'explicate_1'}, 'explicate_1': {'new_temp0', 'new_temp5', 'ecx', 'eax', 'new_temp12', 'new_temp13', 'new_temp7', 'edx', 'new_temp6', 'explicate_2'}, 'eax': {'new_temp0', 'explicate_3', 'new_temp8', 'explicate_2', 'explicate_1'}, 'ecx': {'new_temp0', 'explicate_3', 'new_temp8', 'explicate_2', 'explicate_1'}, 'edx': {'new_temp0', 'explicate_3', 'new_temp8', 'explicate_2', 'explicate_1'}, 'new_temp5': {'new_temp0', 'explicate_1'}, 'explicate_2': {'new_temp14', 'new_temp0', 'new_temp15', 'ecx', 'eax', 'explicate_3', 'new_temp16', 'new_temp12', 'new_temp13', 'new_temp7', 'edx', 'new_temp8', 'new_temp6', 'explicate_1'}, 'new_temp6': {'new_temp0', 'explicate_2', 'explicate_1'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp7': {'new_temp0', 'explicate_2', 'explicate_1'}, 'new_temp12': {'explicate_2', 'new_temp0', 'explicate_1'}, 'new_temp8': {'ecx', 'eax', 'edx', 'explicate_2', 'new_temp9'}, 'new_temp9': {'new_temp8'}, 'new_temp10': set(), 'new_temp11': set(), 'count': set(), 'new_temp13': {'explicate_2', 'explicate_1'}, 'new_temp14': {'explicate_2'}, 'explicate_3': {'ecx', 'eax', 'explicate_4', 'new_temp16', 'new_temp17', 'new_temp18', 'edx', 'explicate_2'}, 'new_temp15': {'explicate_2'}, 'new_temp16': {'explicate_3', 'explicate_2'}, 'new_temp17': {'explicate_3'}, 'explicate_4': {'explicate_3', 'new_temp19'}, 'new_temp18': {'explicate_3'}, 'new_temp19': {'explicate_4'}, 'new_temp20': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'explicate_1': 4, 'explicate_2': 5, 'new_temp0': 6, 'new_temp8': 4, 'explicate_3': 4, 'new_temp6': 1, 'new_temp7': 1, 'new_temp12': 1, 'new_temp16': 1, 'new_temp13': 1, 'new_temp5': 1, 'new_temp9': 1, 'new_temp17': 1, 'new_temp18': 1, 'explicate_4': 1, 'new_temp19': 2, 'new_temp15': 1, 'new_temp14': 1, 'new_temp20': 1, 'new_temp10': 1, 'new_temp11': 1, 'count': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'explicate_1': 'edi', 'explicate_2': 'ebx', 'new_temp0': 'esi', 'new_temp8': 'edi', 'explicate_3': 'edi', 'new_temp6': 'eax', 'new_temp7': 'eax', 'new_temp12': 'eax', 'new_temp16': 'eax', 'new_temp13': 'eax', 'new_temp5': 'eax', 'new_temp9': 'eax', 'new_temp17': 'eax', 'new_temp18': 'eax', 'explicate_4': 'eax', 'new_temp19': 'ecx', 'new_temp15': 'eax', 'new_temp14': 'eax', 'new_temp20': 'eax', 'new_temp10': 'eax', 'new_temp11': 'eax', 'count': 'eax'}
count
explicate_1
new_temp5
new_temp5
explicate_2
explicate_1
new_temp6
new_temp6
explicate_2
new_temp7
new_temp7
explicate_1
new_temp8
explicate_2
new_temp9
new_temp9
new_temp8
new_temp10
new_temp10
new_temp11
new_temp11
new_temp0
explicate_2
new_temp12
new_temp12
explicate_1
new_temp13
new_temp13
explicate_1
new_temp14
new_temp14
explicate_3
explicate_1
new_temp15
new_temp15
explicate_3
explicate_2
new_temp16
new_temp16
explicate_2
new_temp17
new_temp17
explicate_4
explicate_2
new_temp18
new_temp18
explicate_4
explicate_3
new_temp19
explicate_4
new_temp19
new_temp19
new_temp20
new_temp20
new_temp0
new_temp0
count
