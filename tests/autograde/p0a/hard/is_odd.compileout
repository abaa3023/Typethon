Illegal character ':'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='is_odd', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Call(
                func=Name(id='eval', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='input', ctx=Load()),
                        args=[],
                        keywords=[])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='idx', ctx=Store())],
            value=Constant(value=1)),
        While(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='idx', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Name(id='x', ctx=Load())])],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Name(id='is_odd', ctx=Store())],
                    value=Call(
                        func=Name(id='int', ctx=Load()),
                        args=[
                            UnaryOp(
                                op=Not(),
                                operand=Name(id='is_odd', ctx=Load()))],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='idx', ctx=Store())],
                    value=BinOp(
                        left=Name(id='idx', ctx=Load()),
                        op=Add(),
                        right=Constant(value=1)))],
            orelse=[]),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='is_odd', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='is_odd', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Call(
                func=Name(id='eval', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='input', ctx=Load()),
                        args=[],
                        keywords=[])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='idx', ctx=Store())],
            value=Constant(value=1)),
        Expr(
            value=Name(id='while', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='idx', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Name(id='x', ctx=Load())])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='is_odd', ctx=Store())],
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    UnaryOp(
                        op=Not(),
                        operand=Name(id='is_odd', ctx=Load()))],
                keywords=[])),
        Assign(
            targets=[
                Name(id='idx', ctx=Store())],
            value=BinOp(
                left=Name(id='idx', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='is_odd', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
is_odd = 1
x = eval(input())
idx = 1
while int(idx != x):
    is_odd = int(not is_odd)
    idx = idx + 1
print(is_odd)

Module(
     body=[
          Assign(
               targets=[
                    Name(id='is_odd', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='idx', ctx=Store())],
               value=Constant(value=1)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='idx', ctx=Load()),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Name(id='x', ctx=Load())])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='is_odd', ctx=Store())],
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         UnaryOp(
                              op=Not(),
                              operand=Name(id='is_odd', ctx=Load()))],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='idx', ctx=Store())],
               value=BinOp(
                    left=Name(id='idx', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='is_odd', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='is_odd', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp0', ctx=Load())),
          Assign(
               targets=[
                    Name(id='idx', ctx=Store())],
               value=Constant(value=1)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Compare(
                    left=Name(id='idx', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Name(id='x', ctx=Load())])),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=Name(id='new_temp1', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp2', ctx=Load())],
                    keywords=[])),
          If(
               test=Name(id='is_odd', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp3', ctx=Store())],
                         value=Constant(value=False))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp3', ctx=Store())],
                         value=Constant(value=True))]),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp3', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='is_odd', ctx=Store())],
               value=Name(id='new_temp4', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp5', ctx=Store())],
               value=BinOp(
                    left=Name(id='idx', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='idx', ctx=Store())],
               value=Name(id='new_temp5', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='is_odd', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
is_odd = 1
new_temp0 = eval(input())
x = new_temp0
idx = 1
while
new_temp1 = idx != x
new_temp2 = new_temp1
int(new_temp2)
if is_odd:
    new_temp3 = False
else:
    new_temp3 = True
new_temp4 = int(new_temp3)
is_odd = new_temp4
new_temp5 = idx + 1
idx = new_temp5
print(is_odd)
<ast.Constant object at 0x7f921bbb5ed0>
eval(input())
<ast.Name object at 0x7f921bbb6b90>
<ast.Constant object at 0x7f921bbb6050>
inject_bool(not_equal(project_big(explicate_6),project_big(explicate_7)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_8!=explicate_9)
<ast.Name object at 0x7f921bbb6e30>
<ast.Constant object at 0x7f921bbb6e90>
<ast.Constant object at 0x7f921bbb6f50>
inject_int(project_bool(explicate_10))
<ast.Name object at 0x7f921bbb6bc0>
inject_big(add(project_big(explicate_11),project_big(explicate_12)))
inject_int(explicate_13+explicate_14)
<ast.Name object at 0x7f921bbb7070>
