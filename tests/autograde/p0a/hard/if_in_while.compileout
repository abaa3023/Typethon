Illegal character ':'
Illegal character ':'
Illegal character ':'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=10)),
        While(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=23)])],
                keywords=[]),
            body=[
                If(
                    test=Call(
                        func=Name(id='int', ctx=Load()),
                        args=[
                            Compare(
                                left=BinOp(
                                    left=Name(id='x', ctx=Load()),
                                    op=Add(),
                                    right=UnaryOp(
                                        op=USub(),
                                        operand=Name(id='y', ctx=Load()))),
                                ops=[
                                    NotEq()],
                                comparators=[
                                    Constant(value=12)])],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='x', ctx=Store())],
                            value=BinOp(
                                left=Name(id='x', ctx=Load()),
                                op=Add(),
                                right=Name(id='y', ctx=Load())))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='x', ctx=Store())],
                            value=BinOp(
                                left=Name(id='x', ctx=Load()),
                                op=Add(),
                                right=Constant(value=1)))])],
            orelse=[])],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=10)),
        Expr(
            value=Name(id='while', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=23)])],
                keywords=[])),
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=BinOp(
                            left=Name(id='x', ctx=Load()),
                            op=Add(),
                            right=UnaryOp(
                                op=USub(),
                                operand=Name(id='y', ctx=Load()))),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=12)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=Name(id='y', ctx=Load()))),
        Expr(
            value=Name(id='else', ctx=Load())),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=Constant(value=1)))],
    type_ignores=[])
--------------Original code----------------
x = 2
y = 10
while int(x != 23):
    if int(x + -y != 12):
        x = x + y
    else:
        x = x + 1

Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=10)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='x', ctx=Load()),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Constant(value=23)])],
                    keywords=[])),
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=BinOp(
                                   left=Name(id='x', ctx=Load()),
                                   op=Add(),
                                   right=UnaryOp(
                                        op=USub(),
                                        operand=Name(id='y', ctx=Load()))),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Constant(value=12)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Name(id='y', ctx=Load()))),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1)))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=10)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Compare(
                    left=Name(id='x', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Constant(value=23)])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp1', ctx=Load())],
                    keywords=[])),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Name(id='y', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp2', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=Compare(
                    left=Name(id='new_temp3', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Constant(value=12)])),
          Assign(
               targets=[
                    Name(id='new_temp5', ctx=Store())],
               value=Name(id='new_temp4', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp5', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp6', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Name(id='y', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp6', ctx=Load())),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp7', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp7', ctx=Load()))],
     type_ignores=[])
--------------Code after flattening-------
x = 2
y = 10
while
new_temp0 = x != 23
new_temp1 = new_temp0
int(new_temp1)
if
new_temp2 = -y
new_temp3 = x + new_temp2
new_temp4 = new_temp3 != 12
new_temp5 = new_temp4
int(new_temp5)
new_temp6 = x + y
x = new_temp6
else
new_temp7 = x + 1
x = new_temp7
<ast.Constant object at 0x7f9fbd401e40>
<ast.Constant object at 0x7f9fbd401e10>
inject_bool(not_equal(project_big(explicate_8),project_big(explicate_9)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_10!=explicate_11)
<ast.Name object at 0x7f9fbd402dd0>
inject_int(-project_int(y))
inject_int(-project_bool(y))
inject_big(add(project_big(explicate_12),project_big(explicate_13)))
inject_int(explicate_14+explicate_15)
inject_bool(not_equal(project_big(explicate_16),project_big(explicate_17)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_18!=explicate_19)
<ast.Name object at 0x7f9fbd403130>
inject_big(add(project_big(explicate_20),project_big(explicate_21)))
inject_int(explicate_22+explicate_23)
<ast.Name object at 0x7f9fbd402500>
inject_big(add(project_big(explicate_24),project_big(explicate_25)))
inject_int(explicate_26+explicate_27)
<ast.Name object at 0x7f9fbd402170>
