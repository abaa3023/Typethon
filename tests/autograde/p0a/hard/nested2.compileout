Illegal character '!'
Syntax error at '='
Illegal character ':'
Syntax error at 'or'
Syntax error at ')'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Syntax error at 'or'
Syntax error at ')'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='y', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=2)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Constant(value=2))),
        Expr(
            value=Name(id='else', ctx=Load())),
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='y', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=1)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Constant(value=3))),
        Expr(
            value=Name(id='else', ctx=Load())),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Expr(
            value=Name(id='else', ctx=Load())),
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='y', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=2)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Constant(value=3))),
        Expr(
            value=Name(id='else', ctx=Load())),
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='y', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=1)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Expr(
            value=Name(id='else', ctx=Load())),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Constant(value=2))),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=BinOp(
                left=Name(id='y', ctx=Load()),
                op=Add(),
                right=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1)))),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='z', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = 1
y = 2
z = 0
loop_condition = 1

while int(x != 5):
    if (int(x == 1) or int(x == 4)):
        if int(y == 2):
            z = z + 1
        else:
            if int(y == 1):
                z = z + 2
            else:
                z = z + 3
    else:
        if (int(x == 2) or int(x == 5)):
            if int(y == 2):
                z = z + 2
            else:
                if int(y == 1):
                    z = z + 3
                else:
                    z = z + 1
        else:
            if int(y == 2):
                z = z + 3
            else:
                if int(y == 1):
                    z = z + 1
                else:
                    z = z + 2
            
    x = x + 1
    y = y + -1
    
print(z)


Module(
     body=[
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='y', ctx=Load()),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Constant(value=2)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='y', ctx=Load()),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Constant(value=1)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=3))),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='y', ctx=Load()),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Constant(value=2)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=3))),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='y', ctx=Load()),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Constant(value=1)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=BinOp(
                    left=Name(id='y', ctx=Load()),
                    op=Add(),
                    right=UnaryOp(
                         op=USub(),
                         operand=Constant(value=1)))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Compare(
                    left=Name(id='y', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Constant(value=2)])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp1', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp2', ctx=Load())),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=Compare(
                    left=Name(id='y', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Constant(value=1)])),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=Name(id='new_temp3', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp4', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp5', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=3))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp5', ctx=Load())),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp6', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp6', ctx=Load())),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp7', ctx=Store())],
               value=Compare(
                    left=Name(id='y', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Constant(value=2)])),
          Assign(
               targets=[
                    Name(id='new_temp8', ctx=Store())],
               value=Name(id='new_temp7', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp8', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp9', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=3))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp9', ctx=Load())),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp10', ctx=Store())],
               value=Compare(
                    left=Name(id='y', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Constant(value=1)])),
          Assign(
               targets=[
                    Name(id='new_temp11', ctx=Store())],
               value=Name(id='new_temp10', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp11', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp12', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp12', ctx=Load())),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp13', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp13', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp14', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp14', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp15', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='new_temp16', ctx=Store())],
               value=BinOp(
                    left=Name(id='y', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp15', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='new_temp16', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
if
new_temp0 = y == 2
new_temp1 = new_temp0
int(new_temp1)
new_temp2 = z + 2
z = new_temp2
else
if
new_temp3 = y == 1
new_temp4 = new_temp3
int(new_temp4)
new_temp5 = z + 3
z = new_temp5
else
new_temp6 = z + 1
z = new_temp6
else
if
new_temp7 = y == 2
new_temp8 = new_temp7
int(new_temp8)
new_temp9 = z + 3
z = new_temp9
else
if
new_temp10 = y == 1
new_temp11 = new_temp10
int(new_temp11)
new_temp12 = z + 1
z = new_temp12
else
new_temp13 = z + 2
z = new_temp13
new_temp14 = x + 1
x = new_temp14
new_temp15 = -1
new_temp16 = y + new_temp15
y = new_temp16
print(z)
inject_bool(equal(project_big(explicate_17),project_big(explicate_18)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_19==explicate_20)
<ast.Name object at 0x7f56eb1ebcd0>
inject_big(add(project_big(explicate_21),project_big(explicate_22)))
inject_int(explicate_23+explicate_24)
<ast.Name object at 0x7f56eb1ea560>
inject_bool(equal(project_big(explicate_25),project_big(explicate_26)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_27==explicate_28)
<ast.Name object at 0x7f56eb1fc0d0>
inject_big(add(project_big(explicate_29),project_big(explicate_30)))
inject_int(explicate_31+explicate_32)
<ast.Name object at 0x7f56eb1e9570>
inject_big(add(project_big(explicate_33),project_big(explicate_34)))
inject_int(explicate_35+explicate_36)
<ast.Name object at 0x7f56eb1fc340>
inject_bool(equal(project_big(explicate_37),project_big(explicate_38)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_39==explicate_40)
<ast.Name object at 0x7f56eb1fc610>
inject_big(add(project_big(explicate_41),project_big(explicate_42)))
inject_int(explicate_43+explicate_44)
<ast.Name object at 0x7f56eb1fc460>
inject_bool(equal(project_big(explicate_45),project_big(explicate_46)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_47==explicate_48)
<ast.Name object at 0x7f56eb1fc9d0>
inject_big(add(project_big(explicate_49),project_big(explicate_50)))
inject_int(explicate_51+explicate_52)
<ast.Name object at 0x7f56eb1fc820>
inject_big(add(project_big(explicate_53),project_big(explicate_54)))
inject_int(explicate_55+explicate_56)
<ast.Name object at 0x7f56eb1fcc40>
inject_big(add(project_big(explicate_57),project_big(explicate_58)))
inject_int(explicate_59+explicate_60)
<ast.Name object at 0x7f56eb1fcdc0>
inject_int(-1)
inject_big(add(project_big(explicate_61),project_big(explicate_62)))
inject_int(explicate_63+explicate_64)
<ast.Name object at 0x7f56eb1fd0c0>
