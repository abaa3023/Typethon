Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at 'int'
Illegal character ' '
Illegal character ' '
Syntax error at ':'
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at 'or'
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at ')'
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at 'else'
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at 'else'
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at '    '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at 'or'
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at ')'
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at 'else'
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at 'else'
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at '        '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at 'else'
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at 'else'
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at '            '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at '    '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Illegal character ' '
Syntax error at '    '
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=Constant(value=0)),
        Assign(
            targets=[
                Name(id='loop_condition', ctx=Store())],
            value=Constant(value=1)),
        While(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=5)])],
                keywords=[]),
            body=[
                If(
                    test=BoolOp(
                        op=Or(),
                        values=[
                            Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    Compare(
                                        left=Name(id='x', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=1)])],
                                keywords=[]),
                            Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    Compare(
                                        left=Name(id='x', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=4)])],
                                keywords=[])]),
                    body=[
                        If(
                            test=Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    Compare(
                                        left=Name(id='y', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=2)])],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='z', ctx=Store())],
                                    value=BinOp(
                                        left=Name(id='z', ctx=Load()),
                                        op=Add(),
                                        right=Constant(value=1)))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Compare(
                                                left=Name(id='y', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=1)])],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='z', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='z', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=2)))],
                                    orelse=[
                                        Assign(
                                            targets=[
                                                Name(id='z', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='z', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=3)))])])],
                    orelse=[
                        If(
                            test=BoolOp(
                                op=Or(),
                                values=[
                                    Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Compare(
                                                left=Name(id='x', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=2)])],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Compare(
                                                left=Name(id='x', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=5)])],
                                        keywords=[])]),
                            body=[
                                If(
                                    test=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Compare(
                                                left=Name(id='y', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=2)])],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='z', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='z', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=2)))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='int', ctx=Load()),
                                                args=[
                                                    Compare(
                                                        left=Name(id='y', ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Constant(value=1)])],
                                                keywords=[]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Name(id='z', ctx=Store())],
                                                    value=BinOp(
                                                        left=Name(id='z', ctx=Load()),
                                                        op=Add(),
                                                        right=Constant(value=3)))],
                                            orelse=[
                                                Assign(
                                                    targets=[
                                                        Name(id='z', ctx=Store())],
                                                    value=BinOp(
                                                        left=Name(id='z', ctx=Load()),
                                                        op=Add(),
                                                        right=Constant(value=1)))])])],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Compare(
                                                left=Name(id='y', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=2)])],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='z', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='z', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=3)))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='int', ctx=Load()),
                                                args=[
                                                    Compare(
                                                        left=Name(id='y', ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Constant(value=1)])],
                                                keywords=[]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Name(id='z', ctx=Store())],
                                                    value=BinOp(
                                                        left=Name(id='z', ctx=Load()),
                                                        op=Add(),
                                                        right=Constant(value=1)))],
                                            orelse=[
                                                Assign(
                                                    targets=[
                                                        Name(id='z', ctx=Store())],
                                                    value=BinOp(
                                                        left=Name(id='z', ctx=Load()),
                                                        op=Add(),
                                                        right=Constant(value=2)))])])])]),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=Constant(value=1))),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=BinOp(
                        left=Name(id='y', ctx=Load()),
                        op=Add(),
                        right=UnaryOp(
                            op=USub(),
                            operand=Constant(value=1))))],
            orelse=[]),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='z', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='z', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = 1
y = 2
z = 0
loop_condition = 1

while int(x != 5):
    if (int(x == 1) or int(x == 4)):
        if int(y == 2):
            z = z + 1
        else:
            if int(y == 1):
                z = z + 2
            else:
                z = z + 3
    else:
        if (int(x == 2) or int(x == 5)):
            if int(y == 2):
                z = z + 2
            else:
                if int(y == 1):
                    z = z + 3
                else:
                    z = z + 1
        else:
            if int(y == 2):
                z = z + 3
            else:
                if int(y == 1):
                    z = z + 1
                else:
                    z = z + 2
            
    x = x + 1
    y = y + -1
    
print(z)


Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
print(z)

print(z)
--------------Explicate code-------
print(z)


--- explicated flattened python ---
print(z)


--- x86 IR ---
call  print z


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'eax': set(), 'ecx': set(), 'edx': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {}
z
