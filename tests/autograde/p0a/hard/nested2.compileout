Syntax error at 'int'
Syntax error at ':'
Syntax error at 'or'
Syntax error at ')'
Syntax error at 'z'
Syntax error at 'else'
Syntax error at 'z'
Syntax error at 'else'
Syntax error at 'else'
Syntax error at 'or'
Syntax error at ')'
Syntax error at 'z'
Syntax error at 'else'
Syntax error at 'z'
Syntax error at 'else'
Syntax error at 'else'
Syntax error at 'z'
Syntax error at 'else'
Syntax error at 'z'
Syntax error at 'else'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=Constant(value=0)),
        Assign(
            targets=[
                Name(id='loop_condition', ctx=Store())],
            value=Constant(value=1)),
        While(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=5)])],
                keywords=[]),
            body=[
                If(
                    test=BoolOp(
                        op=Or(),
                        values=[
                            Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    Compare(
                                        left=Name(id='x', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=1)])],
                                keywords=[]),
                            Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    Compare(
                                        left=Name(id='x', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=4)])],
                                keywords=[])]),
                    body=[
                        If(
                            test=Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    Compare(
                                        left=Name(id='y', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=2)])],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='z', ctx=Store())],
                                    value=BinOp(
                                        left=Name(id='z', ctx=Load()),
                                        op=Add(),
                                        right=Constant(value=1)))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Compare(
                                                left=Name(id='y', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=1)])],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='z', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='z', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=2)))],
                                    orelse=[
                                        Assign(
                                            targets=[
                                                Name(id='z', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='z', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=3)))])])],
                    orelse=[
                        If(
                            test=BoolOp(
                                op=Or(),
                                values=[
                                    Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Compare(
                                                left=Name(id='x', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=2)])],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Compare(
                                                left=Name(id='x', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=5)])],
                                        keywords=[])]),
                            body=[
                                If(
                                    test=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Compare(
                                                left=Name(id='y', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=2)])],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='z', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='z', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=2)))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='int', ctx=Load()),
                                                args=[
                                                    Compare(
                                                        left=Name(id='y', ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Constant(value=1)])],
                                                keywords=[]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Name(id='z', ctx=Store())],
                                                    value=BinOp(
                                                        left=Name(id='z', ctx=Load()),
                                                        op=Add(),
                                                        right=Constant(value=3)))],
                                            orelse=[
                                                Assign(
                                                    targets=[
                                                        Name(id='z', ctx=Store())],
                                                    value=BinOp(
                                                        left=Name(id='z', ctx=Load()),
                                                        op=Add(),
                                                        right=Constant(value=1)))])])],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Compare(
                                                left=Name(id='y', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=2)])],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='z', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='z', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=3)))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='int', ctx=Load()),
                                                args=[
                                                    Compare(
                                                        left=Name(id='y', ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Constant(value=1)])],
                                                keywords=[]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Name(id='z', ctx=Store())],
                                                    value=BinOp(
                                                        left=Name(id='z', ctx=Load()),
                                                        op=Add(),
                                                        right=Constant(value=1)))],
                                            orelse=[
                                                Assign(
                                                    targets=[
                                                        Name(id='z', ctx=Store())],
                                                    value=BinOp(
                                                        left=Name(id='z', ctx=Load()),
                                                        op=Add(),
                                                        right=Constant(value=2)))])])])]),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=Constant(value=1))),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=BinOp(
                        left=Name(id='y', ctx=Load()),
                        op=Add(),
                        right=UnaryOp(
                            op=USub(),
                            operand=Constant(value=1))))],
            orelse=[]),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='z', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Constant(value=2))),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=BinOp(
                left=Name(id='y', ctx=Load()),
                op=Add(),
                right=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1)))),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='z', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = 1
y = 2
z = 0
loop_condition = 1

while int(x != 5):
    if (int(x == 1) or int(x == 4)):
        if int(y == 2):
            z = z + 1
        else:
            if int(y == 1):
                z = z + 2
            else:
                z = z + 3
    else:
        if (int(x == 2) or int(x == 5)):
            if int(y == 2):
                z = z + 2
            else:
                if int(y == 1):
                    z = z + 3
                else:
                    z = z + 1
        else:
            if int(y == 2):
                z = z + 3
            else:
                if int(y == 1):
                    z = z + 1
                else:
                    z = z + 2
            
    x = x + 1
    y = y + -1
    
print(z)


Module(
     body=[
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=BinOp(
                    left=Name(id='y', ctx=Load()),
                    op=Add(),
                    right=UnaryOp(
                         op=USub(),
                         operand=Constant(value=1)))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp0', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp1', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=BinOp(
                    left=Name(id='y', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp2', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='new_temp3', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = z + 2
z = new_temp0
new_temp1 = x + 1
x = new_temp1
new_temp2 = -1
new_temp3 = y + new_temp2
y = new_temp3
print(z)
inject_big(add(project_big(explicate_4),project_big(explicate_5)))
inject_int(explicate_6+explicate_7)
<ast.Name object at 0x7f1431db0970>
inject_big(add(project_big(explicate_8),project_big(explicate_9)))
inject_int(explicate_10+explicate_11)
<ast.Name object at 0x7f1431db0b20>
inject_int(-1)
inject_big(add(project_big(explicate_12),project_big(explicate_13)))
inject_int(explicate_14+explicate_15)
<ast.Name object at 0x7f1431db0c10>

explicate_4 = z
explicate_5 = inject_int(2)
if(is_big(explicate_4)):
	if(is_big(explicate_5)):
		new_temp0 = inject_big(add(project_big(explicate_4),project_big(explicate_5)))
else:
	if(is_big(explicate_5)):
		error_pyobj(0)
	else:
		if(is_int(explicate_4)):
			explicate_6 = project_int(explicate_4)
		else:
			explicate_6 = project_bool(explicate_4)
		if(is_int(explicate_5)):
			explicate_7 = project_int(explicate_5)
		else:
			explicate_7 = project_bool(explicate_5)
		new_temp0 = inject_int(explicate_6+explicate_7)
z = new_temp0
explicate_8 = x
explicate_9 = inject_int(1)
if(is_big(explicate_8)):
	if(is_big(explicate_9)):
		new_temp1 = inject_big(add(project_big(explicate_8),project_big(explicate_9)))
else:
	if(is_big(explicate_9)):
		error_pyobj(0)
	else:
		if(is_int(explicate_8)):
			explicate_10 = project_int(explicate_8)
		else:
			explicate_10 = project_bool(explicate_8)
		if(is_int(explicate_9)):
			explicate_11 = project_int(explicate_9)
		else:
			explicate_11 = project_bool(explicate_9)
		new_temp1 = inject_int(explicate_10+explicate_11)
x = new_temp1
new_temp2 = inject_int(-1)
explicate_12 = y
explicate_13 = new_temp2
if(is_big(explicate_12)):
	if(is_big(explicate_13)):
		new_temp3 = inject_big(add(project_big(explicate_12),project_big(explicate_13)))
else:
	if(is_big(explicate_13)):
		error_pyobj(0)
	else:
		if(is_int(explicate_12)):
			explicate_14 = project_int(explicate_12)
		else:
			explicate_14 = project_bool(explicate_12)
		if(is_int(explicate_13)):
			explicate_15 = project_int(explicate_13)
		else:
			explicate_15 = project_bool(explicate_13)
		new_temp3 = inject_int(explicate_14+explicate_15)
y = new_temp3
print(z)
--------------Explicate code-------
explicate_4 = z
explicate_5 = inject_int(2)
if is_big(explicate_4):
    if is_big(explicate_5):
        new_temp0 = inject_big(add(project_big(explicate_4), project_big(explicate_5)))
elif is_big(explicate_5):
    error_pyobj(0)
else:
    if is_int(explicate_4):
        explicate_6 = project_int(explicate_4)
    else:
        explicate_6 = project_bool(explicate_4)
    if is_int(explicate_5):
        explicate_7 = project_int(explicate_5)
    else:
        explicate_7 = project_bool(explicate_5)
    new_temp0 = inject_int(explicate_6 + explicate_7)
z = new_temp0
explicate_8 = x
explicate_9 = inject_int(1)
if is_big(explicate_8):
    if is_big(explicate_9):
        new_temp1 = inject_big(add(project_big(explicate_8), project_big(explicate_9)))
elif is_big(explicate_9):
    error_pyobj(0)
else:
    if is_int(explicate_8):
        explicate_10 = project_int(explicate_8)
    else:
        explicate_10 = project_bool(explicate_8)
    if is_int(explicate_9):
        explicate_11 = project_int(explicate_9)
    else:
        explicate_11 = project_bool(explicate_9)
    new_temp1 = inject_int(explicate_10 + explicate_11)
x = new_temp1
new_temp2 = inject_int(-1)
explicate_12 = y
explicate_13 = new_temp2
if is_big(explicate_12):
    if is_big(explicate_13):
        new_temp3 = inject_big(add(project_big(explicate_12), project_big(explicate_13)))
elif is_big(explicate_13):
    error_pyobj(0)
else:
    if is_int(explicate_12):
        explicate_14 = project_int(explicate_12)
    else:
        explicate_14 = project_bool(explicate_12)
    if is_int(explicate_13):
        explicate_15 = project_int(explicate_13)
    else:
        explicate_15 = project_bool(explicate_13)
    new_temp3 = inject_int(explicate_14 + explicate_15)
y = new_temp3
print(z)


--- explicated flattened python ---
explicate_4 = z
new_temp16 = inject_int(2)
explicate_5 = new_temp16
new_temp17 = is_big(explicate_4)
if new_temp17:
    new_temp18 = is_big(explicate_5)
    if new_temp18:
        new_temp19 = project_big(explicate_4)
        new_temp20 = project_big(explicate_5)
        new_temp21 = add(new_temp19, new_temp20)
        new_temp22 = inject_big(new_temp21)
        new_temp0 = new_temp22
else:
    new_temp23 = is_big(explicate_5)
    if new_temp23:
        error_pyobj(0)
    else:
        new_temp24 = is_int(explicate_4)
        if new_temp24:
            new_temp25 = project_int(explicate_4)
            explicate_6 = new_temp25
        else:
            new_temp26 = project_bool(explicate_4)
            explicate_6 = new_temp26
        new_temp27 = is_int(explicate_5)
        if new_temp27:
            new_temp28 = project_int(explicate_5)
            explicate_7 = new_temp28
        else:
            new_temp29 = project_bool(explicate_5)
            explicate_7 = new_temp29
        new_temp30 = explicate_6 + explicate_7
        new_temp31 = inject_int(new_temp30)
        new_temp0 = new_temp31
z = new_temp0
explicate_8 = x
new_temp32 = inject_int(1)
explicate_9 = new_temp32
new_temp33 = is_big(explicate_8)
if new_temp33:
    new_temp34 = is_big(explicate_9)
    if new_temp34:
        new_temp35 = project_big(explicate_8)
        new_temp36 = project_big(explicate_9)
        new_temp37 = add(new_temp35, new_temp36)
        new_temp38 = inject_big(new_temp37)
        new_temp1 = new_temp38
else:
    new_temp39 = is_big(explicate_9)
    if new_temp39:
        error_pyobj(0)
    else:
        new_temp40 = is_int(explicate_8)
        if new_temp40:
            new_temp41 = project_int(explicate_8)
            explicate_10 = new_temp41
        else:
            new_temp42 = project_bool(explicate_8)
            explicate_10 = new_temp42
        new_temp43 = is_int(explicate_9)
        if new_temp43:
            new_temp44 = project_int(explicate_9)
            explicate_11 = new_temp44
        else:
            new_temp45 = project_bool(explicate_9)
            explicate_11 = new_temp45
        new_temp46 = explicate_10 + explicate_11
        new_temp47 = inject_int(new_temp46)
        new_temp1 = new_temp47
x = new_temp1
new_temp48 = -1
new_temp49 = inject_int(new_temp48)
new_temp2 = new_temp49
explicate_12 = y
explicate_13 = new_temp2
new_temp50 = is_big(explicate_12)
if new_temp50:
    new_temp51 = is_big(explicate_13)
    if new_temp51:
        new_temp52 = project_big(explicate_12)
        new_temp53 = project_big(explicate_13)
        new_temp54 = add(new_temp52, new_temp53)
        new_temp55 = inject_big(new_temp54)
        new_temp3 = new_temp55
else:
    new_temp56 = is_big(explicate_13)
    if new_temp56:
        error_pyobj(0)
    else:
        new_temp57 = is_int(explicate_12)
        if new_temp57:
            new_temp58 = project_int(explicate_12)
            explicate_14 = new_temp58
        else:
            new_temp59 = project_bool(explicate_12)
            explicate_14 = new_temp59
        new_temp60 = is_int(explicate_13)
        if new_temp60:
            new_temp61 = project_int(explicate_13)
            explicate_15 = new_temp61
        else:
            new_temp62 = project_bool(explicate_13)
            explicate_15 = new_temp62
        new_temp63 = explicate_14 + explicate_15
        new_temp64 = inject_int(new_temp63)
        new_temp3 = new_temp64
y = new_temp3
print(z)


--- x86 IR ---
movl  z ,  explicate_4
call  inject_int 2
movl  eax ,  new_temp16
movl  new_temp16 ,  explicate_5
call  is_big explicate_4
movl  eax ,  new_temp17
if1
cmp 0, new_temp17
je else1
then1
call  is_big explicate_5
movl  eax ,  new_temp18
if2
cmp 0, new_temp18
je end if2
then2
call  project_big explicate_4
movl  eax ,  new_temp19
call  project_big explicate_5
movl  eax ,  new_temp20
call  add new_temp19,new_temp20
movl  eax ,  new_temp21
call  inject_big new_temp21
movl  eax ,  new_temp22
movl  new_temp22 ,  new_temp0
end if2
else1
call  is_big explicate_5
movl  eax ,  new_temp23
if2
cmp 0, new_temp23
je else2
then2
call  error_pyobj 0
else2
call  is_int explicate_4
movl  eax ,  new_temp24
if3
cmp 0, new_temp24
je else3
then3
call  project_int explicate_4
movl  eax ,  new_temp25
movl  new_temp25 ,  explicate_6
else3
call  project_bool explicate_4
movl  eax ,  new_temp26
movl  new_temp26 ,  explicate_6
end if3
call  is_int explicate_5
movl  eax ,  new_temp27
if4
cmp 0, new_temp27
je else4
then4
call  project_int explicate_5
movl  eax ,  new_temp28
movl  new_temp28 ,  explicate_7
else4
call  project_bool explicate_5
movl  eax ,  new_temp29
movl  new_temp29 ,  explicate_7
end if4
movl  explicate_6 ,  new_temp30
addl  explicate_7 ,  new_temp30
call  inject_int new_temp30
movl  eax ,  new_temp31
movl  new_temp31 ,  new_temp0
end if2
end if1
movl  new_temp0 ,  z
movl  x ,  explicate_8
call  inject_int 1
movl  eax ,  new_temp32
movl  new_temp32 ,  explicate_9
call  is_big explicate_8
movl  eax ,  new_temp33
if2
cmp 0, new_temp33
je else2
then2
call  is_big explicate_9
movl  eax ,  new_temp34
if3
cmp 0, new_temp34
je end if3
then3
call  project_big explicate_8
movl  eax ,  new_temp35
call  project_big explicate_9
movl  eax ,  new_temp36
call  add new_temp35,new_temp36
movl  eax ,  new_temp37
call  inject_big new_temp37
movl  eax ,  new_temp38
movl  new_temp38 ,  new_temp1
end if3
else2
call  is_big explicate_9
movl  eax ,  new_temp39
if3
cmp 0, new_temp39
je else3
then3
call  error_pyobj 0
else3
call  is_int explicate_8
movl  eax ,  new_temp40
if4
cmp 0, new_temp40
je else4
then4
call  project_int explicate_8
movl  eax ,  new_temp41
movl  new_temp41 ,  explicate_10
else4
call  project_bool explicate_8
movl  eax ,  new_temp42
movl  new_temp42 ,  explicate_10
end if4
call  is_int explicate_9
movl  eax ,  new_temp43
if5
cmp 0, new_temp43
je else5
then5
call  project_int explicate_9
movl  eax ,  new_temp44
movl  new_temp44 ,  explicate_11
else5
call  project_bool explicate_9
movl  eax ,  new_temp45
movl  new_temp45 ,  explicate_11
end if5
movl  explicate_10 ,  new_temp46
addl  explicate_11 ,  new_temp46
call  inject_int new_temp46
movl  eax ,  new_temp47
movl  new_temp47 ,  new_temp1
end if3
end if2
movl  new_temp1 ,  x
movl  1 ,  new_temp48
negl  new_temp48
call  inject_int new_temp48
movl  eax ,  new_temp49
movl  new_temp49 ,  new_temp2
movl  y ,  explicate_12
movl  new_temp2 ,  explicate_13
call  is_big explicate_12
movl  eax ,  new_temp50
if3
cmp 0, new_temp50
je else3
then3
call  is_big explicate_13
movl  eax ,  new_temp51
if4
cmp 0, new_temp51
je end if4
then4
call  project_big explicate_12
movl  eax ,  new_temp52
call  project_big explicate_13
movl  eax ,  new_temp53
call  add new_temp52,new_temp53
movl  eax ,  new_temp54
call  inject_big new_temp54
movl  eax ,  new_temp55
movl  new_temp55 ,  new_temp3
end if4
else3
call  is_big explicate_13
movl  eax ,  new_temp56
if4
cmp 0, new_temp56
je else4
then4
call  error_pyobj 0
else4
call  is_int explicate_12
movl  eax ,  new_temp57
if5
cmp 0, new_temp57
je else5
then5
call  project_int explicate_12
movl  eax ,  new_temp58
movl  new_temp58 ,  explicate_14
else5
call  project_bool explicate_12
movl  eax ,  new_temp59
movl  new_temp59 ,  explicate_14
end if5
call  is_int explicate_13
movl  eax ,  new_temp60
if6
cmp 0, new_temp60
je else6
then6
call  project_int explicate_13
movl  eax ,  new_temp61
movl  new_temp61 ,  explicate_15
else6
call  project_bool explicate_13
movl  eax ,  new_temp62
movl  new_temp62 ,  explicate_15
end if6
movl  explicate_14 ,  new_temp63
addl  explicate_15 ,  new_temp63
call  inject_int new_temp63
movl  eax ,  new_temp64
movl  new_temp64 ,  new_temp3
end if4
end if3
movl  new_temp3 ,  y
call  print z


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp3': {'explicate_9', 'explicate_4', 'new_temp38', 'new_temp18', 'new_temp0', 'new_temp17', 'new_temp32', 'new_temp36', 'new_temp51', 'new_temp27', 'new_temp34', 'new_temp47', 'edx', 'explicate_6', 'new_temp31', 'new_temp49', 'new_temp23', 'new_temp25', 'ecx', 'new_temp28', 'new_temp30', 'new_temp35', 'x', 'new_temp33', 'new_temp43', 'new_temp22', 'new_temp41', 'new_temp37', 'new_temp40', 'new_temp20', 'new_temp39', 'new_temp48', 'explicate_12', 'new_temp56', 'new_temp46', 'new_temp42', 'explicate_7', 'new_temp1', 'explicate_8', 'explicate_5', 'new_temp21', 'new_temp29', 'new_temp19', 'new_temp45', 'explicate_13', 'new_temp2', 'explicate_10', 'new_temp16', 'new_temp44', 'new_temp50', 'new_temp24', 'z', 'new_temp26', 'explicate_11', 'eax'}, 'new_temp0': {'new_temp16', 'explicate_4', 'new_temp23', 'new_temp18', 'new_temp3', 'new_temp17', 'ecx', 'x', 'new_temp1', 'edx', 'explicate_5', 'y', 'eax'}, 'x': {'new_temp20', 'explicate_4', 'new_temp18', 'new_temp0', 'new_temp17', 'explicate_7', 'new_temp27', 'eax', 'edx', 'explicate_5', 'explicate_6', 'new_temp21', 'new_temp29', 'new_temp31', 'new_temp19', 'new_temp16', 'new_temp25', 'new_temp3', 'ecx', 'new_temp28', 'new_temp30', 'new_temp22', 'new_temp24', 'z', 'new_temp26', 'y', 'new_temp23'}, 'new_temp1': {'explicate_9', 'explicate_4', 'new_temp18', 'new_temp0', 'new_temp17', 'new_temp32', 'new_temp27', 'new_temp34', 'edx', 'explicate_6', 'new_temp31', 'new_temp23', 'new_temp25', 'new_temp3', 'ecx', 'new_temp28', 'new_temp30', 'new_temp33', 'new_temp22', 'new_temp20', 'new_temp39', 'explicate_7', 'explicate_8', 'explicate_5', 'new_temp21', 'new_temp29', 'new_temp19', 'new_temp16', 'new_temp24', 'z', 'new_temp26', 'y', 'eax'}, 'y': {'explicate_9', 'explicate_4', 'new_temp38', 'new_temp18', 'new_temp0', 'new_temp17', 'new_temp32', 'new_temp36', 'new_temp45', 'new_temp27', 'new_temp34', 'new_temp47', 'edx', 'explicate_6', 'new_temp31', 'new_temp49', 'new_temp23', 'new_temp25', 'ecx', 'new_temp28', 'new_temp30', 'new_temp35', 'x', 'new_temp33', 'new_temp43', 'new_temp22', 'new_temp41', 'new_temp37', 'new_temp40', 'new_temp20', 'new_temp39', 'new_temp48', 'new_temp46', 'new_temp42', 'explicate_7', 'new_temp1', 'explicate_8', 'explicate_5', 'new_temp21', 'new_temp29', 'new_temp19', 'new_temp2', 'explicate_10', 'new_temp16', 'new_temp44', 'new_temp24', 'z', 'new_temp26', 'explicate_11', 'eax'}, 'explicate_4': {'new_temp16', 'new_temp23', 'new_temp3', 'new_temp0', 'ecx', 'new_temp17', 'new_temp18', 'new_temp1', 'x', 'edx', 'explicate_5', 'new_temp24', 'y', 'eax'}, 'eax': {'explicate_10', 'explicate_9', 'explicate_4', 'explicate_12', 'new_temp3', 'new_temp0', 'new_temp35', 'new_temp1', 'x', 'new_temp52', 'explicate_14', 'explicate_8', 'explicate_5', 'z', 'explicate_6', 'new_temp19', 'y', 'explicate_13'}, 'ecx': {'explicate_10', 'explicate_9', 'explicate_4', 'explicate_12', 'new_temp3', 'new_temp0', 'new_temp35', 'new_temp1', 'x', 'new_temp52', 'explicate_14', 'explicate_8', 'explicate_5', 'z', 'explicate_6', 'new_temp19', 'y', 'explicate_13'}, 'edx': {'explicate_10', 'explicate_9', 'explicate_4', 'explicate_12', 'new_temp3', 'new_temp0', 'new_temp35', 'new_temp1', 'x', 'new_temp52', 'explicate_14', 'explicate_8', 'explicate_5', 'z', 'explicate_6', 'new_temp19', 'y', 'explicate_13'}, 'new_temp16': {'explicate_4', 'new_temp3', 'new_temp0', 'y', 'new_temp1', 'x'}, 'explicate_5': {'explicate_4', 'new_temp18', 'new_temp0', 'new_temp17', 'new_temp1', 'new_temp27', 'eax', 'edx', 'explicate_6', 'new_temp19', 'new_temp3', 'new_temp25', 'ecx', 'x', 'new_temp24', 'new_temp26', 'y', 'new_temp23'}, 'new_temp17': {'explicate_4', 'explicate_5', 'new_temp3', 'new_temp0', 'y', 'new_temp1', 'x'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp18': {'explicate_4', 'explicate_5', 'new_temp3', 'new_temp0', 'y', 'new_temp1', 'x'}, 'new_temp23': {'explicate_4', 'explicate_5', 'new_temp3', 'new_temp0', 'y', 'new_temp1', 'x'}, 'new_temp19': {'new_temp20', 'new_temp1', 'edx', 'explicate_5', 'new_temp3', 'ecx', 'x', 'y', 'eax'}, 'new_temp20': {'new_temp3', 'new_temp19', 'y', 'new_temp1', 'x'}, 'new_temp21': {'x', 'y', 'new_temp1', 'new_temp3'}, 'new_temp22': {'x', 'y', 'new_temp1', 'new_temp3'}, 'z': {'explicate_9', 'new_temp38', 'new_temp45', 'new_temp53', 'new_temp32', 'new_temp63', 'new_temp54', 'new_temp36', 'new_temp51', 'new_temp47', 'new_temp34', 'new_temp52', 'explicate_14', 'explicate_15', 'edx', 'new_temp49', 'new_temp3', 'ecx', 'new_temp35', 'x', 'new_temp33', 'new_temp61', 'new_temp43', 'new_temp59', 'new_temp41', 'new_temp37', 'new_temp40', 'new_temp55', 'new_temp48', 'new_temp39', 'explicate_12', 'new_temp56', 'new_temp46', 'new_temp64', 'new_temp42', 'new_temp1', 'explicate_8', 'new_temp60', 'explicate_13', 'new_temp2', 'explicate_10', 'new_temp62', 'new_temp58', 'new_temp44', 'new_temp57', 'new_temp50', 'explicate_11', 'y', 'eax'}, 'explicate_8': {'new_temp40', 'explicate_9', 'new_temp39', 'new_temp3', 'new_temp32', 'ecx', 'new_temp1', 'new_temp34', 'new_temp33', 'edx', 'z', 'y', 'eax'}, 'new_temp32': {'explicate_8', 'z', 'new_temp3', 'y', 'new_temp1'}, 'explicate_9': {'new_temp40', 'new_temp39', 'new_temp42', 'new_temp1', 'new_temp34', 'explicate_8', 'edx', 'explicate_10', 'new_temp3', 'ecx', 'new_temp35', 'new_temp33', 'new_temp43', 'z', 'new_temp41', 'y', 'eax'}, 'new_temp33': {'explicate_9', 'explicate_8', 'z', 'new_temp3', 'y', 'new_temp1'}, 'new_temp24': {'explicate_4', 'explicate_5', 'new_temp3', 'y', 'new_temp1', 'x'}, 'new_temp34': {'explicate_9', 'explicate_8', 'z', 'new_temp3', 'y', 'new_temp1'}, 'new_temp39': {'explicate_9', 'explicate_8', 'z', 'new_temp3', 'y', 'new_temp1'}, 'new_temp25': {'explicate_5', 'new_temp3', 'y', 'new_temp1', 'x'}, 'explicate_6': {'new_temp3', 'ecx', 'new_temp28', 'explicate_7', 'new_temp27', 'new_temp1', 'x', 'edx', 'explicate_5', 'new_temp29', 'y', 'eax'}, 'new_temp26': {'explicate_5', 'new_temp3', 'y', 'new_temp1', 'x'}, 'new_temp35': {'explicate_9', 'edx', 'new_temp36', 'z', 'new_temp3', 'ecx', 'y', 'eax'}, 'new_temp36': {'y', 'new_temp35', 'z', 'new_temp3'}, 'new_temp37': {'y', 'z', 'new_temp3'}, 'new_temp38': {'y', 'z', 'new_temp3'}, 'new_temp48': {'z', 'new_temp3', 'y'}, 'new_temp49': {'y', 'z', 'new_temp3'}, 'new_temp2': {'y', 'explicate_12', 'z', 'new_temp3'}, 'explicate_12': {'new_temp2', 'new_temp56', 'new_temp3', 'ecx', 'new_temp51', 'new_temp57', 'edx', 'new_temp50', 'z', 'eax', 'explicate_13'}, 'explicate_13': {'explicate_12', 'new_temp56', 'new_temp3', 'new_temp58', 'ecx', 'new_temp51', 'new_temp52', 'explicate_14', 'new_temp57', 'new_temp60', 'edx', 'new_temp50', 'z', 'new_temp59', 'eax'}, 'new_temp50': {'explicate_13', 'explicate_12', 'z', 'new_temp3'}, 'new_temp40': {'explicate_9', 'explicate_8', 'z', 'new_temp3', 'y'}, 'new_temp27': {'explicate_5', 'explicate_6', 'new_temp3', 'y', 'new_temp1', 'x'}, 'new_temp51': {'explicate_13', 'explicate_12', 'z', 'new_temp3'}, 'new_temp56': {'explicate_13', 'explicate_12', 'z', 'new_temp3'}, 'new_temp41': {'explicate_9', 'y', 'z', 'new_temp3'}, 'explicate_10': {'explicate_9', 'new_temp45', 'new_temp3', 'ecx', 'new_temp44', 'new_temp43', 'edx', 'z', 'explicate_11', 'y', 'eax'}, 'new_temp42': {'explicate_9', 'y', 'z', 'new_temp3'}, 'new_temp28': {'explicate_6', 'new_temp3', 'y', 'new_temp1', 'x'}, 'explicate_7': {'new_temp3', 'new_temp30', 'new_temp1', 'x', 'explicate_6', 'y'}, 'new_temp29': {'explicate_6', 'new_temp3', 'y', 'new_temp1', 'x'}, 'new_temp52': {'edx', 'z', 'new_temp53', 'ecx', 'eax', 'explicate_13'}, 'new_temp53': {'z', 'new_temp52'}, 'new_temp54': {'z'}, 'new_temp55': {'z'}, 'new_temp57': {'z', 'explicate_12', 'explicate_13'}, 'new_temp43': {'explicate_10', 'explicate_9', 'z', 'new_temp3', 'y'}, 'new_temp30': {'new_temp3', 'explicate_7', 'new_temp1', 'x', 'y'}, 'new_temp31': {'x', 'y', 'new_temp1', 'new_temp3'}, 'new_temp58': {'explicate_13', 'z'}, 'explicate_14': {'new_temp62', 'ecx', 'explicate_15', 'new_temp60', 'edx', 'z', 'new_temp61', 'eax', 'explicate_13'}, 'new_temp59': {'explicate_13', 'z'}, 'new_temp44': {'explicate_10', 'y', 'z', 'new_temp3'}, 'explicate_11': {'explicate_10', 'new_temp3', 'new_temp46', 'z', 'y'}, 'new_temp45': {'explicate_10', 'y', 'z', 'new_temp3'}, 'new_temp60': {'z', 'explicate_13', 'explicate_14'}, 'new_temp46': {'z', 'new_temp3', 'explicate_11', 'y'}, 'new_temp47': {'y', 'z', 'new_temp3'}, 'new_temp61': {'z', 'explicate_14'}, 'explicate_15': {'new_temp63', 'z', 'explicate_14'}, 'new_temp62': {'z', 'explicate_14'}, 'new_temp63': {'explicate_15', 'z'}, 'new_temp64': {'z'}}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'y': 4, 'z': 5, 'explicate_10': 6, 'explicate_9': 7, 'new_temp1': 6, 'explicate_8': 7, 'new_temp19': 5, 'explicate_5': 7, 'x': 6, 'new_temp35': 6, 'new_temp3': 4, 'explicate_13': 6, 'explicate_12': 7, 'explicate_14': 4, 'explicate_6': 5, 'new_temp52': 4, 'new_temp0': 5, 'explicate_4': 7, 'new_temp23': 1, 'explicate_11': 1, 'new_temp45': 1, 'new_temp50': 1, 'new_temp44': 1, 'new_temp16': 1, 'new_temp29': 1, 'new_temp60': 1, 'explicate_7': 1, 'new_temp39': 1, 'new_temp46': 2, 'new_temp20': 1, 'new_temp56': 1, 'new_temp43': 1, 'new_temp33': 1, 'new_temp30': 2, 'new_temp28': 1, 'new_temp51': 1, 'new_temp36': 1, 'new_temp34': 1, 'new_temp27': 1, 'new_temp32': 1, 'new_temp17': 1, 'new_temp18': 1, 'new_temp41': 1, 'new_temp61': 1, 'new_temp26': 1, 'new_temp59': 1, 'new_temp24': 1, 'new_temp22': 1, 'new_temp57': 1, 'new_temp25': 1, 'new_temp58': 1, 'new_temp62': 1, 'new_temp2': 1, 'new_temp49': 1, 'new_temp21': 1, 'new_temp31': 1, 'explicate_15': 1, 'new_temp42': 1, 'new_temp47': 1, 'new_temp53': 1, 'new_temp63': 2, 'new_temp38': 1, 'new_temp48': 1, 'new_temp40': 1, 'new_temp37': 1, 'new_temp64': 1, 'new_temp54': 1, 'new_temp55': 1}
Spilled set:
 {'explicate_9', 'explicate_12', 'explicate_4', 'explicate_8', 'explicate_5'}


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'explicate_9': -4, 'explicate_8': -8, 'explicate_12': -12, 'explicate_4': -16, 'explicate_5': -20, 'y': 'edi', 'z': 'ebx', 'explicate_10': 'esi', 'new_temp1': 'esi', 'new_temp19': 'ebx', 'x': 'esi', 'new_temp35': 'esi', 'new_temp3': 'edi', 'explicate_13': 'esi', 'explicate_14': 'edi', 'explicate_6': 'ebx', 'new_temp52': 'edi', 'new_temp0': 'ebx', 'new_temp23': 'eax', 'explicate_11': 'eax', 'new_temp45': 'eax', 'new_temp50': 'eax', 'new_temp44': 'eax', 'new_temp16': 'eax', 'new_temp29': 'eax', 'new_temp60': 'eax', 'explicate_7': 'eax', 'new_temp39': 'eax', 'new_temp46': 'ecx', 'new_temp20': 'eax', 'new_temp56': 'eax', 'new_temp43': 'eax', 'new_temp33': 'eax', 'new_temp30': 'ecx', 'new_temp28': 'eax', 'new_temp51': 'eax', 'new_temp36': 'eax', 'new_temp34': 'eax', 'new_temp27': 'eax', 'new_temp32': 'eax', 'new_temp17': 'eax', 'new_temp18': 'eax', 'new_temp41': 'eax', 'new_temp61': 'eax', 'new_temp26': 'eax', 'new_temp59': 'eax', 'new_temp24': 'eax', 'new_temp22': 'eax', 'new_temp57': 'eax', 'new_temp25': 'eax', 'new_temp58': 'eax', 'new_temp62': 'eax', 'new_temp2': 'eax', 'new_temp49': 'eax', 'new_temp21': 'eax', 'new_temp31': 'eax', 'explicate_15': 'eax', 'new_temp42': 'eax', 'new_temp47': 'eax', 'new_temp53': 'eax', 'new_temp63': 'ecx', 'new_temp38': 'eax', 'new_temp48': 'eax', 'new_temp40': 'eax', 'new_temp37': 'eax', 'new_temp64': 'eax', 'new_temp54': 'eax', 'new_temp55': 'eax'}
z
new_temp16
new_temp16
new_temp17
new_temp17
new_temp18
new_temp18
new_temp19
new_temp20
new_temp20
new_temp19
new_temp21
new_temp21
new_temp22
new_temp22
new_temp0
new_temp23
new_temp23
new_temp24
new_temp24
new_temp25
new_temp25
explicate_6
new_temp26
new_temp26
explicate_6
new_temp27
new_temp27
new_temp28
new_temp28
explicate_7
new_temp29
new_temp29
explicate_7
explicate_6
new_temp30
explicate_7
new_temp30
new_temp30
new_temp31
new_temp31
new_temp0
new_temp0
z
x
new_temp32
new_temp32
new_temp33
new_temp33
new_temp34
new_temp34
new_temp35
new_temp36
new_temp36
new_temp35
new_temp37
new_temp37
new_temp38
new_temp38
new_temp1
new_temp39
new_temp39
new_temp40
new_temp40
new_temp41
new_temp41
explicate_10
new_temp42
new_temp42
explicate_10
new_temp43
new_temp43
new_temp44
new_temp44
explicate_11
new_temp45
new_temp45
explicate_11
explicate_10
new_temp46
explicate_11
new_temp46
new_temp46
new_temp47
new_temp47
new_temp1
new_temp1
x
new_temp48
new_temp48
new_temp48
new_temp49
new_temp49
new_temp2
y
new_temp2
explicate_13
new_temp50
new_temp50
explicate_13
new_temp51
new_temp51
new_temp52
explicate_13
new_temp53
new_temp53
new_temp52
new_temp54
new_temp54
new_temp55
new_temp55
new_temp3
explicate_13
new_temp56
new_temp56
new_temp57
new_temp57
new_temp58
new_temp58
explicate_14
new_temp59
new_temp59
explicate_14
explicate_13
new_temp60
new_temp60
explicate_13
new_temp61
new_temp61
explicate_15
explicate_13
new_temp62
new_temp62
explicate_15
explicate_14
new_temp63
explicate_15
new_temp63
new_temp63
new_temp64
new_temp64
new_temp3
new_temp3
y
z
