Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=5)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=10)),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=Constant(value=0)),
        While(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=0)])],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=UnaryOp(
                            op=USub(),
                            operand=Constant(value=1)))),
                Assign(
                    targets=[
                        Name(id='y_copy', ctx=Store())],
                    value=Name(id='y', ctx=Load())),
                Assign(
                    targets=[
                        Name(id='inner_loop_done', ctx=Store())],
                    value=Constant(value=0)),
                While(
                    test=BoolOp(
                        op=And(),
                        values=[
                            Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    Compare(
                                        left=Name(id='y_copy', ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Constant(value=0)])],
                                keywords=[]),
                            Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    UnaryOp(
                                        op=Not(),
                                        operand=Name(id='inner_loop_done', ctx=Load()))],
                                keywords=[])]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='y_copy', ctx=Store())],
                            value=BinOp(
                                left=Name(id='y_copy', ctx=Load()),
                                op=Add(),
                                right=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1)))),
                        If(
                            test=Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    Compare(
                                        left=Name(id='y_copy', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Constant(value=4)])],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='z', ctx=Store())],
                                    value=BinOp(
                                        left=Name(id='z', ctx=Load()),
                                        op=Add(),
                                        right=Constant(value=1))),
                                If(
                                    test=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Compare(
                                                left=Name(id='x', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Constant(value=3)])],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='z', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='z', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=1))),
                                        Assign(
                                            targets=[
                                                Name(id='y', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='y', ctx=Load()),
                                                op=Add(),
                                                right=UnaryOp(
                                                    op=USub(),
                                                    operand=Constant(value=1)))),
                                        Assign(
                                            targets=[
                                                Name(id='x', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='x', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=1))),
                                        Assign(
                                            targets=[
                                                Name(id='inner_loop_done', ctx=Store())],
                                            value=Constant(value=1))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='int', ctx=Load()),
                                                args=[
                                                    Compare(
                                                        left=Name(id='x', ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Constant(value=2)])],
                                                keywords=[]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Name(id='z', ctx=Store())],
                                                    value=BinOp(
                                                        left=Name(id='z', ctx=Load()),
                                                        op=Add(),
                                                        right=Constant(value=2)))],
                                            orelse=[
                                                Assign(
                                                    targets=[
                                                        Name(id='z', ctx=Store())],
                                                    value=BinOp(
                                                        left=Name(id='z', ctx=Load()),
                                                        op=Add(),
                                                        right=Constant(value=3)))]),
                                        Assign(
                                            targets=[
                                                Name(id='y', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='y', ctx=Load()),
                                                op=Add(),
                                                right=UnaryOp(
                                                    op=USub(),
                                                    operand=Constant(value=1)))),
                                        Assign(
                                            targets=[
                                                Name(id='x', ctx=Store())],
                                            value=BinOp(
                                                left=Name(id='x', ctx=Load()),
                                                op=Add(),
                                                right=Constant(value=1))),
                                        Assign(
                                            targets=[
                                                Name(id='inner_loop_done', ctx=Store())],
                                            value=Constant(value=1))])],
                            orelse=[])],
                    orelse=[]),
                If(
                    test=Call(
                        func=Name(id='int', ctx=Load()),
                        args=[
                            UnaryOp(
                                op=Not(),
                                operand=Name(id='inner_loop_done', ctx=Load()))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='y', ctx=Store())],
                            value=Name(id='y_copy', ctx=Load()))],
                    orelse=[])],
            orelse=[]),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='z', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=5)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=10)),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=Constant(value=0)),
        Expr(
            value=Name(id='while', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=0)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1)))),
        Assign(
            targets=[
                Name(id='y_copy', ctx=Store())],
            value=Name(id='y', ctx=Load())),
        Assign(
            targets=[
                Name(id='inner_loop_done', ctx=Store())],
            value=Constant(value=0)),
        Expr(
            value=Name(id='while', ctx=Load())),
        Expr(
            value=BoolOp(
                op=And(),
                values=[
                    Call(
                        func=Name(id='int', ctx=Load()),
                        args=[
                            Compare(
                                left=Name(id='y_copy', ctx=Load()),
                                ops=[
                                    NotEq()],
                                comparators=[
                                    Constant(value=0)])],
                        keywords=[]),
                    Call(
                        func=Name(id='int', ctx=Load()),
                        args=[
                            UnaryOp(
                                op=Not(),
                                operand=Name(id='inner_loop_done', ctx=Load()))],
                        keywords=[])])),
        Assign(
            targets=[
                Name(id='y_copy', ctx=Store())],
            value=BinOp(
                left=Name(id='y_copy', ctx=Load()),
                op=Add(),
                right=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1)))),
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='y_copy', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=4)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=3)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=BinOp(
                left=Name(id='y', ctx=Load()),
                op=Add(),
                right=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1)))),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Assign(
            targets=[
                Name(id='inner_loop_done', ctx=Store())],
            value=Constant(value=1)),
        Expr(
            value=Name(id='else', ctx=Load())),
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=2)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Constant(value=2))),
        Expr(
            value=Name(id='else', ctx=Load())),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=BinOp(
                left=Name(id='z', ctx=Load()),
                op=Add(),
                right=Constant(value=3))),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=BinOp(
                left=Name(id='y', ctx=Load()),
                op=Add(),
                right=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1)))),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Assign(
            targets=[
                Name(id='inner_loop_done', ctx=Store())],
            value=Constant(value=1)),
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    UnaryOp(
                        op=Not(),
                        operand=Name(id='inner_loop_done', ctx=Load()))],
                keywords=[])),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Name(id='y_copy', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='z', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = 5
y = 10
z = 0

while int(x != 0):
    x = x + -1
    y_copy = y
    inner_loop_done = 0
    
    while int(y_copy != 0) and int(not inner_loop_done):
        y_copy = y_copy + -1
        if int(y_copy == 4):
            z = z + 1
            if int(x == 3):
                z = z + 1
                y = y + -1
                x = x + 1
                inner_loop_done = 1
            else:
                if int(x == 2):
                    z = z + 2
                else:
                    z = z + 3
                y = y + -1
                x = x + 1
                inner_loop_done = 1

    if int(not inner_loop_done):
        y = y_copy
        
print(z)


Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=5)),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=10)),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='x', ctx=Load()),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Constant(value=0)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=UnaryOp(
                         op=USub(),
                         operand=Constant(value=1)))),
          Assign(
               targets=[
                    Name(id='y_copy', ctx=Store())],
               value=Name(id='y', ctx=Load())),
          Assign(
               targets=[
                    Name(id='inner_loop_done', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Expr(
               value=BoolOp(
                    op=And(),
                    values=[
                         Call(
                              func=Name(id='int', ctx=Load()),
                              args=[
                                   Compare(
                                        left=Name(id='y_copy', ctx=Load()),
                                        ops=[
                                             NotEq()],
                                        comparators=[
                                             Constant(value=0)])],
                              keywords=[]),
                         Call(
                              func=Name(id='int', ctx=Load()),
                              args=[
                                   UnaryOp(
                                        op=Not(),
                                        operand=Name(id='inner_loop_done', ctx=Load()))],
                              keywords=[])])),
          Assign(
               targets=[
                    Name(id='y_copy', ctx=Store())],
               value=BinOp(
                    left=Name(id='y_copy', ctx=Load()),
                    op=Add(),
                    right=UnaryOp(
                         op=USub(),
                         operand=Constant(value=1)))),
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='y_copy', ctx=Load()),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Constant(value=4)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='x', ctx=Load()),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Constant(value=3)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=BinOp(
                    left=Name(id='y', ctx=Load()),
                    op=Add(),
                    right=UnaryOp(
                         op=USub(),
                         operand=Constant(value=1)))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='inner_loop_done', ctx=Store())],
               value=Constant(value=1)),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='x', ctx=Load()),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Constant(value=2)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=3))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=BinOp(
                    left=Name(id='y', ctx=Load()),
                    op=Add(),
                    right=UnaryOp(
                         op=USub(),
                         operand=Constant(value=1)))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='inner_loop_done', ctx=Store())],
               value=Constant(value=1)),
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         UnaryOp(
                              op=Not(),
                              operand=Name(id='inner_loop_done', ctx=Load()))],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='y_copy', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=5)),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=10)),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Compare(
                    left=Name(id='x', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Constant(value=0)])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp1', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp2', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp3', ctx=Load())),
          Assign(
               targets=[
                    Name(id='y_copy', ctx=Store())],
               value=Name(id='y', ctx=Load())),
          Assign(
               targets=[
                    Name(id='inner_loop_done', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Name(id='while', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=Compare(
                    left=Name(id='y_copy', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Constant(value=0)])),
          Assign(
               targets=[
                    Name(id='new_temp5', ctx=Store())],
               value=Name(id='new_temp4', ctx=Store())),
          Assign(
               targets=[
                    Name(id='new_temp6', ctx=Store())],
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp5', ctx=Load())],
                    keywords=[])),
          If(
               test=Name(id='new_temp6', ctx=Load()),
               body=[
                    If(
                         test=Name(id='inner_loop_done', ctx=Load()),
                         body=[
                              Assign(
                                   targets=[
                                        Name(id='new_temp7', ctx=Store())],
                                   value=Constant(value=False))],
                         orelse=[
                              Assign(
                                   targets=[
                                        Name(id='new_temp7', ctx=Store())],
                                   value=Constant(value=True))]),
                    Assign(
                         targets=[
                              Name(id='new_temp8', ctx=Store())],
                         value=Call(
                              func=Name(id='int', ctx=Load()),
                              args=[
                                   Name(id='new_temp7', ctx=Load())],
                              keywords=[])),
                    Assign(
                         targets=[
                              Name(id='new_temp9', ctx=Store())],
                         value=Name(id='new_temp8', ctx=Load()))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp9', ctx=Store())],
                         value=Name(id='new_temp6', ctx=Load()))]),
          Expr(
               value=BoolOp(
                    op=And(),
                    values=[
                         Name(id='new_temp9', ctx=Store())])),
          Assign(
               targets=[
                    Name(id='new_temp10', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='new_temp11', ctx=Store())],
               value=BinOp(
                    left=Name(id='y_copy', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp10', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='y_copy', ctx=Store())],
               value=Name(id='new_temp11', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp12', ctx=Store())],
               value=Compare(
                    left=Name(id='y_copy', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Constant(value=4)])),
          Assign(
               targets=[
                    Name(id='new_temp13', ctx=Store())],
               value=Name(id='new_temp12', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp13', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp14', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp14', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp15', ctx=Store())],
               value=Compare(
                    left=Name(id='x', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Constant(value=3)])),
          Assign(
               targets=[
                    Name(id='new_temp16', ctx=Store())],
               value=Name(id='new_temp15', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp16', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp17', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp17', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp18', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='new_temp19', ctx=Store())],
               value=BinOp(
                    left=Name(id='y', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp18', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='new_temp19', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp20', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp20', ctx=Load())),
          Assign(
               targets=[
                    Name(id='inner_loop_done', ctx=Store())],
               value=Constant(value=1)),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp21', ctx=Store())],
               value=Compare(
                    left=Name(id='x', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Constant(value=2)])),
          Assign(
               targets=[
                    Name(id='new_temp22', ctx=Store())],
               value=Name(id='new_temp21', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp22', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp23', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp23', ctx=Load())),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp24', ctx=Store())],
               value=BinOp(
                    left=Name(id='z', ctx=Load()),
                    op=Add(),
                    right=Constant(value=3))),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='new_temp24', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp25', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='new_temp26', ctx=Store())],
               value=BinOp(
                    left=Name(id='y', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp25', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='new_temp26', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp27', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp27', ctx=Load())),
          Assign(
               targets=[
                    Name(id='inner_loop_done', ctx=Store())],
               value=Constant(value=1)),
          Expr(
               value=Name(id='if', ctx=Load())),
          If(
               test=Name(id='inner_loop_done', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp28', ctx=Store())],
                         value=Constant(value=False))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp28', ctx=Store())],
                         value=Constant(value=True))]),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp28', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='y_copy', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
x = 5
y = 10
z = 0
while
new_temp0 = x != 0
new_temp1 = new_temp0
int(new_temp1)
new_temp2 = -1
new_temp3 = x + new_temp2
x = new_temp3
y_copy = y
inner_loop_done = 0
while
new_temp4 = y_copy != 0
new_temp5 = new_temp4
new_temp6 = int(new_temp5)
if new_temp6:
    if inner_loop_done:
        new_temp7 = False
    else:
        new_temp7 = True
    new_temp8 = int(new_temp7)
    new_temp9 = new_temp8
else:
    new_temp9 = new_temp6
new_temp9
new_temp10 = -1
new_temp11 = y_copy + new_temp10
y_copy = new_temp11
if
new_temp12 = y_copy == 4
new_temp13 = new_temp12
int(new_temp13)
new_temp14 = z + 1
z = new_temp14
if
new_temp15 = x == 3
new_temp16 = new_temp15
int(new_temp16)
new_temp17 = z + 1
z = new_temp17
new_temp18 = -1
new_temp19 = y + new_temp18
y = new_temp19
new_temp20 = x + 1
x = new_temp20
inner_loop_done = 1
else
if
new_temp21 = x == 2
new_temp22 = new_temp21
int(new_temp22)
new_temp23 = z + 2
z = new_temp23
else
new_temp24 = z + 3
z = new_temp24
new_temp25 = -1
new_temp26 = y + new_temp25
y = new_temp26
new_temp27 = x + 1
x = new_temp27
inner_loop_done = 1
if
if inner_loop_done:
    new_temp28 = False
else:
    new_temp28 = True
int(new_temp28)
y = y_copy
print(z)
<ast.Constant object at 0x7f59d22ecca0>
<ast.Constant object at 0x7f59d22eccd0>
<ast.Constant object at 0x7f59d22ecd00>
inject_bool(not_equal(project_big(explicate_29),project_big(explicate_30)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_31!=explicate_32)
<ast.Name object at 0x7f59d2338ac0>
inject_int(-1)
inject_big(add(project_big(explicate_33),project_big(explicate_34)))
inject_int(explicate_35+explicate_36)
<ast.Name object at 0x7f59d233a4d0>
<ast.Name object at 0x7f59d22ec310>
<ast.Constant object at 0x7f59d22ec370>
inject_bool(not_equal(project_big(explicate_37),project_big(explicate_38)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_39!=explicate_40)
<ast.Name object at 0x7f59d2339fc0>
inject_int(project_bool(explicate_41))
<ast.Constant object at 0x7f59d2339e10>
<ast.Constant object at 0x7f59d233a530>
inject_int(project_bool(explicate_42))
<ast.Name object at 0x7f59d2339ff0>
<ast.Name object at 0x7f59d23393c0>
inject_int(-1)
inject_big(add(project_big(explicate_43),project_big(explicate_44)))
inject_int(explicate_45+explicate_46)
<ast.Name object at 0x7f59d2339240>
inject_bool(equal(project_big(explicate_47),project_big(explicate_48)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_49==explicate_50)
<ast.Name object at 0x7f59d233aa40>
inject_big(add(project_big(explicate_51),project_big(explicate_52)))
inject_int(explicate_53+explicate_54)
<ast.Name object at 0x7f59d233a890>
inject_bool(equal(project_big(explicate_55),project_big(explicate_56)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_57==explicate_58)
<ast.Name object at 0x7f59d233acb0>
inject_big(add(project_big(explicate_59),project_big(explicate_60)))
inject_int(explicate_61+explicate_62)
<ast.Name object at 0x7f59d233ab00>
inject_int(-1)
inject_big(add(project_big(explicate_63),project_big(explicate_64)))
inject_int(explicate_65+explicate_66)
<ast.Name object at 0x7f59d233ad70>
inject_big(add(project_big(explicate_67),project_big(explicate_68)))
inject_int(explicate_69+explicate_70)
<ast.Name object at 0x7f59d233af50>
<ast.Constant object at 0x7f59d2338fd0>
inject_bool(equal(project_big(explicate_71),project_big(explicate_72)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_73==explicate_74)
<ast.Name object at 0x7f59d233b1f0>
inject_big(add(project_big(explicate_75),project_big(explicate_76)))
inject_int(explicate_77+explicate_78)
<ast.Name object at 0x7f59d233b040>
inject_big(add(project_big(explicate_79),project_big(explicate_80)))
inject_int(explicate_81+explicate_82)
<ast.Name object at 0x7f59d233b0a0>
inject_int(-1)
inject_big(add(project_big(explicate_83),project_big(explicate_84)))
inject_int(explicate_85+explicate_86)
<ast.Name object at 0x7f59d233b3a0>
inject_big(add(project_big(explicate_87),project_big(explicate_88)))
inject_int(explicate_89+explicate_90)
<ast.Name object at 0x7f59d233b580>
<ast.Constant object at 0x7f59d2339e70>
<ast.Constant object at 0x7f59d22af340>
<ast.Constant object at 0x7f59d233a4a0>
<ast.Name object at 0x7f59d233a260>
