Illegal character ':'
Illegal character ':'
Illegal character ':'
Illegal character ':'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Call(
                func=Name(id='eval', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='input', ctx=Load()),
                        args=[],
                        keywords=[])],
                keywords=[])),
        If(
            test=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=23)])],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Call(
                        func=Name(id='eval', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='input', ctx=Load()),
                                args=[],
                                keywords=[])],
                        keywords=[])),
                If(
                    test=Call(
                        func=Name(id='int', ctx=Load()),
                        args=[
                            Compare(
                                left=Name(id='y', ctx=Load()),
                                ops=[
                                    NotEq()],
                                comparators=[
                                    Constant(value=42)])],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='x', ctx=Store())],
                            value=BinOp(
                                left=Name(id='x', ctx=Load()),
                                op=Add(),
                                right=Constant(value=1)))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='x', ctx=Store())],
                            value=BinOp(
                                left=Name(id='x', ctx=Load()),
                                op=Add(),
                                right=Constant(value=2)))])],
            orelse=[
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=Constant(value=3)))])],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Call(
                func=Name(id='eval', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='input', ctx=Load()),
                        args=[],
                        keywords=[])],
                keywords=[])),
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=23)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Call(
                func=Name(id='eval', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='input', ctx=Load()),
                        args=[],
                        keywords=[])],
                keywords=[])),
        Expr(
            value=Name(id='if', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='int', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='y', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=42)])],
                keywords=[])),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Expr(
            value=Name(id='else', ctx=Load())),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=Constant(value=2))),
        Expr(
            value=Name(id='else', ctx=Load())),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=Constant(value=3)))],
    type_ignores=[])
--------------Original code----------------
x = eval(input())
if (int(x != 23)):
    y = eval(input())
    if (int(y != 42)):
        x = x + 1
    else:
        x = x + 2
else:
    x = x + 3



Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='x', ctx=Load()),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Constant(value=23)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Expr(
               value=Name(id='if', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='y', ctx=Load()),
                              ops=[
                                   NotEq()],
                              comparators=[
                                   Constant(value=42)])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=3)))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp0', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Compare(
                    left=Name(id='x', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Constant(value=23)])),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=Name(id='new_temp1', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp2', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=Call(
                    func=Name(id='eval', ctx=Load()),
                    args=[
                         Call(
                              func=Name(id='input', ctx=Load()),
                              args=[],
                              keywords=[])],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='new_temp3', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=Compare(
                    left=Name(id='y', ctx=Load()),
                    ops=[
                         NotEq()],
                    comparators=[
                         Constant(value=42)])),
          Assign(
               targets=[
                    Name(id='new_temp5', ctx=Store())],
               value=Name(id='new_temp4', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='int', ctx=Load()),
                    args=[
                         Name(id='new_temp5', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='new_temp6', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp6', ctx=Load())),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp7', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=2))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp7', ctx=Load())),
          Expr(
               value=Name(id='else', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp8', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Constant(value=3))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp8', ctx=Load()))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = eval(input())
x = new_temp0
if
new_temp1 = x != 23
new_temp2 = new_temp1
int(new_temp2)
new_temp3 = eval(input())
y = new_temp3
if
new_temp4 = y != 42
new_temp5 = new_temp4
int(new_temp5)
new_temp6 = x + 1
x = new_temp6
else
new_temp7 = x + 2
x = new_temp7
else
new_temp8 = x + 3
x = new_temp8
eval(input())
<ast.Name object at 0x7fed4ec82c80>
inject_bool(not_equal(project_big(explicate_9),project_big(explicate_10)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_11!=explicate_12)
<ast.Name object at 0x7fed4ec83190>
eval(input())
<ast.Name object at 0x7fed4ec82fe0>
inject_bool(not_equal(project_big(explicate_13),project_big(explicate_14)))
inject_bool(1)
inject_bool(1)
inject_bool(explicate_15!=explicate_16)
<ast.Name object at 0x7fed4ec83400>
inject_big(add(project_big(explicate_17),project_big(explicate_18)))
inject_int(explicate_19+explicate_20)
<ast.Name object at 0x7fed4ec83250>
inject_big(add(project_big(explicate_21),project_big(explicate_22)))
inject_int(explicate_23+explicate_24)
<ast.Name object at 0x7fed4ec832b0>
inject_big(add(project_big(explicate_25),project_big(explicate_26)))
inject_int(explicate_27+explicate_28)
<ast.Name object at 0x7fed4ec834f0>
