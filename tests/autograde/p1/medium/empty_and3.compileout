------------------CORRECT TREE--------------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BoolOp(
                        op=And(),
                        values=[
                            List(
                                elts=[
                                    Dict(keys=[], values=[])],
                                ctx=Load()),
                            Constant(value=2)])],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BoolOp(
                        op=And(),
                        values=[
                            List(
                                elts=[
                                    Dict(keys=[], values=[])],
                                ctx=Load()),
                            Constant(value=2)])],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
print([{}] and 2)
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         BoolOp(
                              op=And(),
                              values=[
                                   List(
                                        elts=[
                                             Dict(keys=[], values=[])],
                                        ctx=Load()),
                                   Constant(value=2)])],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Dict(keys=[], values=[])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=List(
                    elts=[
                         Name(id='new_temp0', ctx=Load())],
                    ctx=Load())),
          If(
               test=Name(id='new_temp1', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Constant(value=2))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Name(id='new_temp1', ctx=Load()))]),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=Name(id='new_temp2', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp3', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = {}
new_temp1 = [new_temp0]
if new_temp1:
    new_temp2 = 2
else:
    new_temp2 = new_temp1
new_temp3 = new_temp2
print(new_temp3)
<ast.Dict object at 0x7fbd9f578070>
<ast.List object at 0x7fbd9f57b790>
<ast.Constant object at 0x7fbd9f5780a0>
<ast.Name object at 0x7fbd9f59c3d0>
<ast.Name object at 0x7fbd9f59c670>

new_temp0 = inject_big(create_dict())
new_temp1 = inject_big(create_list(inject_int(1)))
set_subscript(new_temp1, inject_int(0), new_temp0)
if(is_true(new_temp1)):

	new_temp2 = inject_int(2)
else:

	new_temp2 = new_temp1
new_temp3 = new_temp2
print(new_temp3)
--------------Explicate code-------
new_temp0 = inject_big(create_dict())
new_temp1 = inject_big(create_list(inject_int(1)))
set_subscript(new_temp1, inject_int(0), new_temp0)
if is_true(new_temp1):
    new_temp2 = inject_int(2)
else:
    new_temp2 = new_temp1
new_temp3 = new_temp2
print(new_temp3)


--- explicated flattened python ---
new_temp4 = create_dict()
new_temp5 = inject_big(new_temp4)
new_temp0 = new_temp5
new_temp6 = inject_int(1)
new_temp7 = create_list(new_temp6)
new_temp8 = inject_big(new_temp7)
new_temp1 = new_temp8
new_temp9 = inject_int(0)
set_subscript(new_temp1, new_temp9, new_temp0)
new_temp10 = is_true(new_temp1)
if new_temp10:
    new_temp11 = inject_int(2)
    new_temp2 = new_temp11
else:
    new_temp2 = new_temp1
new_temp3 = new_temp2
print(new_temp3)


--- x86 IR ---
call  create_dict 
movl  eax ,  new_temp4
call  inject_big new_temp4
movl  eax ,  new_temp5
movl  new_temp5 ,  new_temp0
call  inject_int 1
movl  eax ,  new_temp6
call  create_list new_temp6
movl  eax ,  new_temp7
call  inject_big new_temp7
movl  eax ,  new_temp8
movl  new_temp8 ,  new_temp1
call  inject_int 0
movl  eax ,  new_temp9
call  set_subscript new_temp1,new_temp9,new_temp0
call  is_true new_temp1
movl  eax ,  new_temp10
if1
cmp 0, new_temp10
je else1
then1
call  inject_int 2
movl  eax ,  new_temp11
movl  new_temp11 ,  new_temp2
else1
movl  new_temp1 ,  new_temp2
end if1
movl  new_temp2 ,  new_temp3
call  print new_temp3


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp4': set(), 'new_temp5': set(), 'new_temp0': {'new_temp1', 'new_temp8', 'edx', 'ecx', 'eax', 'new_temp7', 'new_temp6', 'new_temp9'}, 'eax': {'new_temp1', 'new_temp0'}, 'ecx': {'new_temp1', 'new_temp0'}, 'edx': {'new_temp1', 'new_temp0'}, 'new_temp6': {'new_temp0'}, 'new_temp7': {'new_temp0'}, 'new_temp8': {'new_temp0'}, 'new_temp1': {'new_temp10', 'edx', 'new_temp0', 'ecx', 'new_temp9', 'eax'}, 'new_temp9': {'new_temp1', 'new_temp0'}, 'new_temp10': {'new_temp1'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp11': set(), 'new_temp2': set(), 'new_temp3': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp0': 4, 'new_temp1': 5, 'new_temp9': 1, 'new_temp6': 1, 'new_temp7': 1, 'new_temp10': 1, 'new_temp8': 1, 'new_temp11': 1, 'new_temp2': 1, 'new_temp4': 1, 'new_temp3': 1, 'new_temp5': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp0': 'edi', 'new_temp1': 'ebx', 'new_temp9': 'eax', 'new_temp6': 'eax', 'new_temp7': 'eax', 'new_temp10': 'eax', 'new_temp8': 'eax', 'new_temp11': 'eax', 'new_temp2': 'eax', 'new_temp4': 'eax', 'new_temp3': 'eax', 'new_temp5': 'eax'}
new_temp4
new_temp4
new_temp5
new_temp5
new_temp0
new_temp6
new_temp6
new_temp7
new_temp7
new_temp8
new_temp8
new_temp1
new_temp9
new_temp0
new_temp9
new_temp1
new_temp1
new_temp10
new_temp10
new_temp11
new_temp11
new_temp2
new_temp1
new_temp2
new_temp2
new_temp3
new_temp3
