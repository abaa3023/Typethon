------------------CORRECT TREE--------------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=UnaryOp(
                            op=Not(),
                            operand=UnaryOp(
                                op=Not(),
                                operand=List(elts=[], ctx=Load()))),
                        op=Add(),
                        right=Constant(value=1))],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=UnaryOp(
                            op=Not(),
                            operand=UnaryOp(
                                op=Not(),
                                operand=List(elts=[], ctx=Load()))),
                        op=Add(),
                        right=Constant(value=1))],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
print((not not []) + 1)
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         BinOp(
                              left=UnaryOp(
                                   op=Not(),
                                   operand=UnaryOp(
                                        op=Not(),
                                        operand=List(elts=[], ctx=Load()))),
                              op=Add(),
                              right=Constant(value=1))],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=List(elts=[], ctx=Load())),
          If(
               test=Name(id='new_temp0', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp1', ctx=Store())],
                         value=Constant(value=False))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp1', ctx=Store())],
                         value=Constant(value=True))]),
          If(
               test=Name(id='new_temp1', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Constant(value=False))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Constant(value=True))]),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=BinOp(
                    left=Name(id='new_temp2', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp3', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = []
if new_temp0:
    new_temp1 = False
else:
    new_temp1 = True
if new_temp1:
    new_temp2 = False
else:
    new_temp2 = True
new_temp3 = new_temp2 + 1
print(new_temp3)
<ast.List object at 0x7fb48f95c100>
<ast.Constant object at 0x7fb48f980370>
<ast.Constant object at 0x7fb48f980610>
<ast.Constant object at 0x7fb48f9802e0>
<ast.Constant object at 0x7fb48f980700>
inject_big(add(project_big(explicate_4),project_big(explicate_5)))
inject_int(explicate_6+explicate_7)

new_temp0 = inject_big(create_list(inject_int(0)))
if(is_true(new_temp0)):

	new_temp1 = inject_bool(0)
else:

	new_temp1 = inject_bool(1)
if(is_true(new_temp1)):

	new_temp2 = inject_bool(0)
else:

	new_temp2 = inject_bool(1)
explicate_4 = new_temp2
explicate_5 = inject_int(1)
if(is_big(explicate_4)):
	if(is_big(explicate_5)):
		new_temp3 = inject_big(add(project_big(explicate_4),project_big(explicate_5)))
else:
	if(is_big(explicate_5)):
		error_pyobj(0)
	else:
		if(is_int(explicate_4)):
			explicate_6 = project_int(explicate_4)
		else:
			explicate_6 = project_bool(explicate_4)
		if(is_int(explicate_5)):
			explicate_7 = project_int(explicate_5)
		else:
			explicate_7 = project_bool(explicate_5)
		new_temp3 = inject_int(explicate_6+explicate_7)
print(new_temp3)
--------------Explicate code-------
new_temp0 = inject_big(create_list(inject_int(0)))
if is_true(new_temp0):
    new_temp1 = inject_bool(0)
else:
    new_temp1 = inject_bool(1)
if is_true(new_temp1):
    new_temp2 = inject_bool(0)
else:
    new_temp2 = inject_bool(1)
explicate_4 = new_temp2
explicate_5 = inject_int(1)
if is_big(explicate_4):
    if is_big(explicate_5):
        new_temp3 = inject_big(add(project_big(explicate_4), project_big(explicate_5)))
elif is_big(explicate_5):
    error_pyobj(0)
else:
    if is_int(explicate_4):
        explicate_6 = project_int(explicate_4)
    else:
        explicate_6 = project_bool(explicate_4)
    if is_int(explicate_5):
        explicate_7 = project_int(explicate_5)
    else:
        explicate_7 = project_bool(explicate_5)
    new_temp3 = inject_int(explicate_6 + explicate_7)
print(new_temp3)


--- explicated flattened python ---
new_temp8 = inject_int(0)
new_temp9 = create_list(new_temp8)
new_temp10 = inject_big(new_temp9)
new_temp0 = new_temp10
new_temp11 = is_true(new_temp0)
if new_temp11:
    new_temp12 = inject_bool(0)
    new_temp1 = new_temp12
else:
    new_temp13 = inject_bool(1)
    new_temp1 = new_temp13
new_temp14 = is_true(new_temp1)
if new_temp14:
    new_temp15 = inject_bool(0)
    new_temp2 = new_temp15
else:
    new_temp16 = inject_bool(1)
    new_temp2 = new_temp16
explicate_4 = new_temp2
new_temp17 = inject_int(1)
explicate_5 = new_temp17
new_temp18 = is_big(explicate_4)
if new_temp18:
    new_temp19 = is_big(explicate_5)
    if new_temp19:
        new_temp20 = project_big(explicate_4)
        new_temp21 = project_big(explicate_5)
        new_temp22 = add(new_temp20, new_temp21)
        new_temp23 = inject_big(new_temp22)
        new_temp3 = new_temp23
else:
    new_temp24 = is_big(explicate_5)
    if new_temp24:
        error_pyobj(0)
    else:
        new_temp25 = is_int(explicate_4)
        if new_temp25:
            new_temp26 = project_int(explicate_4)
            explicate_6 = new_temp26
        else:
            new_temp27 = project_bool(explicate_4)
            explicate_6 = new_temp27
        new_temp28 = is_int(explicate_5)
        if new_temp28:
            new_temp29 = project_int(explicate_5)
            explicate_7 = new_temp29
        else:
            new_temp30 = project_bool(explicate_5)
            explicate_7 = new_temp30
        new_temp31 = explicate_6 + explicate_7
        new_temp32 = inject_int(new_temp31)
        new_temp3 = new_temp32
print(new_temp3)


--- x86 IR ---
call  inject_int 0
movl  eax ,  new_temp8
call  create_list new_temp8
movl  eax ,  new_temp9
call  inject_big new_temp9
movl  eax ,  new_temp10
movl  new_temp10 ,  new_temp0
call  is_true new_temp0
movl  eax ,  new_temp11
if1
cmp 0, new_temp11
je else1
then1
call  inject_bool 0
movl  eax ,  new_temp12
movl  new_temp12 ,  new_temp1
else1
call  inject_bool 1
movl  eax ,  new_temp13
movl  new_temp13 ,  new_temp1
end if1
call  is_true new_temp1
movl  eax ,  new_temp14
if2
cmp 0, new_temp14
je else2
then2
call  inject_bool 0
movl  eax ,  new_temp15
movl  new_temp15 ,  new_temp2
else2
call  inject_bool 1
movl  eax ,  new_temp16
movl  new_temp16 ,  new_temp2
end if2
movl  new_temp2 ,  explicate_4
call  inject_int 1
movl  eax ,  new_temp17
movl  new_temp17 ,  explicate_5
call  is_big explicate_4
movl  eax ,  new_temp18
if3
cmp 0, new_temp18
je else3
then3
call  is_big explicate_5
movl  eax ,  new_temp19
if4
cmp 0, new_temp19
je end if4
then4
call  project_big explicate_4
movl  eax ,  new_temp20
call  project_big explicate_5
movl  eax ,  new_temp21
call  add new_temp20,new_temp21
movl  eax ,  new_temp22
call  inject_big new_temp22
movl  eax ,  new_temp23
movl  new_temp23 ,  new_temp3
end if4
else3
call  is_big explicate_5
movl  eax ,  new_temp24
if4
cmp 0, new_temp24
je else4
then4
call  error_pyobj 0
else4
call  is_int explicate_4
movl  eax ,  new_temp25
if5
cmp 0, new_temp25
je else5
then5
call  project_int explicate_4
movl  eax ,  new_temp26
movl  new_temp26 ,  explicate_6
else5
call  project_bool explicate_4
movl  eax ,  new_temp27
movl  new_temp27 ,  explicate_6
end if5
call  is_int explicate_5
movl  eax ,  new_temp28
if6
cmp 0, new_temp28
je else6
then6
call  project_int explicate_5
movl  eax ,  new_temp29
movl  new_temp29 ,  explicate_7
else6
call  project_bool explicate_5
movl  eax ,  new_temp30
movl  new_temp30 ,  explicate_7
end if6
movl  explicate_6 ,  new_temp31
addl  explicate_7 ,  new_temp31
call  inject_int new_temp31
movl  eax ,  new_temp32
movl  new_temp32 ,  new_temp3
end if4
end if3
call  print new_temp3


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp3': {'new_temp10', 'new_temp19', 'ecx', 'new_temp17', 'new_temp14', 'new_temp9', 'new_temp16', 'new_temp12', 'explicate_5', 'new_temp2', 'new_temp0', 'new_temp24', 'new_temp8', 'edx', 'eax', 'new_temp15', 'explicate_4', 'new_temp1', 'new_temp13', 'new_temp18', 'new_temp11'}, 'eax': {'new_temp3', 'explicate_4', 'new_temp20', 'explicate_5', 'explicate_6'}, 'ecx': {'new_temp3', 'explicate_4', 'new_temp20', 'explicate_5', 'explicate_6'}, 'edx': {'new_temp3', 'explicate_4', 'new_temp20', 'explicate_5', 'explicate_6'}, 'new_temp8': {'new_temp3'}, 'new_temp9': {'new_temp3'}, 'new_temp10': {'new_temp3'}, 'new_temp0': {'new_temp3'}, 'new_temp11': {'new_temp3'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp12': {'new_temp3'}, 'new_temp1': {'new_temp3'}, 'new_temp13': {'new_temp3'}, 'new_temp14': {'new_temp3'}, 'new_temp15': {'new_temp3'}, 'new_temp2': {'new_temp3'}, 'new_temp16': {'new_temp3'}, 'explicate_4': {'new_temp24', 'new_temp19', 'ecx', 'edx', 'eax', 'new_temp3', 'new_temp17', 'explicate_5', 'new_temp18', 'new_temp25'}, 'new_temp17': {'explicate_4', 'new_temp3'}, 'explicate_5': {'new_temp24', 'new_temp27', 'new_temp26', 'new_temp19', 'ecx', 'edx', 'eax', 'new_temp3', 'explicate_4', 'new_temp20', 'new_temp18', 'new_temp25', 'new_temp28', 'explicate_6'}, 'new_temp18': {'explicate_4', 'explicate_5', 'new_temp3'}, 'new_temp19': {'explicate_4', 'explicate_5', 'new_temp3'}, 'new_temp24': {'explicate_4', 'explicate_5', 'new_temp3'}, 'new_temp20': {'ecx', 'edx', 'eax', 'new_temp21', 'explicate_5'}, 'new_temp21': {'new_temp20'}, 'new_temp22': set(), 'new_temp23': set(), 'new_temp25': {'explicate_4', 'explicate_5'}, 'new_temp26': {'explicate_5'}, 'explicate_6': {'ecx', 'explicate_7', 'edx', 'eax', 'new_temp30', 'new_temp29', 'explicate_5', 'new_temp28'}, 'new_temp27': {'explicate_5'}, 'new_temp28': {'explicate_5', 'explicate_6'}, 'new_temp29': {'explicate_6'}, 'explicate_7': {'new_temp31', 'explicate_6'}, 'new_temp30': {'explicate_6'}, 'new_temp31': {'explicate_7'}, 'new_temp32': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'explicate_4': 4, 'new_temp3': 5, 'explicate_5': 6, 'explicate_6': 4, 'new_temp20': 4, 'new_temp18': 1, 'new_temp24': 1, 'new_temp19': 1, 'new_temp28': 1, 'new_temp25': 1, 'new_temp17': 1, 'new_temp30': 1, 'new_temp11': 1, 'new_temp29': 1, 'new_temp13': 1, 'new_temp1': 1, 'new_temp15': 1, 'new_temp21': 1, 'new_temp8': 1, 'new_temp2': 1, 'new_temp12': 1, 'new_temp16': 1, 'new_temp9': 1, 'new_temp14': 1, 'explicate_7': 1, 'new_temp31': 2, 'new_temp26': 1, 'new_temp27': 1, 'new_temp10': 1, 'new_temp0': 1, 'new_temp23': 1, 'new_temp32': 1, 'new_temp22': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'explicate_4': 'edi', 'new_temp3': 'ebx', 'explicate_5': 'esi', 'explicate_6': 'edi', 'new_temp20': 'edi', 'new_temp18': 'eax', 'new_temp24': 'eax', 'new_temp19': 'eax', 'new_temp28': 'eax', 'new_temp25': 'eax', 'new_temp17': 'eax', 'new_temp30': 'eax', 'new_temp11': 'eax', 'new_temp29': 'eax', 'new_temp13': 'eax', 'new_temp1': 'eax', 'new_temp15': 'eax', 'new_temp21': 'eax', 'new_temp8': 'eax', 'new_temp2': 'eax', 'new_temp12': 'eax', 'new_temp16': 'eax', 'new_temp9': 'eax', 'new_temp14': 'eax', 'explicate_7': 'eax', 'new_temp31': 'ecx', 'new_temp26': 'eax', 'new_temp27': 'eax', 'new_temp10': 'eax', 'new_temp0': 'eax', 'new_temp23': 'eax', 'new_temp32': 'eax', 'new_temp22': 'eax'}
new_temp8
new_temp8
new_temp9
new_temp9
new_temp10
new_temp10
new_temp0
new_temp0
new_temp11
new_temp11
new_temp12
new_temp12
new_temp1
new_temp13
new_temp13
new_temp1
new_temp1
new_temp14
new_temp14
new_temp15
new_temp15
new_temp2
new_temp16
new_temp16
new_temp2
new_temp2
explicate_4
new_temp17
new_temp17
explicate_5
explicate_4
new_temp18
new_temp18
explicate_5
new_temp19
new_temp19
explicate_4
new_temp20
explicate_5
new_temp21
new_temp21
new_temp20
new_temp22
new_temp22
new_temp23
new_temp23
new_temp3
explicate_5
new_temp24
new_temp24
explicate_4
new_temp25
new_temp25
explicate_4
new_temp26
new_temp26
explicate_6
explicate_4
new_temp27
new_temp27
explicate_6
explicate_5
new_temp28
new_temp28
explicate_5
new_temp29
new_temp29
explicate_7
explicate_5
new_temp30
new_temp30
explicate_7
explicate_6
new_temp31
explicate_7
new_temp31
new_temp31
new_temp32
new_temp32
new_temp3
new_temp3
