Syntax error at '['
Syntax error at '['
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=List(
                elts=[
                    Constant(value=1),
                    List(
                        elts=[
                            Constant(value=2)],
                        ctx=Load())],
                ctx=Load())),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=List(
                elts=[
                    Constant(value=3),
                    List(
                        elts=[
                            Constant(value=4)],
                        ctx=Load())],
                ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=Name(id='y', ctx=Load()))],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=Name(id='y', ctx=Load()))],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = [1, [2]]
y = [3, [4]]
print(x + y)
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         BinOp(
                              left=Name(id='x', ctx=Load()),
                              op=Add(),
                              right=Name(id='y', ctx=Load()))],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Name(id='y', ctx=Load()))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp0', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = x + y
print(new_temp0)
inject_big(add(project_big(explicate_1),project_big(explicate_2)))
inject_int(explicate_3+explicate_4)

explicate_1 = x
explicate_2 = y
if(is_big(explicate_1)):
	if(is_big(explicate_2)):
		new_temp0 = inject_big(add(project_big(explicate_1),project_big(explicate_2)))
else:
	if(is_big(explicate_2)):
		error_pyobj(0)
	else:
		if(is_int(explicate_1)):
			explicate_3 = project_int(explicate_1)
		else:
			explicate_3 = project_bool(explicate_1)
		if(is_int(explicate_2)):
			explicate_4 = project_int(explicate_2)
		else:
			explicate_4 = project_bool(explicate_2)
		new_temp0 = inject_int(explicate_3+explicate_4)
print(new_temp0)
--------------Explicate code-------
explicate_1 = x
explicate_2 = y
if is_big(explicate_1):
    if is_big(explicate_2):
        new_temp0 = inject_big(add(project_big(explicate_1), project_big(explicate_2)))
elif is_big(explicate_2):
    error_pyobj(0)
else:
    if is_int(explicate_1):
        explicate_3 = project_int(explicate_1)
    else:
        explicate_3 = project_bool(explicate_1)
    if is_int(explicate_2):
        explicate_4 = project_int(explicate_2)
    else:
        explicate_4 = project_bool(explicate_2)
    new_temp0 = inject_int(explicate_3 + explicate_4)
print(new_temp0)


--- explicated flattened python ---
explicate_1 = x
explicate_2 = y
new_temp5 = is_big(explicate_1)
if new_temp5:
    new_temp6 = is_big(explicate_2)
    if new_temp6:
        new_temp7 = project_big(explicate_1)
        new_temp8 = project_big(explicate_2)
        new_temp9 = add(new_temp7, new_temp8)
        new_temp10 = inject_big(new_temp9)
        new_temp0 = new_temp10
else:
    new_temp11 = is_big(explicate_2)
    if new_temp11:
        error_pyobj(0)
    else:
        new_temp12 = is_int(explicate_1)
        if new_temp12:
            new_temp13 = project_int(explicate_1)
            explicate_3 = new_temp13
        else:
            new_temp14 = project_bool(explicate_1)
            explicate_3 = new_temp14
        new_temp15 = is_int(explicate_2)
        if new_temp15:
            new_temp16 = project_int(explicate_2)
            explicate_4 = new_temp16
        else:
            new_temp17 = project_bool(explicate_2)
            explicate_4 = new_temp17
        new_temp18 = explicate_3 + explicate_4
        new_temp19 = inject_int(new_temp18)
        new_temp0 = new_temp19
print(new_temp0)


--- x86 IR ---
movl  x ,  explicate_1
movl  y ,  explicate_2
call  is_big explicate_1
movl  eax ,  new_temp5
if1
cmp 0, new_temp5
je else1
then1
call  is_big explicate_2
movl  eax ,  new_temp6
if2
cmp 0, new_temp6
je end if2
then2
call  project_big explicate_1
movl  eax ,  new_temp7
call  project_big explicate_2
movl  eax ,  new_temp8
call  add new_temp7,new_temp8
movl  eax ,  new_temp9
call  inject_big new_temp9
movl  eax ,  new_temp10
movl  new_temp10 ,  new_temp0
end if2
else1
call  is_big explicate_2
movl  eax ,  new_temp11
if2
cmp 0, new_temp11
je else2
then2
call  error_pyobj 0
else2
call  is_int explicate_1
movl  eax ,  new_temp12
if3
cmp 0, new_temp12
je else3
then3
call  project_int explicate_1
movl  eax ,  new_temp13
movl  new_temp13 ,  explicate_3
else3
call  project_bool explicate_1
movl  eax ,  new_temp14
movl  new_temp14 ,  explicate_3
end if3
call  is_int explicate_2
movl  eax ,  new_temp15
if4
cmp 0, new_temp15
je else4
then4
call  project_int explicate_2
movl  eax ,  new_temp16
movl  new_temp16 ,  explicate_4
else4
call  project_bool explicate_2
movl  eax ,  new_temp17
movl  new_temp17 ,  explicate_4
end if4
movl  explicate_3 ,  new_temp18
addl  explicate_4 ,  new_temp18
call  inject_int new_temp18
movl  eax ,  new_temp19
movl  new_temp19 ,  new_temp0
end if2
end if1
call  print new_temp0


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'y': {'explicate_1'}, 'new_temp0': {'edx', 'ecx', 'new_temp11', 'new_temp6', 'eax', 'explicate_1', 'new_temp5', 'explicate_2'}, 'explicate_1': {'edx', 'new_temp0', 'ecx', 'y', 'new_temp11', 'new_temp12', 'new_temp6', 'eax', 'new_temp5', 'explicate_2'}, 'explicate_2': {'edx', 'new_temp7', 'new_temp0', 'ecx', 'new_temp11', 'new_temp12', 'new_temp6', 'eax', 'new_temp13', 'explicate_1', 'new_temp5', 'new_temp14', 'explicate_3', 'new_temp15'}, 'eax': {'new_temp7', 'new_temp0', 'explicate_1', 'explicate_3', 'explicate_2'}, 'ecx': {'new_temp7', 'new_temp0', 'explicate_1', 'explicate_3', 'explicate_2'}, 'edx': {'new_temp7', 'new_temp0', 'explicate_1', 'explicate_3', 'explicate_2'}, 'new_temp5': {'new_temp0', 'explicate_2', 'explicate_1'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp6': {'explicate_2', 'new_temp0', 'explicate_1'}, 'new_temp11': {'explicate_2', 'new_temp0', 'explicate_1'}, 'new_temp7': {'edx', 'ecx', 'new_temp8', 'eax', 'explicate_2'}, 'new_temp8': {'new_temp7'}, 'new_temp9': set(), 'new_temp10': set(), 'new_temp12': {'explicate_2', 'explicate_1'}, 'new_temp13': {'explicate_2'}, 'explicate_3': {'edx', 'new_temp17', 'ecx', 'explicate_4', 'eax', 'new_temp16', 'explicate_2', 'new_temp15'}, 'new_temp14': {'explicate_2'}, 'new_temp15': {'explicate_3', 'explicate_2'}, 'new_temp16': {'explicate_3'}, 'explicate_4': {'explicate_3', 'new_temp18'}, 'new_temp17': {'explicate_3'}, 'new_temp18': {'explicate_4'}, 'new_temp19': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp0': 4, 'explicate_1': 5, 'explicate_2': 6, 'new_temp7': 4, 'explicate_3': 4, 'new_temp5': 1, 'new_temp6': 1, 'new_temp11': 1, 'new_temp15': 1, 'new_temp12': 1, 'new_temp14': 1, 'new_temp16': 1, 'new_temp13': 1, 'new_temp8': 1, 'explicate_4': 1, 'new_temp18': 2, 'y': 1, 'new_temp17': 1, 'new_temp9': 1, 'new_temp19': 1, 'new_temp10': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp0': 'edi', 'explicate_1': 'ebx', 'explicate_2': 'esi', 'new_temp7': 'edi', 'explicate_3': 'edi', 'new_temp5': 'eax', 'new_temp6': 'eax', 'new_temp11': 'eax', 'new_temp15': 'eax', 'new_temp12': 'eax', 'new_temp14': 'eax', 'new_temp16': 'eax', 'new_temp13': 'eax', 'new_temp8': 'eax', 'explicate_4': 'eax', 'new_temp18': 'ecx', 'y': 'eax', 'new_temp17': 'eax', 'new_temp9': 'eax', 'new_temp19': 'eax', 'new_temp10': 'eax'}
x
