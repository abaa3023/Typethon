--------------Original code----------------
x = [1, [2]]
y = [3, [4]]
print(x + y)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=1),
                         List(
                              elts=[
                                   Constant(value=2)],
                              ctx=Load())],
                    ctx=Load())),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=3),
                         List(
                              elts=[
                                   Constant(value=4)],
                              ctx=Load())],
                    ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         BinOp(
                              left=Name(id='x', ctx=Load()),
                              op=Add(),
                              right=Name(id='y', ctx=Load()))],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=2)],
                    ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=1),
                         Name(id='new_temp0', ctx=Load())],
                    ctx=Load())),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp1', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=4)],
                    ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=3),
                         Name(id='new_temp2', ctx=Load())],
                    ctx=Load())),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='new_temp3', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Name(id='y', ctx=Load()))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp4', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = [2]
new_temp1 = [1, new_temp0]
x = new_temp1
new_temp2 = [4]
new_temp3 = [3, new_temp2]
y = new_temp3
new_temp4 = x + y
print(new_temp4)
<ast.List object at 0x7f10017ccee0>
<ast.List object at 0x7f10017ccf40>
<ast.Name object at 0x7f10017cd0c0>
<ast.List object at 0x7f10017ccdf0>
<ast.List object at 0x7f10017cce50>
<ast.Name object at 0x7f10017cd3c0>
inject_big(add(project_big(explicate_5),project_big(explicate_6)))
inject_int(explicate_7+explicate_8)

new_temp0 = inject_big(create_list(inject_int(1)))
set_subscript(new_temp0, inject_int(0), inject_int(2))
new_temp1 = inject_big(create_list(inject_int(2)))
set_subscript(new_temp1, inject_int(0), inject_int(1))
set_subscript(new_temp1, inject_int(1), new_temp0)
x = new_temp1
new_temp2 = inject_big(create_list(inject_int(1)))
set_subscript(new_temp2, inject_int(0), inject_int(4))
new_temp3 = inject_big(create_list(inject_int(2)))
set_subscript(new_temp3, inject_int(0), inject_int(3))
set_subscript(new_temp3, inject_int(1), new_temp2)
y = new_temp3
explicate_5 = x
explicate_6 = y
if(is_big(explicate_5)):
	if(is_big(explicate_6)):
		new_temp4 = inject_big(add(project_big(explicate_5),project_big(explicate_6)))
else:
	if(is_big(explicate_6)):
		error_pyobj(0)
	else:
		if(is_int(explicate_5)):
			explicate_7 = project_int(explicate_5)
		else:
			explicate_7 = project_bool(explicate_5)
		if(is_int(explicate_6)):
			explicate_8 = project_int(explicate_6)
		else:
			explicate_8 = project_bool(explicate_6)
		new_temp4 = inject_int(explicate_7+explicate_8)
print(new_temp4)
--------------Explicate code-------
new_temp0 = inject_big(create_list(inject_int(1)))
set_subscript(new_temp0, inject_int(0), inject_int(2))
new_temp1 = inject_big(create_list(inject_int(2)))
set_subscript(new_temp1, inject_int(0), inject_int(1))
set_subscript(new_temp1, inject_int(1), new_temp0)
x = new_temp1
new_temp2 = inject_big(create_list(inject_int(1)))
set_subscript(new_temp2, inject_int(0), inject_int(4))
new_temp3 = inject_big(create_list(inject_int(2)))
set_subscript(new_temp3, inject_int(0), inject_int(3))
set_subscript(new_temp3, inject_int(1), new_temp2)
y = new_temp3
explicate_5 = x
explicate_6 = y
if is_big(explicate_5):
    if is_big(explicate_6):
        new_temp4 = inject_big(add(project_big(explicate_5), project_big(explicate_6)))
elif is_big(explicate_6):
    error_pyobj(0)
else:
    if is_int(explicate_5):
        explicate_7 = project_int(explicate_5)
    else:
        explicate_7 = project_bool(explicate_5)
    if is_int(explicate_6):
        explicate_8 = project_int(explicate_6)
    else:
        explicate_8 = project_bool(explicate_6)
    new_temp4 = inject_int(explicate_7 + explicate_8)
print(new_temp4)


--- explicated flattened python ---
new_temp9 = inject_int(1)
new_temp10 = create_list(new_temp9)
new_temp11 = inject_big(new_temp10)
new_temp0 = new_temp11
new_temp12 = inject_int(0)
new_temp13 = inject_int(2)
set_subscript(new_temp0, new_temp12, new_temp13)
new_temp14 = inject_int(2)
new_temp15 = create_list(new_temp14)
new_temp16 = inject_big(new_temp15)
new_temp1 = new_temp16
new_temp17 = inject_int(0)
new_temp18 = inject_int(1)
set_subscript(new_temp1, new_temp17, new_temp18)
new_temp19 = inject_int(1)
set_subscript(new_temp1, new_temp19, new_temp0)
x = new_temp1
new_temp20 = inject_int(1)
new_temp21 = create_list(new_temp20)
new_temp22 = inject_big(new_temp21)
new_temp2 = new_temp22
new_temp23 = inject_int(0)
new_temp24 = inject_int(4)
set_subscript(new_temp2, new_temp23, new_temp24)
new_temp25 = inject_int(2)
new_temp26 = create_list(new_temp25)
new_temp27 = inject_big(new_temp26)
new_temp3 = new_temp27
new_temp28 = inject_int(0)
new_temp29 = inject_int(3)
set_subscript(new_temp3, new_temp28, new_temp29)
new_temp30 = inject_int(1)
set_subscript(new_temp3, new_temp30, new_temp2)
y = new_temp3
explicate_5 = x
explicate_6 = y
new_temp31 = is_big(explicate_5)
if new_temp31:
    new_temp32 = is_big(explicate_6)
    if new_temp32:
        new_temp33 = project_big(explicate_5)
        new_temp34 = project_big(explicate_6)
        new_temp35 = add(new_temp33, new_temp34)
        new_temp36 = inject_big(new_temp35)
        new_temp4 = new_temp36
else:
    new_temp37 = is_big(explicate_6)
    if new_temp37:
        error_pyobj(0)
    else:
        new_temp38 = is_int(explicate_5)
        if new_temp38:
            new_temp39 = project_int(explicate_5)
            explicate_7 = new_temp39
        else:
            new_temp40 = project_bool(explicate_5)
            explicate_7 = new_temp40
        new_temp41 = is_int(explicate_6)
        if new_temp41:
            new_temp42 = project_int(explicate_6)
            explicate_8 = new_temp42
        else:
            new_temp43 = project_bool(explicate_6)
            explicate_8 = new_temp43
        new_temp44 = explicate_7 + explicate_8
        new_temp45 = inject_int(new_temp44)
        new_temp4 = new_temp45
print(new_temp4)


--- x86 IR ---
call  inject_int 1
movl  eax ,  new_temp9
call  create_list new_temp9
movl  eax ,  new_temp10
call  inject_big new_temp10
movl  eax ,  new_temp11
movl  new_temp11 ,  new_temp0
call  inject_int 0
movl  eax ,  new_temp12
call  inject_int 2
movl  eax ,  new_temp13
call  set_subscript new_temp0,new_temp12,new_temp13
call  inject_int 2
movl  eax ,  new_temp14
call  create_list new_temp14
movl  eax ,  new_temp15
call  inject_big new_temp15
movl  eax ,  new_temp16
movl  new_temp16 ,  new_temp1
call  inject_int 0
movl  eax ,  new_temp17
call  inject_int 1
movl  eax ,  new_temp18
call  set_subscript new_temp1,new_temp17,new_temp18
call  inject_int 1
movl  eax ,  new_temp19
call  set_subscript new_temp1,new_temp19,new_temp0
movl  new_temp1 ,  x
call  inject_int 1
movl  eax ,  new_temp20
call  create_list new_temp20
movl  eax ,  new_temp21
call  inject_big new_temp21
movl  eax ,  new_temp22
movl  new_temp22 ,  new_temp2
call  inject_int 0
movl  eax ,  new_temp23
call  inject_int 4
movl  eax ,  new_temp24
call  set_subscript new_temp2,new_temp23,new_temp24
call  inject_int 2
movl  eax ,  new_temp25
call  create_list new_temp25
movl  eax ,  new_temp26
call  inject_big new_temp26
movl  eax ,  new_temp27
movl  new_temp27 ,  new_temp3
call  inject_int 0
movl  eax ,  new_temp28
call  inject_int 3
movl  eax ,  new_temp29
call  set_subscript new_temp3,new_temp28,new_temp29
call  inject_int 1
movl  eax ,  new_temp30
call  set_subscript new_temp3,new_temp30,new_temp2
movl  new_temp3 ,  y
movl  x ,  explicate_5
movl  y ,  explicate_6
call  is_big explicate_5
movl  eax ,  new_temp31
if1
cmp 0, new_temp31
je else1
then1
call  is_big explicate_6
movl  eax ,  new_temp32
if2
cmp 0, new_temp32
je end if2
then2
call  project_big explicate_5
movl  eax ,  new_temp33
call  project_big explicate_6
movl  eax ,  new_temp34
call  add new_temp33,new_temp34
movl  eax ,  new_temp35
call  inject_big new_temp35
movl  eax ,  new_temp36
movl  new_temp36 ,  new_temp4
end if2
else1
call  is_big explicate_6
movl  eax ,  new_temp37
if2
cmp 0, new_temp37
je else2
then2
call  error_pyobj 0
else2
call  is_int explicate_5
movl  eax ,  new_temp38
if3
cmp 0, new_temp38
je else3
then3
call  project_int explicate_5
movl  eax ,  new_temp39
movl  new_temp39 ,  explicate_7
else3
call  project_bool explicate_5
movl  eax ,  new_temp40
movl  new_temp40 ,  explicate_7
end if3
call  is_int explicate_6
movl  eax ,  new_temp41
if4
cmp 0, new_temp41
je else4
then4
call  project_int explicate_6
movl  eax ,  new_temp42
movl  new_temp42 ,  explicate_8
else4
call  project_bool explicate_6
movl  eax ,  new_temp43
movl  new_temp43 ,  explicate_8
end if4
movl  explicate_7 ,  new_temp44
addl  explicate_8 ,  new_temp44
call  inject_int new_temp44
movl  eax ,  new_temp45
movl  new_temp45 ,  new_temp4
end if2
end if1
call  print new_temp4


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp4': {'new_temp24', 'new_temp37', 'new_temp23', 'edx', 'new_temp30', 'ecx', 'explicate_5', 'new_temp9', 'new_temp31', 'new_temp26', 'new_temp1', 'new_temp25', 'eax', 'new_temp13', 'new_temp29', 'new_temp11', 'new_temp17', 'y', 'explicate_6', 'new_temp20', 'new_temp10', 'new_temp28', 'new_temp15', 'new_temp12', 'new_temp27', 'new_temp2', 'x', 'new_temp0', 'new_temp16', 'new_temp14', 'new_temp21', 'new_temp22', 'new_temp19', 'new_temp3', 'new_temp18', 'new_temp32'}, 'eax': {'x', 'new_temp0', 'new_temp17', 'explicate_6', 'new_temp23', 'new_temp4', 'new_temp3', 'explicate_5', 'new_temp28', 'explicate_7', 'new_temp12', 'new_temp1', 'new_temp2', 'new_temp33'}, 'ecx': {'x', 'new_temp0', 'new_temp17', 'explicate_6', 'new_temp23', 'new_temp4', 'new_temp3', 'explicate_5', 'new_temp28', 'explicate_7', 'new_temp12', 'new_temp1', 'new_temp2', 'new_temp33'}, 'edx': {'x', 'new_temp0', 'new_temp17', 'explicate_6', 'new_temp23', 'new_temp4', 'new_temp3', 'explicate_5', 'new_temp28', 'explicate_7', 'new_temp12', 'new_temp1', 'new_temp2', 'new_temp33'}, 'new_temp9': {'new_temp4'}, 'new_temp10': {'new_temp4'}, 'new_temp11': {'new_temp4'}, 'new_temp0': {'new_temp17', 'eax', 'new_temp14', 'new_temp16', 'new_temp13', 'edx', 'new_temp4', 'new_temp19', 'ecx', 'new_temp15', 'new_temp12', 'new_temp1', 'new_temp18'}, 'new_temp12': {'new_temp0', 'eax', 'new_temp13', 'edx', 'new_temp4', 'ecx'}, 'new_temp13': {'new_temp4', 'new_temp0', 'new_temp12'}, 'new_temp14': {'new_temp4', 'new_temp0'}, 'new_temp15': {'new_temp4', 'new_temp0'}, 'new_temp16': {'new_temp4', 'new_temp0'}, 'new_temp1': {'new_temp0', 'eax', 'edx', 'new_temp4', 'new_temp19', 'ecx', 'new_temp17', 'new_temp18'}, 'new_temp17': {'new_temp0', 'eax', 'new_temp1', 'new_temp4', 'ecx', 'new_temp18', 'edx'}, 'new_temp18': {'new_temp17', 'new_temp1', 'new_temp0', 'new_temp4'}, 'new_temp19': {'new_temp1', 'new_temp4', 'new_temp0'}, 'x': {'y', 'new_temp24', 'new_temp23', 'edx', 'new_temp30', 'new_temp20', 'ecx', 'new_temp28', 'new_temp26', 'new_temp27', 'new_temp2', 'new_temp25', 'eax', 'new_temp21', 'new_temp4', 'new_temp22', 'new_temp29', 'new_temp3'}, 'new_temp20': {'x', 'new_temp4'}, 'new_temp21': {'x', 'new_temp4'}, 'new_temp22': {'x', 'new_temp4'}, 'new_temp2': {'x', 'eax', 'new_temp24', 'new_temp23', 'edx', 'new_temp4', 'new_temp30', 'ecx', 'new_temp29', 'new_temp3', 'new_temp28', 'new_temp26', 'new_temp27', 'new_temp25'}, 'new_temp23': {'x', 'eax', 'new_temp24', 'edx', 'new_temp4', 'ecx', 'new_temp2'}, 'new_temp24': {'x', 'new_temp4', 'new_temp2', 'new_temp23'}, 'new_temp25': {'x', 'new_temp2', 'new_temp4'}, 'new_temp26': {'x', 'new_temp2', 'new_temp4'}, 'new_temp27': {'x', 'new_temp2', 'new_temp4'}, 'new_temp3': {'x', 'eax', 'edx', 'new_temp4', 'new_temp30', 'ecx', 'new_temp29', 'new_temp28', 'new_temp2'}, 'new_temp28': {'x', 'new_temp29', 'eax', 'edx', 'new_temp4', 'ecx', 'new_temp2', 'new_temp3'}, 'new_temp29': {'x', 'new_temp28', 'new_temp4', 'new_temp2', 'new_temp3'}, 'new_temp30': {'x', 'new_temp3', 'new_temp2', 'new_temp4'}, 'y': {'new_temp4', 'x', 'explicate_5'}, 'explicate_5': {'y', 'explicate_6', 'eax', 'new_temp37', 'edx', 'new_temp4', 'ecx', 'new_temp31', 'new_temp38', 'new_temp32'}, 'explicate_6': {'eax', 'new_temp40', 'new_temp37', 'edx', 'new_temp4', 'ecx', 'explicate_5', 'new_temp41', 'new_temp31', 'new_temp38', 'new_temp33', 'explicate_7', 'new_temp32', 'new_temp39'}, 'new_temp31': {'new_temp4', 'explicate_6', 'explicate_5'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp32': {'new_temp4', 'explicate_6', 'explicate_5'}, 'new_temp37': {'new_temp4', 'explicate_6', 'explicate_5'}, 'new_temp33': {'eax', 'explicate_6', 'edx', 'new_temp34', 'ecx'}, 'new_temp34': {'new_temp33'}, 'new_temp35': set(), 'new_temp36': set(), 'new_temp38': {'explicate_6', 'explicate_5'}, 'new_temp39': {'explicate_6'}, 'explicate_7': {'explicate_8', 'eax', 'explicate_6', 'edx', 'new_temp43', 'ecx', 'new_temp41', 'new_temp42'}, 'new_temp40': {'explicate_6'}, 'new_temp41': {'explicate_6', 'explicate_7'}, 'new_temp42': {'explicate_7'}, 'explicate_8': {'explicate_7', 'new_temp44'}, 'new_temp43': {'explicate_7'}, 'new_temp44': {'explicate_8'}, 'new_temp45': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp3': 4, 'x': 5, 'new_temp2': 6, 'new_temp28': 7, 'new_temp4': 7, 'new_temp23': 4, 'new_temp33': 4, 'explicate_6': 5, 'explicate_7': 4, 'explicate_5': 4, 'new_temp0': 4, 'new_temp12': 5, 'new_temp17': 5, 'new_temp1': 6, 'new_temp18': 1, 'new_temp29': 1, 'new_temp30': 1, 'new_temp24': 1, 'new_temp32': 1, 'new_temp38': 1, 'new_temp41': 1, 'new_temp19': 1, 'new_temp13': 1, 'new_temp25': 1, 'new_temp27': 1, 'new_temp26': 1, 'new_temp31': 1, 'new_temp37': 1, 'y': 1, 'new_temp43': 1, 'new_temp34': 1, 'new_temp22': 1, 'new_temp21': 1, 'new_temp14': 1, 'new_temp39': 1, 'new_temp42': 1, 'new_temp15': 1, 'new_temp20': 1, 'new_temp40': 1, 'new_temp16': 1, 'explicate_8': 1, 'new_temp44': 2, 'new_temp36': 1, 'new_temp11': 1, 'new_temp10': 1, 'new_temp35': 1, 'new_temp45': 1, 'new_temp9': 1}
Spilled set:
 {'new_temp28', 'new_temp4'}


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp28': -4, 'new_temp4': -8, 'new_temp3': 'edi', 'x': 'ebx', 'new_temp2': 'esi', 'new_temp23': 'edi', 'new_temp33': 'edi', 'explicate_6': 'ebx', 'explicate_7': 'edi', 'explicate_5': 'edi', 'new_temp0': 'edi', 'new_temp12': 'ebx', 'new_temp17': 'ebx', 'new_temp1': 'esi', 'new_temp18': 'eax', 'new_temp29': 'eax', 'new_temp30': 'eax', 'new_temp24': 'eax', 'new_temp32': 'eax', 'new_temp38': 'eax', 'new_temp41': 'eax', 'new_temp19': 'eax', 'new_temp13': 'eax', 'new_temp25': 'eax', 'new_temp27': 'eax', 'new_temp26': 'eax', 'new_temp31': 'eax', 'new_temp37': 'eax', 'y': 'eax', 'new_temp43': 'eax', 'new_temp34': 'eax', 'new_temp22': 'eax', 'new_temp21': 'eax', 'new_temp14': 'eax', 'new_temp39': 'eax', 'new_temp42': 'eax', 'new_temp15': 'eax', 'new_temp20': 'eax', 'new_temp40': 'eax', 'new_temp16': 'eax', 'explicate_8': 'eax', 'new_temp44': 'ecx', 'new_temp36': 'eax', 'new_temp11': 'eax', 'new_temp10': 'eax', 'new_temp35': 'eax', 'new_temp45': 'eax', 'new_temp9': 'eax'}
new_temp9
new_temp9
new_temp10
new_temp10
new_temp11
new_temp11
new_temp0
new_temp12
new_temp13
new_temp13
new_temp12
new_temp0
new_temp14
new_temp14
new_temp15
new_temp15
new_temp16
new_temp16
new_temp1
new_temp17
new_temp18
new_temp18
new_temp17
new_temp1
new_temp19
new_temp0
new_temp19
new_temp1
new_temp1
x
new_temp20
new_temp20
new_temp21
new_temp21
new_temp22
new_temp22
new_temp2
new_temp23
new_temp24
new_temp24
new_temp23
new_temp2
new_temp25
new_temp25
new_temp26
new_temp26
new_temp27
new_temp27
new_temp3
new_temp29
new_temp29
new_temp3
new_temp30
new_temp2
new_temp30
new_temp3
new_temp3
y
x
explicate_5
y
explicate_6
explicate_5
new_temp31
new_temp31
explicate_6
new_temp32
new_temp32
explicate_5
new_temp33
explicate_6
new_temp34
new_temp34
new_temp33
new_temp35
new_temp35
new_temp36
new_temp36
explicate_6
new_temp37
new_temp37
explicate_5
new_temp38
new_temp38
explicate_5
new_temp39
new_temp39
explicate_7
explicate_5
new_temp40
new_temp40
explicate_7
explicate_6
new_temp41
new_temp41
explicate_6
new_temp42
new_temp42
explicate_8
explicate_6
new_temp43
new_temp43
explicate_8
explicate_7
new_temp44
explicate_8
new_temp44
new_temp44
new_temp45
new_temp45
