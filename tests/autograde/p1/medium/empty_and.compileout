--------------Original code----------------
print([] and 1)
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         BoolOp(
                              op=And(),
                              values=[
                                   List(elts=[], ctx=Load()),
                                   Constant(value=1)])],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=List(elts=[], ctx=Load())),
          If(
               test=Name(id='new_temp0', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp1', ctx=Store())],
                         value=Constant(value=1))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp1', ctx=Store())],
                         value=Name(id='new_temp0', ctx=Load()))]),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=Name(id='new_temp1', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp2', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = []
if new_temp0:
    new_temp1 = 1
else:
    new_temp1 = new_temp0
new_temp2 = new_temp1
print(new_temp2)
<ast.List object at 0x7f84e1d34c10>
<ast.Constant object at 0x7f84e1d34be0>
<ast.Name object at 0x7f84e1d350c0>
<ast.Name object at 0x7f84e1d35330>

new_temp0 = inject_big(create_list(inject_int(0)))
if(is_true(new_temp0)):

	new_temp1 = inject_int(1)
else:

	new_temp1 = new_temp0
new_temp2 = new_temp1
print(new_temp2)
--------------Explicate code-------
new_temp0 = inject_big(create_list(inject_int(0)))
if is_true(new_temp0):
    new_temp1 = inject_int(1)
else:
    new_temp1 = new_temp0
new_temp2 = new_temp1
print(new_temp2)


--- explicated flattened python ---
new_temp3 = inject_int(0)
new_temp4 = create_list(new_temp3)
new_temp5 = inject_big(new_temp4)
new_temp0 = new_temp5
new_temp6 = is_true(new_temp0)
if new_temp6:
    new_temp7 = inject_int(1)
    new_temp1 = new_temp7
else:
    new_temp1 = new_temp0
new_temp2 = new_temp1
print(new_temp2)


--- x86 IR ---
call  inject_int 0
movl  eax ,  new_temp3
call  create_list new_temp3
movl  eax ,  new_temp4
call  inject_big new_temp4
movl  eax ,  new_temp5
movl  new_temp5 ,  new_temp0
call  is_true new_temp0
movl  eax ,  new_temp6
if1
cmp 0, new_temp6
je else1
then1
call  inject_int 1
movl  eax ,  new_temp7
movl  new_temp7 ,  new_temp1
else1
movl  new_temp0 ,  new_temp1
end if1
movl  new_temp1 ,  new_temp2
call  print new_temp2


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp3': set(), 'new_temp4': set(), 'new_temp5': set(), 'new_temp0': {'ecx', 'eax', 'edx', 'new_temp6'}, 'eax': {'new_temp0'}, 'ecx': {'new_temp0'}, 'edx': {'new_temp0'}, 'new_temp6': {'new_temp0'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp7': set(), 'new_temp1': set(), 'new_temp2': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp0': 4, 'new_temp6': 1, 'new_temp1': 1, 'new_temp5': 1, 'new_temp3': 1, 'new_temp2': 1, 'new_temp7': 1, 'new_temp4': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp0': 'edi', 'new_temp6': 'eax', 'new_temp1': 'eax', 'new_temp5': 'eax', 'new_temp3': 'eax', 'new_temp2': 'eax', 'new_temp7': 'eax', 'new_temp4': 'eax'}
new_temp3
new_temp3
new_temp4
new_temp4
new_temp5
new_temp5
new_temp0
new_temp0
new_temp6
new_temp6
new_temp7
new_temp7
new_temp1
new_temp0
new_temp1
new_temp1
new_temp2
new_temp2
