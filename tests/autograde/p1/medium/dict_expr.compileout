Illegal character '{'
Syntax error at ':'
Illegal character '}'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=Dict(
                keys=[
                    BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=Name(id='y', ctx=Load()))],
                values=[
                    BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=UnaryOp(
                            op=USub(),
                            operand=Name(id='y', ctx=Load())))]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        BinOp(
            left=Name(id='x', ctx=Load()),
            op=Add(),
            right=UnaryOp(
                op=USub(),
                operand=Name(id='y', ctx=Load())))],
    type_ignores=[])
--------------Original code----------------
x = 1
y = 2
z = { x + y : x + -y}
Module(
     body=[
          BinOp(
               left=Name(id='x', ctx=Load()),
               op=Add(),
               right=UnaryOp(
                    op=USub(),
                    operand=Name(id='y', ctx=Load())))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Name(id='y', ctx=Load())))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = -y
inject_int(-project_int(y))
inject_int(-project_bool(y))

if(is_int(y)):
	new_temp0 = inject_int(-project_int(y))
else:
	if(is_bool(y)):
		new_temp0 = inject_int(-project_bool(y))
--------------Explicate code-------
if is_int(y):
    new_temp0 = inject_int(-project_int(y))
elif is_bool(y):
    new_temp0 = inject_int(-project_bool(y))


--- explicated flattened python ---
new_temp1 = is_int(y)
if new_temp1:
    new_temp2 = project_int(y)
    new_temp3 = -new_temp2
    new_temp4 = inject_int(new_temp3)
    new_temp0 = new_temp4
else:
    new_temp5 = is_bool(y)
    if new_temp5:
        new_temp6 = project_bool(y)
        new_temp7 = -new_temp6
        new_temp8 = inject_int(new_temp7)
        new_temp0 = new_temp8


--- x86 IR ---
call  is_int y
movl  eax ,  new_temp1
if1
cmp 0, new_temp1
je else1
then1
call  project_int y
movl  eax ,  new_temp2
movl  new_temp2 ,  new_temp3
negl  new_temp3
call  inject_int new_temp3
movl  eax ,  new_temp4
movl  new_temp4 ,  new_temp0
else1
call  is_bool y
movl  eax ,  new_temp5
if2
cmp 0, new_temp5
je end if2
then2
call  project_bool y
movl  eax ,  new_temp6
movl  new_temp6 ,  new_temp7
negl  new_temp7
call  inject_int new_temp7
movl  eax ,  new_temp8
movl  new_temp8 ,  new_temp0
end if2
end if1


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'y': {'eax', 'ecx', 'new_temp5', 'edx', 'new_temp1'}, 'eax': {'y'}, 'ecx': {'y'}, 'edx': {'y'}, 'new_temp1': {'y'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp2': set(), 'new_temp3': set(), 'new_temp4': set(), 'new_temp0': set(), 'new_temp5': {'y'}, 'new_temp6': set(), 'new_temp7': set(), 'new_temp8': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'y': 4, 'new_temp1': 1, 'new_temp5': 1, 'new_temp8': 1, 'new_temp3': 1, 'new_temp7': 1, 'new_temp6': 1, 'new_temp2': 1, 'new_temp0': 1, 'new_temp4': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'y': 'edi', 'new_temp1': 'eax', 'new_temp5': 'eax', 'new_temp8': 'eax', 'new_temp3': 'eax', 'new_temp7': 'eax', 'new_temp6': 'eax', 'new_temp2': 'eax', 'new_temp0': 'eax', 'new_temp4': 'eax'}
y
new_temp1
new_temp1
y
new_temp2
new_temp2
new_temp3
new_temp3
new_temp3
new_temp4
new_temp4
new_temp0
y
new_temp5
new_temp5
y
new_temp6
new_temp6
new_temp7
new_temp7
new_temp7
new_temp8
new_temp8
new_temp0
