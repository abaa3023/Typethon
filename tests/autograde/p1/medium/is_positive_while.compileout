Illegal character '!'
Syntax error at '='
Illegal character ':'
Illegal character '!'
Illegal character ':'
Illegal character ':'
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BinOp(
                left=Name(id='x', ctx=Load()),
                op=Add(),
                right=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1)))),
        Assign(
            targets=[
                Name(id='positivity_counter', ctx=Store())],
            value=BinOp(
                left=Name(id='positivity_counter', ctx=Load()),
                op=Add(),
                right=Constant(value=1))),
        Expr(
            value=Name(id='if', ctx=Load())),
        Assign(
            targets=[
                Name(id='positivity_counter', ctx=Store())],
            value=Constant(value=0)),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Constant(value=1)],
                keywords=[])),
        Expr(
            value=Name(id='else', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Constant(value=0)],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = 12
positivity_counter = 0
while (x != 0):
    x = x + -1
    positivity_counter = positivity_counter + 1

if positivity_counter != 0:
    print(1)
else:
    print(0)


Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=UnaryOp(
                         op=USub(),
                         operand=Constant(value=1)))),
          Assign(
               targets=[
                    Name(id='positivity_counter', ctx=Store())],
               value=BinOp(
                    left=Name(id='positivity_counter', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='positivity_counter', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=1)],
                    keywords=[])),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=0)],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Name(id='new_temp0', ctx=Load()))),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp1', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=BinOp(
                    left=Name(id='positivity_counter', ctx=Load()),
                    op=Add(),
                    right=Constant(value=1))),
          Assign(
               targets=[
                    Name(id='positivity_counter', ctx=Store())],
               value=Name(id='new_temp2', ctx=Load())),
          Expr(
               value=Name(id='if', ctx=Load())),
          Assign(
               targets=[
                    Name(id='positivity_counter', ctx=Store())],
               value=Constant(value=0)),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=1)],
                    keywords=[])),
          Expr(
               value=Name(id='else', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=0)],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = -1
new_temp1 = x + new_temp0
x = new_temp1
new_temp2 = positivity_counter + 1
positivity_counter = new_temp2
if
positivity_counter = 0
print(1)
else
print(0)
inject_int(-1)
inject_big(add(project_big(explicate_3),project_big(explicate_4)))
inject_int(explicate_5+explicate_6)
<ast.Name object at 0x7f51c6569f60>
inject_big(add(project_big(explicate_7),project_big(explicate_8)))
inject_int(explicate_9+explicate_10)
<ast.Name object at 0x7f51c656a0e0>
<ast.Constant object at 0x7f51c65070d0>

new_temp0 = inject_int(-1)
explicate_3 = x
explicate_4 = new_temp0
if(is_big(explicate_3)):
	if(is_big(explicate_4)):
		new_temp1 = inject_big(add(project_big(explicate_3),project_big(explicate_4)))
else:
	if(is_big(explicate_4)):
		error_pyobj(0)
	else:
		if(is_int(explicate_3)):
			explicate_5 = project_int(explicate_3)
		else:
			explicate_5 = project_bool(explicate_3)
		if(is_int(explicate_4)):
			explicate_6 = project_int(explicate_4)
		else:
			explicate_6 = project_bool(explicate_4)
		new_temp1 = inject_int(explicate_5+explicate_6)
x = new_temp1
explicate_7 = positivity_counter
explicate_8 = inject_int(1)
if(is_big(explicate_7)):
	if(is_big(explicate_8)):
		new_temp2 = inject_big(add(project_big(explicate_7),project_big(explicate_8)))
else:
	if(is_big(explicate_8)):
		error_pyobj(0)
	else:
		if(is_int(explicate_7)):
			explicate_9 = project_int(explicate_7)
		else:
			explicate_9 = project_bool(explicate_7)
		if(is_int(explicate_8)):
			explicate_10 = project_int(explicate_8)
		else:
			explicate_10 = project_bool(explicate_8)
		new_temp2 = inject_int(explicate_9+explicate_10)
positivity_counter = new_temp2
positivity_counter = inject_int(0)
print(inject_int(1))
print(inject_int(0))
--------------Explicate code-------
new_temp0 = inject_int(-1)
explicate_3 = x
explicate_4 = new_temp0
if is_big(explicate_3):
    if is_big(explicate_4):
        new_temp1 = inject_big(add(project_big(explicate_3), project_big(explicate_4)))
elif is_big(explicate_4):
    error_pyobj(0)
else:
    if is_int(explicate_3):
        explicate_5 = project_int(explicate_3)
    else:
        explicate_5 = project_bool(explicate_3)
    if is_int(explicate_4):
        explicate_6 = project_int(explicate_4)
    else:
        explicate_6 = project_bool(explicate_4)
    new_temp1 = inject_int(explicate_5 + explicate_6)
x = new_temp1
explicate_7 = positivity_counter
explicate_8 = inject_int(1)
if is_big(explicate_7):
    if is_big(explicate_8):
        new_temp2 = inject_big(add(project_big(explicate_7), project_big(explicate_8)))
elif is_big(explicate_8):
    error_pyobj(0)
else:
    if is_int(explicate_7):
        explicate_9 = project_int(explicate_7)
    else:
        explicate_9 = project_bool(explicate_7)
    if is_int(explicate_8):
        explicate_10 = project_int(explicate_8)
    else:
        explicate_10 = project_bool(explicate_8)
    new_temp2 = inject_int(explicate_9 + explicate_10)
positivity_counter = new_temp2
positivity_counter = inject_int(0)
print(inject_int(1))
print(inject_int(0))


--- explicated flattened python ---
new_temp11 = -1
new_temp12 = inject_int(new_temp11)
new_temp0 = new_temp12
explicate_3 = x
explicate_4 = new_temp0
new_temp13 = is_big(explicate_3)
if new_temp13:
    new_temp14 = is_big(explicate_4)
    if new_temp14:
        new_temp15 = project_big(explicate_3)
        new_temp16 = project_big(explicate_4)
        new_temp17 = add(new_temp15, new_temp16)
        new_temp18 = inject_big(new_temp17)
        new_temp1 = new_temp18
else:
    new_temp19 = is_big(explicate_4)
    if new_temp19:
        error_pyobj(0)
    else:
        new_temp20 = is_int(explicate_3)
        if new_temp20:
            new_temp21 = project_int(explicate_3)
            explicate_5 = new_temp21
        else:
            new_temp22 = project_bool(explicate_3)
            explicate_5 = new_temp22
        new_temp23 = is_int(explicate_4)
        if new_temp23:
            new_temp24 = project_int(explicate_4)
            explicate_6 = new_temp24
        else:
            new_temp25 = project_bool(explicate_4)
            explicate_6 = new_temp25
        new_temp26 = explicate_5 + explicate_6
        new_temp27 = inject_int(new_temp26)
        new_temp1 = new_temp27
x = new_temp1
explicate_7 = positivity_counter
new_temp28 = inject_int(1)
explicate_8 = new_temp28
new_temp29 = is_big(explicate_7)
if new_temp29:
    new_temp30 = is_big(explicate_8)
    if new_temp30:
        new_temp31 = project_big(explicate_7)
        new_temp32 = project_big(explicate_8)
        new_temp33 = add(new_temp31, new_temp32)
        new_temp34 = inject_big(new_temp33)
        new_temp2 = new_temp34
else:
    new_temp35 = is_big(explicate_8)
    if new_temp35:
        error_pyobj(0)
    else:
        new_temp36 = is_int(explicate_7)
        if new_temp36:
            new_temp37 = project_int(explicate_7)
            explicate_9 = new_temp37
        else:
            new_temp38 = project_bool(explicate_7)
            explicate_9 = new_temp38
        new_temp39 = is_int(explicate_8)
        if new_temp39:
            new_temp40 = project_int(explicate_8)
            explicate_10 = new_temp40
        else:
            new_temp41 = project_bool(explicate_8)
            explicate_10 = new_temp41
        new_temp42 = explicate_9 + explicate_10
        new_temp43 = inject_int(new_temp42)
        new_temp2 = new_temp43
positivity_counter = new_temp2
new_temp44 = inject_int(0)
positivity_counter = new_temp44
new_temp45 = inject_int(1)
print(new_temp45)
new_temp46 = inject_int(0)
print(new_temp46)


--- x86 IR ---
movl  1 ,  new_temp11
negl  new_temp11
call  inject_int new_temp11
movl  eax ,  new_temp12
movl  new_temp12 ,  new_temp0
movl  x ,  explicate_3
movl  new_temp0 ,  explicate_4
call  is_big explicate_3
movl  eax ,  new_temp13
if1
cmp 0, new_temp13
je else1
then1
call  is_big explicate_4
movl  eax ,  new_temp14
if2
cmp 0, new_temp14
je end if2
then2
call  project_big explicate_3
movl  eax ,  new_temp15
call  project_big explicate_4
movl  eax ,  new_temp16
call  add new_temp15,new_temp16
movl  eax ,  new_temp17
call  inject_big new_temp17
movl  eax ,  new_temp18
movl  new_temp18 ,  new_temp1
end if2
else1
call  is_big explicate_4
movl  eax ,  new_temp19
if2
cmp 0, new_temp19
je else2
then2
call  error_pyobj 0
else2
call  is_int explicate_3
movl  eax ,  new_temp20
if3
cmp 0, new_temp20
je else3
then3
call  project_int explicate_3
movl  eax ,  new_temp21
movl  new_temp21 ,  explicate_5
else3
call  project_bool explicate_3
movl  eax ,  new_temp22
movl  new_temp22 ,  explicate_5
end if3
call  is_int explicate_4
movl  eax ,  new_temp23
if4
cmp 0, new_temp23
je else4
then4
call  project_int explicate_4
movl  eax ,  new_temp24
movl  new_temp24 ,  explicate_6
else4
call  project_bool explicate_4
movl  eax ,  new_temp25
movl  new_temp25 ,  explicate_6
end if4
movl  explicate_5 ,  new_temp26
addl  explicate_6 ,  new_temp26
call  inject_int new_temp26
movl  eax ,  new_temp27
movl  new_temp27 ,  new_temp1
end if2
end if1
movl  new_temp1 ,  x
movl  positivity_counter ,  explicate_7
call  inject_int 1
movl  eax ,  new_temp28
movl  new_temp28 ,  explicate_8
call  is_big explicate_7
movl  eax ,  new_temp29
if2
cmp 0, new_temp29
je else2
then2
call  is_big explicate_8
movl  eax ,  new_temp30
if3
cmp 0, new_temp30
je end if3
then3
call  project_big explicate_7
movl  eax ,  new_temp31
call  project_big explicate_8
movl  eax ,  new_temp32
call  add new_temp31,new_temp32
movl  eax ,  new_temp33
call  inject_big new_temp33
movl  eax ,  new_temp34
movl  new_temp34 ,  new_temp2
end if3
else2
call  is_big explicate_8
movl  eax ,  new_temp35
if3
cmp 0, new_temp35
je else3
then3
call  error_pyobj 0
else3
call  is_int explicate_7
movl  eax ,  new_temp36
if4
cmp 0, new_temp36
je else4
then4
call  project_int explicate_7
movl  eax ,  new_temp37
movl  new_temp37 ,  explicate_9
else4
call  project_bool explicate_7
movl  eax ,  new_temp38
movl  new_temp38 ,  explicate_9
end if4
call  is_int explicate_8
movl  eax ,  new_temp39
if5
cmp 0, new_temp39
je else5
then5
call  project_int explicate_8
movl  eax ,  new_temp40
movl  new_temp40 ,  explicate_10
else5
call  project_bool explicate_8
movl  eax ,  new_temp41
movl  new_temp41 ,  explicate_10
end if5
movl  explicate_9 ,  new_temp42
addl  explicate_10 ,  new_temp42
call  inject_int new_temp42
movl  eax ,  new_temp43
movl  new_temp43 ,  new_temp2
end if3
end if2
movl  new_temp2 ,  positivity_counter
call  inject_int 0
movl  eax ,  new_temp44
movl  new_temp44 ,  positivity_counter
call  inject_int 1
movl  eax ,  new_temp45
call  print new_temp45
call  inject_int 0
movl  eax ,  new_temp46
call  print new_temp46


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp2': {'new_temp30', 'explicate_4', 'new_temp19', 'explicate_3', 'explicate_5', 'new_temp1', 'explicate_6', 'new_temp25', 'edx', 'new_temp20', 'eax', 'new_temp22', 'new_temp14', 'new_temp23', 'new_temp28', 'explicate_7', 'new_temp21', 'new_temp18', 'new_temp24', 'new_temp13', 'new_temp0', 'new_temp27', 'ecx', 'new_temp26', 'new_temp17', 'new_temp12', 'new_temp11', 'new_temp29', 'x', 'new_temp15', 'explicate_8', 'new_temp35', 'new_temp16'}, 'positivity_counter': {'new_temp13', 'explicate_4', 'new_temp19', 'explicate_3', 'explicate_5', 'new_temp1', 'explicate_6', 'new_temp25', 'new_temp0', 'new_temp27', 'ecx', 'new_temp26', 'edx', 'new_temp17', 'new_temp12', 'new_temp20', 'new_temp11', 'x', 'eax', 'new_temp15', 'new_temp21', 'new_temp22', 'new_temp14', 'new_temp23', 'new_temp16', 'new_temp18', 'new_temp24'}, 'new_temp1': {'new_temp11', 'new_temp13', 'explicate_4', 'new_temp19', 'eax', 'explicate_3', 'new_temp14', 'new_temp2', 'positivity_counter', 'new_temp0', 'ecx', 'edx', 'new_temp12'}, 'x': {'new_temp2', 'new_temp11', 'positivity_counter', 'new_temp0', 'eax', 'ecx', 'edx', 'new_temp12'}, 'new_temp11': {'x', 'new_temp1', 'new_temp2', 'positivity_counter'}, 'eax': {'explicate_4', 'x', 'explicate_3', 'explicate_9', 'explicate_5', 'new_temp15', 'new_temp1', 'explicate_8', 'new_temp2', 'positivity_counter', 'explicate_7', 'new_temp31'}, 'ecx': {'explicate_4', 'x', 'explicate_3', 'explicate_9', 'explicate_5', 'new_temp15', 'new_temp1', 'explicate_8', 'new_temp2', 'positivity_counter', 'explicate_7', 'new_temp31'}, 'edx': {'explicate_4', 'x', 'explicate_3', 'explicate_9', 'explicate_5', 'new_temp15', 'new_temp1', 'explicate_8', 'new_temp2', 'positivity_counter', 'explicate_7', 'new_temp31'}, 'new_temp12': {'new_temp2', 'positivity_counter', 'new_temp1', 'x'}, 'new_temp0': {'x', 'explicate_3', 'new_temp1', 'new_temp2', 'positivity_counter'}, 'explicate_3': {'new_temp13', 'explicate_4', 'new_temp19', 'eax', 'new_temp1', 'new_temp14', 'new_temp2', 'positivity_counter', 'new_temp0', 'ecx', 'edx', 'new_temp20'}, 'explicate_4': {'new_temp13', 'new_temp19', 'explicate_3', 'eax', 'explicate_5', 'new_temp15', 'new_temp1', 'new_temp21', 'new_temp22', 'new_temp14', 'new_temp23', 'new_temp2', 'positivity_counter', 'ecx', 'edx', 'new_temp20'}, 'new_temp13': {'new_temp2', 'positivity_counter', 'explicate_4', 'explicate_3', 'new_temp1'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp14': {'new_temp2', 'positivity_counter', 'explicate_4', 'explicate_3', 'new_temp1'}, 'new_temp19': {'new_temp2', 'positivity_counter', 'explicate_4', 'explicate_3', 'new_temp1'}, 'new_temp15': {'new_temp2', 'positivity_counter', 'explicate_4', 'eax', 'ecx', 'edx', 'new_temp16'}, 'new_temp16': {'new_temp2', 'positivity_counter', 'new_temp15'}, 'new_temp17': {'new_temp2', 'positivity_counter'}, 'new_temp18': {'new_temp2', 'positivity_counter'}, 'explicate_7': {'new_temp30', 'new_temp36', 'new_temp29', 'eax', 'explicate_8', 'new_temp2', 'new_temp28', 'new_temp35', 'ecx', 'edx'}, 'new_temp28': {'new_temp2', 'explicate_7'}, 'explicate_8': {'new_temp30', 'new_temp36', 'new_temp29', 'explicate_9', 'eax', 'new_temp39', 'new_temp2', 'new_temp35', 'new_temp37', 'explicate_7', 'new_temp31', 'ecx', 'edx', 'new_temp38'}, 'new_temp29': {'explicate_8', 'new_temp2', 'explicate_7'}, 'new_temp20': {'new_temp2', 'positivity_counter', 'explicate_4', 'explicate_3'}, 'new_temp30': {'explicate_8', 'new_temp2', 'explicate_7'}, 'new_temp35': {'explicate_8', 'new_temp2', 'explicate_7'}, 'new_temp21': {'new_temp2', 'positivity_counter', 'explicate_4'}, 'explicate_5': {'explicate_4', 'eax', 'explicate_6', 'new_temp23', 'new_temp2', 'positivity_counter', 'new_temp25', 'ecx', 'edx', 'new_temp24'}, 'new_temp22': {'new_temp2', 'positivity_counter', 'explicate_4'}, 'new_temp31': {'eax', 'explicate_8', 'new_temp32', 'ecx', 'edx'}, 'new_temp32': {'new_temp31'}, 'new_temp33': set(), 'new_temp34': set(), 'new_temp44': set(), 'new_temp45': set(), 'new_temp46': set(), 'new_temp36': {'explicate_8', 'explicate_7'}, 'new_temp23': {'explicate_5', 'new_temp2', 'positivity_counter', 'explicate_4'}, 'new_temp37': {'explicate_8'}, 'explicate_9': {'eax', 'new_temp41', 'explicate_8', 'new_temp39', 'explicate_10', 'new_temp40', 'ecx', 'edx'}, 'new_temp38': {'explicate_8'}, 'new_temp24': {'explicate_5', 'new_temp2', 'positivity_counter'}, 'explicate_6': {'new_temp2', 'positivity_counter', 'explicate_5', 'new_temp26'}, 'new_temp25': {'explicate_5', 'new_temp2', 'positivity_counter'}, 'new_temp39': {'explicate_8', 'explicate_9'}, 'new_temp26': {'new_temp2', 'positivity_counter', 'explicate_6'}, 'new_temp27': {'new_temp2', 'positivity_counter'}, 'new_temp40': {'explicate_9'}, 'explicate_10': {'new_temp42', 'explicate_9'}, 'new_temp41': {'explicate_9'}, 'new_temp42': {'explicate_10'}, 'new_temp43': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp31': 4, 'explicate_8': 5, 'explicate_9': 4, 'new_temp2': 4, 'explicate_7': 6, 'new_temp15': 5, 'explicate_4': 6, 'positivity_counter': 4, 'new_temp1': 5, 'explicate_3': 7, 'explicate_5': 5, 'x': 5, 'new_temp29': 1, 'new_temp35': 1, 'new_temp13': 1, 'new_temp23': 1, 'new_temp14': 1, 'new_temp19': 1, 'new_temp30': 1, 'new_temp24': 1, 'new_temp21': 1, 'new_temp28': 1, 'new_temp16': 1, 'new_temp22': 1, 'new_temp11': 1, 'new_temp12': 1, 'new_temp36': 1, 'new_temp20': 1, 'new_temp0': 1, 'new_temp25': 1, 'new_temp39': 1, 'explicate_6': 1, 'new_temp26': 2, 'new_temp18': 1, 'new_temp32': 1, 'new_temp17': 1, 'new_temp38': 1, 'new_temp40': 1, 'new_temp27': 1, 'new_temp37': 1, 'explicate_10': 1, 'new_temp41': 1, 'new_temp42': 2, 'new_temp45': 1, 'new_temp33': 1, 'new_temp46': 1, 'new_temp34': 1, 'new_temp43': 1, 'new_temp44': 1}
Spilled set:
 {'explicate_3'}


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'explicate_3': -4, 'new_temp31': 'edi', 'explicate_8': 'ebx', 'explicate_9': 'edi', 'new_temp2': 'edi', 'explicate_7': 'esi', 'new_temp15': 'ebx', 'explicate_4': 'esi', 'positivity_counter': 'edi', 'new_temp1': 'ebx', 'explicate_5': 'ebx', 'x': 'ebx', 'new_temp29': 'eax', 'new_temp35': 'eax', 'new_temp13': 'eax', 'new_temp23': 'eax', 'new_temp14': 'eax', 'new_temp19': 'eax', 'new_temp30': 'eax', 'new_temp24': 'eax', 'new_temp21': 'eax', 'new_temp28': 'eax', 'new_temp16': 'eax', 'new_temp22': 'eax', 'new_temp11': 'eax', 'new_temp12': 'eax', 'new_temp36': 'eax', 'new_temp20': 'eax', 'new_temp0': 'eax', 'new_temp25': 'eax', 'new_temp39': 'eax', 'explicate_6': 'eax', 'new_temp26': 'ecx', 'new_temp18': 'eax', 'new_temp32': 'eax', 'new_temp17': 'eax', 'new_temp38': 'eax', 'new_temp40': 'eax', 'new_temp27': 'eax', 'new_temp37': 'eax', 'explicate_10': 'eax', 'new_temp41': 'eax', 'new_temp42': 'ecx', 'new_temp45': 'eax', 'new_temp33': 'eax', 'new_temp46': 'eax', 'new_temp34': 'eax', 'new_temp43': 'eax', 'new_temp44': 'eax'}
new_temp11
new_temp11
new_temp11
new_temp12
new_temp12
new_temp0
x
new_temp0
explicate_4
new_temp13
new_temp13
explicate_4
new_temp14
new_temp14
new_temp15
explicate_4
new_temp16
new_temp16
new_temp15
new_temp17
new_temp17
new_temp18
new_temp18
new_temp1
explicate_4
new_temp19
new_temp19
new_temp20
new_temp20
new_temp21
new_temp21
explicate_5
new_temp22
new_temp22
explicate_5
explicate_4
new_temp23
new_temp23
explicate_4
new_temp24
new_temp24
explicate_6
explicate_4
new_temp25
new_temp25
explicate_6
explicate_5
new_temp26
explicate_6
new_temp26
new_temp26
new_temp27
new_temp27
new_temp1
new_temp1
x
positivity_counter
explicate_7
new_temp28
new_temp28
explicate_8
explicate_7
new_temp29
new_temp29
explicate_8
new_temp30
new_temp30
explicate_7
new_temp31
explicate_8
new_temp32
new_temp32
new_temp31
new_temp33
new_temp33
new_temp34
new_temp34
new_temp2
explicate_8
new_temp35
new_temp35
explicate_7
new_temp36
new_temp36
explicate_7
new_temp37
new_temp37
explicate_9
explicate_7
new_temp38
new_temp38
explicate_9
explicate_8
new_temp39
new_temp39
explicate_8
new_temp40
new_temp40
explicate_10
explicate_8
new_temp41
new_temp41
explicate_10
explicate_9
new_temp42
explicate_10
new_temp42
new_temp42
new_temp43
new_temp43
new_temp2
new_temp2
positivity_counter
new_temp44
new_temp44
positivity_counter
new_temp45
new_temp45
new_temp46
new_temp46
