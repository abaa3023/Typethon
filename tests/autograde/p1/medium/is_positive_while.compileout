Syntax error at 'x'
Syntax error at 'print'
Syntax error at 'else'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=12)),
        Assign(
            targets=[
                Name(id='positivity_counter', ctx=Store())],
            value=Constant(value=0)),
        While(
            test=Compare(
                left=Name(id='x', ctx=Load()),
                ops=[
                    NotEq()],
                comparators=[
                    Constant(value=0)]),
            body=[
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=UnaryOp(
                            op=USub(),
                            operand=Constant(value=1)))),
                Assign(
                    targets=[
                        Name(id='positivity_counter', ctx=Store())],
                    value=BinOp(
                        left=Name(id='positivity_counter', ctx=Load()),
                        op=Add(),
                        right=Constant(value=1)))],
            orelse=[]),
        If(
            test=Compare(
                left=Name(id='positivity_counter', ctx=Load()),
                ops=[
                    NotEq()],
                comparators=[
                    Constant(value=0)]),
            body=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            orelse=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value=0)],
                        keywords=[]))])],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Constant(value=0)],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = 12
positivity_counter = 0
while (x != 0):
    x = x + -1
    positivity_counter = positivity_counter + 1

if positivity_counter != 0:
    print(1)
else:
    print(0)


Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=0)],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Constant(value=0)],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
print(0)

print(inject_int(0))
--------------Explicate code-------
print(inject_int(0))


--- explicated flattened python ---
new_temp0 = inject_int(0)
print(new_temp0)


--- x86 IR ---
call  inject_int 0
movl  eax ,  new_temp0
call  print new_temp0


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp0': set(), 'eax': set(), 'ecx': set(), 'edx': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp0': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp0': 'eax'}
new_temp0
new_temp0
