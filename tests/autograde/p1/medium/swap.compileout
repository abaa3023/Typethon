Illegal character '['
Illegal character ','
Illegal character ','
Illegal character ']'
Illegal character '['
Illegal character ','
Illegal character ','
Illegal character ']'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='a', ctx=Store())],
            value=List(
                elts=[
                    Constant(value=1),
                    Constant(value=2),
                    Constant(value=3)],
                ctx=Load())),
        Assign(
            targets=[
                Name(id='b', ctx=Store())],
            value=List(
                elts=[
                    Constant(value=4),
                    Constant(value=5),
                    Constant(value=6)],
                ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='a', ctx=Load())],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='b', ctx=Load())],
                keywords=[])),
        Assign(
            targets=[
                Name(id='tmp', ctx=Store())],
            value=Name(id='a', ctx=Load())),
        Assign(
            targets=[
                Name(id='a', ctx=Store())],
            value=Name(id='b', ctx=Load())),
        Assign(
            targets=[
                Name(id='b', ctx=Store())],
            value=Name(id='tmp', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='a', ctx=Load())],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='b', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='a', ctx=Store())],
            value=Constant(value=1)),
        Expr(
            value=Constant(value=2)),
        Expr(
            value=Constant(value=3)),
        Assign(
            targets=[
                Name(id='b', ctx=Store())],
            value=Constant(value=4)),
        Expr(
            value=Constant(value=5)),
        Expr(
            value=Constant(value=6)),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='a', ctx=Load())],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='b', ctx=Load())],
                keywords=[])),
        Assign(
            targets=[
                Name(id='tmp', ctx=Store())],
            value=Name(id='a', ctx=Load())),
        Assign(
            targets=[
                Name(id='a', ctx=Store())],
            value=Name(id='b', ctx=Load())),
        Assign(
            targets=[
                Name(id='b', ctx=Store())],
            value=Name(id='tmp', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='a', ctx=Load())],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='b', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
a = [1, 2, 3]
b = [4, 5, 6]
print(a)
print(b)
tmp = a
a = b
b = tmp
print(a)
print(b)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='a', ctx=Store())],
               value=Constant(value=1)),
          Expr(
               value=Constant(value=2)),
          Expr(
               value=Constant(value=3)),
          Assign(
               targets=[
                    Name(id='b', ctx=Store())],
               value=Constant(value=4)),
          Expr(
               value=Constant(value=5)),
          Expr(
               value=Constant(value=6)),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='a', ctx=Load())],
                    keywords=[])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='b', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='tmp', ctx=Store())],
               value=Name(id='a', ctx=Load())),
          Assign(
               targets=[
                    Name(id='a', ctx=Store())],
               value=Name(id='b', ctx=Load())),
          Assign(
               targets=[
                    Name(id='b', ctx=Store())],
               value=Name(id='tmp', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='a', ctx=Load())],
                    keywords=[])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='b', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='a', ctx=Store())],
               value=Constant(value=1)),
          Expr(
               value=Constant(value=2)),
          Expr(
               value=Constant(value=3)),
          Assign(
               targets=[
                    Name(id='b', ctx=Store())],
               value=Constant(value=4)),
          Expr(
               value=Constant(value=5)),
          Expr(
               value=Constant(value=6)),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='a', ctx=Load())],
                    keywords=[])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='b', ctx=Load())],
                    keywords=[])),
          Assign(
               targets=[
                    Name(id='tmp', ctx=Store())],
               value=Name(id='a', ctx=Load())),
          Assign(
               targets=[
                    Name(id='a', ctx=Store())],
               value=Name(id='b', ctx=Load())),
          Assign(
               targets=[
                    Name(id='b', ctx=Store())],
               value=Name(id='tmp', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='a', ctx=Load())],
                    keywords=[])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='b', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
a = 1
2
3
b = 4
5
6
print(a)
print(b)
tmp = a
a = b
b = tmp
print(a)
print(b)
<ast.Constant object at 0x7f03bbc1c610>
<ast.Constant object at 0x7f03bbc1dcc0>
<ast.Name object at 0x7f03bbc1e350>
<ast.Name object at 0x7f03bbc1e500>
<ast.Name object at 0x7f03bbc1e650>

a = inject_int(1)
b = inject_int(4)
print(a)
print(b)
tmp = a
a = b
b = tmp
print(a)
print(b)
--------------Explicate code-------
a = inject_int(1)
b = inject_int(4)
print(a)
print(b)
tmp = a
a = b
b = tmp
print(a)
print(b)


--- explicated flattened python ---
new_temp0 = inject_int(1)
a = new_temp0
new_temp1 = inject_int(4)
b = new_temp1
print(a)
print(b)
tmp = a
a = b
b = tmp
print(a)
print(b)


--- x86 IR ---
call  inject_int 1
movl  eax ,  new_temp0
movl  new_temp0 ,  a
call  inject_int 4
movl  eax ,  new_temp1
movl  new_temp1 ,  b
call  print a
call  print b
movl  a ,  tmp
movl  b ,  a
movl  tmp ,  b
call  print a
call  print b


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp0': set(), 'a': {'b', 'eax', 'tmp', 'new_temp1', 'ecx', 'edx'}, 'eax': {'b', 'a'}, 'ecx': {'b', 'a'}, 'edx': {'b', 'a'}, 'new_temp1': {'a'}, 'b': {'a', 'eax', 'tmp', 'ecx', 'edx'}, 'tmp': {'a', 'b'}, 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'a': 4, 'b': 5, 'tmp': 1, 'new_temp1': 1, 'new_temp0': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'a': 'edi', 'b': 'ebx', 'tmp': 'eax', 'new_temp1': 'eax', 'new_temp0': 'eax'}
new_temp0
new_temp0
a
new_temp1
new_temp1
b
a
b
a
tmp
b
a
tmp
b
a
b
