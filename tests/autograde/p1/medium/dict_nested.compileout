------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Dict(
                keys=[
                    Constant(value=1)],
                values=[
                    Constant(value=2)])),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Dict(
                keys=[
                    Constant(value=2)],
                values=[
                    Name(id='x', ctx=Load())])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='y', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Dict(
                keys=[
                    Constant(value=1)],
                values=[
                    Constant(value=2)])),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Dict(
                keys=[
                    Constant(value=2)],
                values=[
                    Name(id='x', ctx=Load())])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='y', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = { 1 : 2 }
y = { 2 : x}
print(y)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Dict(
                    keys=[
                         Constant(value=1)],
                    values=[
                         Constant(value=2)])),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Dict(
                    keys=[
                         Constant(value=2)],
                    values=[
                         Name(id='x', ctx=Load())])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='y', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Dict(
                    keys=[
                         Constant(value=1)],
                    values=[
                         Constant(value=2)])),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp0', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Dict(
                    keys=[
                         Constant(value=2)],
                    values=[
                         Name(id='x', ctx=Load())])),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='new_temp1', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='y', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = {1: 2}
x = new_temp0
new_temp1 = {2: x}
y = new_temp1
print(y)
<ast.Dict object at 0x7f1405078040>
<ast.Name object at 0x7f140509c2e0>
<ast.Dict object at 0x7f14050c3eb0>
<ast.Name object at 0x7f140509c490>

new_temp0 = inject_big(create_dict())
set_subscript(new_temp0, inject_int(1), inject_int(2))
x = new_temp0
new_temp1 = inject_big(create_dict())
set_subscript(new_temp1, inject_int(2), x)
y = new_temp1
print(y)
--------------Explicate code-------
new_temp0 = inject_big(create_dict())
set_subscript(new_temp0, inject_int(1), inject_int(2))
x = new_temp0
new_temp1 = inject_big(create_dict())
set_subscript(new_temp1, inject_int(2), x)
y = new_temp1
print(y)


--- explicated flattened python ---
new_temp2 = create_dict()
new_temp3 = inject_big(new_temp2)
new_temp0 = new_temp3
new_temp4 = inject_int(1)
new_temp5 = inject_int(2)
set_subscript(new_temp0, new_temp4, new_temp5)
x = new_temp0
new_temp6 = create_dict()
new_temp7 = inject_big(new_temp6)
new_temp1 = new_temp7
new_temp8 = inject_int(2)
set_subscript(new_temp1, new_temp8, x)
y = new_temp1
print(y)


--- x86 IR ---
call  create_dict 
movl  eax ,  new_temp2
call  inject_big new_temp2
movl  eax ,  new_temp3
movl  new_temp3 ,  new_temp0
call  inject_int 1
movl  eax ,  new_temp4
call  inject_int 2
movl  eax ,  new_temp5
call  set_subscript new_temp0,new_temp4,new_temp5
movl  new_temp0 ,  x
call  create_dict 
movl  eax ,  new_temp6
call  inject_big new_temp6
movl  eax ,  new_temp7
movl  new_temp7 ,  new_temp1
call  inject_int 2
movl  eax ,  new_temp8
call  set_subscript new_temp1,new_temp8,x
movl  new_temp1 ,  y
call  print y


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp2': set(), 'new_temp3': set(), 'new_temp0': {'eax', 'new_temp5', 'ecx', 'new_temp4', 'edx'}, 'eax': {'new_temp4', 'x', 'new_temp1', 'new_temp0'}, 'ecx': {'new_temp4', 'x', 'new_temp1', 'new_temp0'}, 'edx': {'new_temp4', 'x', 'new_temp1', 'new_temp0'}, 'new_temp4': {'eax', 'ecx', 'edx', 'new_temp0', 'new_temp5'}, 'new_temp5': {'new_temp4', 'new_temp0'}, 'x': {'eax', 'new_temp1', 'ecx', 'edx', 'new_temp6', 'new_temp8', 'new_temp7'}, 'new_temp6': {'x'}, 'new_temp7': {'x'}, 'new_temp1': {'new_temp8', 'eax', 'ecx', 'x', 'edx'}, 'new_temp8': {'x', 'new_temp1'}, 'y': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp0': 4, 'new_temp4': 5, 'x': 4, 'new_temp1': 5, 'new_temp5': 1, 'new_temp8': 1, 'new_temp7': 1, 'new_temp6': 1, 'new_temp2': 1, 'new_temp3': 1, 'y': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp0': 'edi', 'new_temp4': 'ebx', 'x': 'edi', 'new_temp1': 'ebx', 'new_temp5': 'eax', 'new_temp8': 'eax', 'new_temp7': 'eax', 'new_temp6': 'eax', 'new_temp2': 'eax', 'new_temp3': 'eax', 'y': 'eax'}
new_temp2
new_temp2
new_temp3
new_temp3
new_temp0
new_temp4
new_temp5
new_temp5
new_temp4
new_temp0
new_temp0
x
new_temp6
new_temp6
new_temp7
new_temp7
new_temp1
new_temp8
x
new_temp8
new_temp1
new_temp1
y
y
