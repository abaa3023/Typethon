------------------CORRECT TREE--------------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Compare(
                        left=List(elts=[], ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Dict(keys=[], values=[])])],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Compare(
                        left=List(elts=[], ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Dict(keys=[], values=[])])],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
print([] == {})
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Compare(
                              left=List(elts=[], ctx=Load()),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Dict(keys=[], values=[])])],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=List(elts=[], ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Dict(keys=[], values=[])),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=Compare(
                    left=Name(id='new_temp0', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Name(id='new_temp1', ctx=Load())])),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=Name(id='new_temp2', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp3', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = []
new_temp1 = {}
new_temp2 = new_temp0 == new_temp1
new_temp3 = new_temp2
print(new_temp3)
<ast.List object at 0x7fa1b7e7c040>
<ast.Dict object at 0x7fa1b7e7f550>
inject_bool(equal(project_big(explicate_4),project_big(explicate_5)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_6==explicate_7)
<ast.Name object at 0x7fa1b7ea0430>

new_temp0 = inject_big(create_list(inject_int(0)))
new_temp1 = inject_big(create_dict())
explicate_4 = new_temp0
explicate_5 = new_temp1
if(is_big(explicate_4)):
	if(is_big(explicate_5)):
		new_temp2 = inject_bool(equal(project_big(explicate_4),project_big(explicate_5)))
	else:
		new_temp2 = inject_bool(0)
else:
	if(is_big(explicate_5)):
		new_temp2 = inject_bool(0)
	else:
		if(is_int(explicate_4)):
			explicate_6 = project_int(explicate_4)
		else:
			explicate_6 = project_bool(explicate_4)
		if(is_int(explicate_5)):
			explicate_7 = project_int(explicate_5)
		else:
			explicate_7 = project_bool(explicate_5)
		new_temp2 = inject_bool(explicate_6==explicate_7)
new_temp3 = new_temp2
print(new_temp3)
--------------Explicate code-------
new_temp0 = inject_big(create_list(inject_int(0)))
new_temp1 = inject_big(create_dict())
explicate_4 = new_temp0
explicate_5 = new_temp1
if is_big(explicate_4):
    if is_big(explicate_5):
        new_temp2 = inject_bool(equal(project_big(explicate_4), project_big(explicate_5)))
    else:
        new_temp2 = inject_bool(0)
elif is_big(explicate_5):
    new_temp2 = inject_bool(0)
else:
    if is_int(explicate_4):
        explicate_6 = project_int(explicate_4)
    else:
        explicate_6 = project_bool(explicate_4)
    if is_int(explicate_5):
        explicate_7 = project_int(explicate_5)
    else:
        explicate_7 = project_bool(explicate_5)
    new_temp2 = inject_bool(explicate_6 == explicate_7)
new_temp3 = new_temp2
print(new_temp3)


--- explicated flattened python ---
new_temp8 = inject_int(0)
new_temp9 = create_list(new_temp8)
new_temp10 = inject_big(new_temp9)
new_temp0 = new_temp10
new_temp11 = create_dict()
new_temp12 = inject_big(new_temp11)
new_temp1 = new_temp12
explicate_4 = new_temp0
explicate_5 = new_temp1
new_temp13 = is_big(explicate_4)
if new_temp13:
    new_temp14 = is_big(explicate_5)
    if new_temp14:
        new_temp15 = project_big(explicate_4)
        new_temp16 = project_big(explicate_5)
        new_temp17 = equal(new_temp15, new_temp16)
        new_temp18 = inject_bool(new_temp17)
        new_temp2 = new_temp18
    else:
        new_temp19 = inject_bool(0)
        new_temp2 = new_temp19
else:
    new_temp20 = is_big(explicate_5)
    if new_temp20:
        new_temp21 = inject_bool(0)
        new_temp2 = new_temp21
    else:
        new_temp22 = is_int(explicate_4)
        if new_temp22:
            new_temp23 = project_int(explicate_4)
            explicate_6 = new_temp23
        else:
            new_temp24 = project_bool(explicate_4)
            explicate_6 = new_temp24
        new_temp25 = is_int(explicate_5)
        if new_temp25:
            new_temp26 = project_int(explicate_5)
            explicate_7 = new_temp26
        else:
            new_temp27 = project_bool(explicate_5)
            explicate_7 = new_temp27
        new_temp28 = explicate_6 == explicate_7
        new_temp29 = new_temp28
        new_temp30 = inject_bool(new_temp29)
        new_temp2 = new_temp30
new_temp3 = new_temp2
print(new_temp3)


--- x86 IR ---
call  inject_int 0
movl  eax ,  new_temp8
call  create_list new_temp8
movl  eax ,  new_temp9
call  inject_big new_temp9
movl  eax ,  new_temp10
movl  new_temp10 ,  new_temp0
call  create_dict 
movl  eax ,  new_temp11
call  inject_big new_temp11
movl  eax ,  new_temp12
movl  new_temp12 ,  new_temp1
movl  new_temp0 ,  explicate_4
movl  new_temp1 ,  explicate_5
call  is_big explicate_4
movl  eax ,  new_temp13
if1
cmp 0, new_temp13
je else1
then1
call  is_big explicate_5
movl  eax ,  new_temp14
if2
cmp 0, new_temp14
je else2
then2
call  project_big explicate_4
movl  eax ,  new_temp15
call  project_big explicate_5
movl  eax ,  new_temp16
call  equal new_temp15,new_temp16
movl  eax ,  new_temp17
call  inject_bool new_temp17
movl  eax ,  new_temp18
movl  new_temp18 ,  new_temp2
else2
call  inject_bool 0
movl  eax ,  new_temp19
movl  new_temp19 ,  new_temp2
end if2
else1
call  is_big explicate_5
movl  eax ,  new_temp20
if2
cmp 0, new_temp20
je else2
then2
call  inject_bool 0
movl  eax ,  new_temp21
movl  new_temp21 ,  new_temp2
else2
call  is_int explicate_4
movl  eax ,  new_temp22
if3
cmp 0, new_temp22
je else3
then3
call  project_int explicate_4
movl  eax ,  new_temp23
movl  new_temp23 ,  explicate_6
else3
call  project_bool explicate_4
movl  eax ,  new_temp24
movl  new_temp24 ,  explicate_6
end if3
call  is_int explicate_5
movl  eax ,  new_temp25
if4
cmp 0, new_temp25
je else4
then4
call  project_int explicate_5
movl  eax ,  new_temp26
movl  new_temp26 ,  explicate_7
else4
call  project_bool explicate_5
movl  eax ,  new_temp27
movl  new_temp27 ,  explicate_7
end if4
int_compare  explicate_6 Eq explicate_7 ,  new_temp28
movl  new_temp28 ,  new_temp29
call  inject_bool new_temp29
movl  eax ,  new_temp30
movl  new_temp30 ,  new_temp2
end if2
end if1
movl  new_temp2 ,  new_temp3
call  print new_temp3


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp8': set(), 'new_temp9': set(), 'new_temp10': set(), 'new_temp0': {'ecx', 'eax', 'new_temp1', 'edx', 'new_temp11', 'new_temp12'}, 'eax': {'explicate_5', 'explicate_4', 'new_temp15', 'new_temp0', 'new_temp28', 'explicate_6'}, 'ecx': {'explicate_5', 'new_temp15', 'explicate_4', 'new_temp0', 'explicate_6'}, 'edx': {'explicate_5', 'new_temp15', 'explicate_4', 'new_temp0', 'explicate_6'}, 'new_temp11': {'new_temp0'}, 'new_temp12': {'new_temp0'}, 'new_temp1': {'new_temp0', 'explicate_4'}, 'explicate_4': {'explicate_5', 'eax', 'new_temp20', 'new_temp13', 'edx', 'ecx', 'new_temp1', 'new_temp22', 'new_temp14'}, 'explicate_5': {'eax', 'new_temp20', 'new_temp13', 'edx', 'new_temp15', 'new_temp24', 'ecx', 'explicate_4', 'explicate_6', 'new_temp22', 'new_temp25', 'new_temp14', 'new_temp23'}, 'new_temp13': {'explicate_5', 'explicate_4'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp14': {'explicate_5', 'explicate_4'}, 'new_temp20': {'explicate_5', 'explicate_4'}, 'new_temp15': {'explicate_5', 'eax', 'new_temp16', 'edx', 'ecx'}, 'new_temp16': {'new_temp15'}, 'new_temp17': set(), 'new_temp18': set(), 'new_temp2': set(), 'new_temp19': set(), 'new_temp21': set(), 'new_temp22': {'explicate_5', 'explicate_4'}, 'new_temp3': set(), 'new_temp23': {'explicate_5'}, 'explicate_6': {'explicate_5', 'eax', 'explicate_7', 'edx', 'ecx', 'new_temp26', 'new_temp27', 'new_temp25'}, 'new_temp24': {'explicate_5'}, 'new_temp25': {'explicate_5', 'explicate_6'}, 'new_temp26': {'explicate_6'}, 'explicate_7': {'explicate_6'}, 'new_temp27': {'explicate_6'}, 'new_temp28': {'eax'}, 'new_temp29': set(), 'new_temp30': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'explicate_4': 4, 'explicate_5': 5, 'explicate_6': 4, 'new_temp15': 4, 'new_temp0': 4, 'new_temp14': 1, 'new_temp25': 1, 'new_temp20': 1, 'new_temp22': 1, 'new_temp13': 1, 'new_temp23': 1, 'new_temp12': 1, 'new_temp26': 1, 'new_temp24': 1, 'explicate_7': 1, 'new_temp16': 1, 'new_temp28': 2, 'new_temp1': 1, 'new_temp27': 1, 'new_temp11': 1, 'new_temp2': 1, 'new_temp18': 1, 'new_temp10': 1, 'new_temp21': 1, 'new_temp30': 1, 'new_temp29': 1, 'new_temp9': 1, 'new_temp17': 1, 'new_temp3': 1, 'new_temp8': 1, 'new_temp19': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'explicate_4': 'edi', 'explicate_5': 'ebx', 'explicate_6': 'edi', 'new_temp15': 'edi', 'new_temp0': 'edi', 'new_temp14': 'eax', 'new_temp25': 'eax', 'new_temp20': 'eax', 'new_temp22': 'eax', 'new_temp13': 'eax', 'new_temp23': 'eax', 'new_temp12': 'eax', 'new_temp26': 'eax', 'new_temp24': 'eax', 'explicate_7': 'eax', 'new_temp16': 'eax', 'new_temp28': 'ecx', 'new_temp1': 'eax', 'new_temp27': 'eax', 'new_temp11': 'eax', 'new_temp2': 'eax', 'new_temp18': 'eax', 'new_temp10': 'eax', 'new_temp21': 'eax', 'new_temp30': 'eax', 'new_temp29': 'eax', 'new_temp9': 'eax', 'new_temp17': 'eax', 'new_temp3': 'eax', 'new_temp8': 'eax', 'new_temp19': 'eax'}
new_temp8
new_temp8
new_temp9
new_temp9
new_temp10
new_temp10
new_temp0
new_temp11
new_temp11
new_temp12
new_temp12
new_temp1
new_temp0
explicate_4
new_temp1
explicate_5
explicate_4
new_temp13
new_temp13
explicate_5
new_temp14
new_temp14
explicate_4
new_temp15
explicate_5
new_temp16
new_temp16
new_temp15
new_temp17
new_temp17
new_temp18
new_temp18
new_temp2
new_temp19
new_temp19
new_temp2
explicate_5
new_temp20
new_temp20
new_temp21
new_temp21
new_temp2
explicate_4
new_temp22
new_temp22
explicate_4
new_temp23
new_temp23
explicate_6
explicate_4
new_temp24
new_temp24
explicate_6
explicate_5
new_temp25
new_temp25
explicate_5
new_temp26
new_temp26
explicate_7
explicate_5
new_temp27
new_temp27
explicate_7
explicate_6
explicate_7
new_temp28
new_temp28
new_temp28
new_temp28
new_temp29
new_temp29
new_temp30
new_temp30
new_temp2
new_temp2
new_temp3
new_temp3
