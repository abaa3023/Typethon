--------------Original code----------------
x = [1, 2]
y = [3, 4]
print(x + y)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=1),
                         Constant(value=2)],
                    ctx=Load())),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=3),
                         Constant(value=4)],
                    ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         BinOp(
                              left=Name(id='x', ctx=Load()),
                              op=Add(),
                              right=Name(id='y', ctx=Load()))],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=1),
                         Constant(value=2)],
                    ctx=Load())),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp0', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=3),
                         Constant(value=4)],
                    ctx=Load())),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='new_temp1', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=BinOp(
                    left=Name(id='x', ctx=Load()),
                    op=Add(),
                    right=Name(id='y', ctx=Load()))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp2', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = [1, 2]
x = new_temp0
new_temp1 = [3, 4]
y = new_temp1
new_temp2 = x + y
print(new_temp2)
<ast.List object at 0x7f8a5ea54f70>
<ast.Name object at 0x7f8a5ea55060>
<ast.List object at 0x7f8a5ea54eb0>
<ast.Name object at 0x7f8a5ea55240>
inject_big(add(project_big(explicate_3),project_big(explicate_4)))
inject_int(explicate_5+explicate_6)

new_temp0 = inject_big(create_list(inject_int(2)))
set_subscript(new_temp0, inject_int(0), inject_int(1))
set_subscript(new_temp0, inject_int(1), inject_int(2))
x = new_temp0
new_temp1 = inject_big(create_list(inject_int(2)))
set_subscript(new_temp1, inject_int(0), inject_int(3))
set_subscript(new_temp1, inject_int(1), inject_int(4))
y = new_temp1
explicate_3 = x
explicate_4 = y
if(is_big(explicate_3)):
	if(is_big(explicate_4)):
		new_temp2 = inject_big(add(project_big(explicate_3),project_big(explicate_4)))
else:
	if(is_big(explicate_4)):
		error_pyobj(0)
	else:
		if(is_int(explicate_3)):
			explicate_5 = project_int(explicate_3)
		else:
			explicate_5 = project_bool(explicate_3)
		if(is_int(explicate_4)):
			explicate_6 = project_int(explicate_4)
		else:
			explicate_6 = project_bool(explicate_4)
		new_temp2 = inject_int(explicate_5+explicate_6)
print(new_temp2)
--------------Explicate code-------
new_temp0 = inject_big(create_list(inject_int(2)))
set_subscript(new_temp0, inject_int(0), inject_int(1))
set_subscript(new_temp0, inject_int(1), inject_int(2))
x = new_temp0
new_temp1 = inject_big(create_list(inject_int(2)))
set_subscript(new_temp1, inject_int(0), inject_int(3))
set_subscript(new_temp1, inject_int(1), inject_int(4))
y = new_temp1
explicate_3 = x
explicate_4 = y
if is_big(explicate_3):
    if is_big(explicate_4):
        new_temp2 = inject_big(add(project_big(explicate_3), project_big(explicate_4)))
elif is_big(explicate_4):
    error_pyobj(0)
else:
    if is_int(explicate_3):
        explicate_5 = project_int(explicate_3)
    else:
        explicate_5 = project_bool(explicate_3)
    if is_int(explicate_4):
        explicate_6 = project_int(explicate_4)
    else:
        explicate_6 = project_bool(explicate_4)
    new_temp2 = inject_int(explicate_5 + explicate_6)
print(new_temp2)


--- explicated flattened python ---
new_temp7 = inject_int(2)
new_temp8 = create_list(new_temp7)
new_temp9 = inject_big(new_temp8)
new_temp0 = new_temp9
new_temp10 = inject_int(0)
new_temp11 = inject_int(1)
set_subscript(new_temp0, new_temp10, new_temp11)
new_temp12 = inject_int(1)
new_temp13 = inject_int(2)
set_subscript(new_temp0, new_temp12, new_temp13)
x = new_temp0
new_temp14 = inject_int(2)
new_temp15 = create_list(new_temp14)
new_temp16 = inject_big(new_temp15)
new_temp1 = new_temp16
new_temp17 = inject_int(0)
new_temp18 = inject_int(3)
set_subscript(new_temp1, new_temp17, new_temp18)
new_temp19 = inject_int(1)
new_temp20 = inject_int(4)
set_subscript(new_temp1, new_temp19, new_temp20)
y = new_temp1
explicate_3 = x
explicate_4 = y
new_temp21 = is_big(explicate_3)
if new_temp21:
    new_temp22 = is_big(explicate_4)
    if new_temp22:
        new_temp23 = project_big(explicate_3)
        new_temp24 = project_big(explicate_4)
        new_temp25 = add(new_temp23, new_temp24)
        new_temp26 = inject_big(new_temp25)
        new_temp2 = new_temp26
else:
    new_temp27 = is_big(explicate_4)
    if new_temp27:
        error_pyobj(0)
    else:
        new_temp28 = is_int(explicate_3)
        if new_temp28:
            new_temp29 = project_int(explicate_3)
            explicate_5 = new_temp29
        else:
            new_temp30 = project_bool(explicate_3)
            explicate_5 = new_temp30
        new_temp31 = is_int(explicate_4)
        if new_temp31:
            new_temp32 = project_int(explicate_4)
            explicate_6 = new_temp32
        else:
            new_temp33 = project_bool(explicate_4)
            explicate_6 = new_temp33
        new_temp34 = explicate_5 + explicate_6
        new_temp35 = inject_int(new_temp34)
        new_temp2 = new_temp35
print(new_temp2)


--- x86 IR ---
call  inject_int 2
movl  eax ,  new_temp7
call  create_list new_temp7
movl  eax ,  new_temp8
call  inject_big new_temp8
movl  eax ,  new_temp9
movl  new_temp9 ,  new_temp0
call  inject_int 0
movl  eax ,  new_temp10
call  inject_int 1
movl  eax ,  new_temp11
call  set_subscript new_temp0,new_temp10,new_temp11
call  inject_int 1
movl  eax ,  new_temp12
call  inject_int 2
movl  eax ,  new_temp13
call  set_subscript new_temp0,new_temp12,new_temp13
movl  new_temp0 ,  x
call  inject_int 2
movl  eax ,  new_temp14
call  create_list new_temp14
movl  eax ,  new_temp15
call  inject_big new_temp15
movl  eax ,  new_temp16
movl  new_temp16 ,  new_temp1
call  inject_int 0
movl  eax ,  new_temp17
call  inject_int 3
movl  eax ,  new_temp18
call  set_subscript new_temp1,new_temp17,new_temp18
call  inject_int 1
movl  eax ,  new_temp19
call  inject_int 4
movl  eax ,  new_temp20
call  set_subscript new_temp1,new_temp19,new_temp20
movl  new_temp1 ,  y
movl  x ,  explicate_3
movl  y ,  explicate_4
call  is_big explicate_3
movl  eax ,  new_temp21
if1
cmp 0, new_temp21
je else1
then1
call  is_big explicate_4
movl  eax ,  new_temp22
if2
cmp 0, new_temp22
je end if2
then2
call  project_big explicate_3
movl  eax ,  new_temp23
call  project_big explicate_4
movl  eax ,  new_temp24
call  add new_temp23,new_temp24
movl  eax ,  new_temp25
call  inject_big new_temp25
movl  eax ,  new_temp26
movl  new_temp26 ,  new_temp2
end if2
else1
call  is_big explicate_4
movl  eax ,  new_temp27
if2
cmp 0, new_temp27
je else2
then2
call  error_pyobj 0
else2
call  is_int explicate_3
movl  eax ,  new_temp28
if3
cmp 0, new_temp28
je else3
then3
call  project_int explicate_3
movl  eax ,  new_temp29
movl  new_temp29 ,  explicate_5
else3
call  project_bool explicate_3
movl  eax ,  new_temp30
movl  new_temp30 ,  explicate_5
end if3
call  is_int explicate_4
movl  eax ,  new_temp31
if4
cmp 0, new_temp31
je else4
then4
call  project_int explicate_4
movl  eax ,  new_temp32
movl  new_temp32 ,  explicate_6
else4
call  project_bool explicate_4
movl  eax ,  new_temp33
movl  new_temp33 ,  explicate_6
end if4
movl  explicate_5 ,  new_temp34
addl  explicate_6 ,  new_temp34
call  inject_int new_temp34
movl  eax ,  new_temp35
movl  new_temp35 ,  new_temp2
end if2
end if1
call  print new_temp2


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp2': {'new_temp21', 'new_temp10', 'edx', 'new_temp18', 'new_temp12', 'new_temp20', 'new_temp15', 'new_temp22', 'new_temp11', 'explicate_4', 'ecx', 'new_temp9', 'new_temp7', 'x', 'y', 'new_temp0', 'explicate_3', 'eax', 'new_temp8', 'new_temp14', 'new_temp1', 'new_temp13', 'new_temp16', 'new_temp17', 'new_temp19', 'new_temp27'}, 'eax': {'new_temp10', 'explicate_5', 'x', 'new_temp0', 'explicate_3', 'new_temp23', 'new_temp2', 'new_temp12', 'new_temp1', 'new_temp17', 'new_temp19', 'explicate_4'}, 'ecx': {'new_temp10', 'explicate_5', 'x', 'new_temp0', 'explicate_3', 'new_temp23', 'new_temp2', 'new_temp12', 'new_temp1', 'new_temp17', 'new_temp19', 'explicate_4'}, 'edx': {'new_temp10', 'explicate_5', 'x', 'new_temp0', 'explicate_3', 'new_temp23', 'new_temp2', 'new_temp12', 'new_temp1', 'new_temp17', 'new_temp19', 'explicate_4'}, 'new_temp7': {'new_temp2'}, 'new_temp8': {'new_temp2'}, 'new_temp9': {'new_temp2'}, 'new_temp0': {'ecx', 'new_temp10', 'edx', 'eax', 'new_temp2', 'new_temp12', 'new_temp13', 'new_temp11'}, 'new_temp10': {'eax', 'ecx', 'edx', 'new_temp2', 'new_temp11', 'new_temp0'}, 'new_temp11': {'new_temp10', 'new_temp2', 'new_temp0'}, 'new_temp12': {'eax', 'ecx', 'edx', 'new_temp2', 'new_temp13', 'new_temp0'}, 'new_temp13': {'new_temp2', 'new_temp12', 'new_temp0'}, 'x': {'ecx', 'edx', 'new_temp20', 'new_temp19', 'y', 'eax', 'new_temp2', 'new_temp14', 'new_temp16', 'new_temp1', 'new_temp15', 'new_temp17', 'new_temp18'}, 'new_temp14': {'x', 'new_temp2'}, 'new_temp15': {'x', 'new_temp2'}, 'new_temp16': {'x', 'new_temp2'}, 'new_temp1': {'ecx', 'edx', 'x', 'eax', 'new_temp2', 'new_temp17', 'new_temp18', 'new_temp20', 'new_temp19'}, 'new_temp17': {'eax', 'ecx', 'edx', 'new_temp2', 'new_temp1', 'new_temp18', 'x'}, 'new_temp18': {'x', 'new_temp17', 'new_temp2', 'new_temp1'}, 'new_temp19': {'eax', 'ecx', 'edx', 'new_temp2', 'new_temp1', 'new_temp20', 'x'}, 'new_temp20': {'new_temp19', 'x', 'new_temp2', 'new_temp1'}, 'y': {'x', 'new_temp2', 'explicate_3'}, 'explicate_3': {'new_temp21', 'ecx', 'edx', 'y', 'eax', 'new_temp2', 'new_temp28', 'new_temp22', 'new_temp27', 'explicate_4'}, 'explicate_4': {'new_temp21', 'ecx', 'edx', 'new_temp31', 'new_temp29', 'explicate_5', 'new_temp30', 'explicate_3', 'eax', 'new_temp23', 'new_temp2', 'new_temp28', 'new_temp22', 'new_temp27'}, 'new_temp21': {'explicate_3', 'new_temp2', 'explicate_4'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp22': {'explicate_3', 'new_temp2', 'explicate_4'}, 'new_temp27': {'explicate_3', 'new_temp2', 'explicate_4'}, 'new_temp23': {'ecx', 'edx', 'new_temp24', 'eax', 'explicate_4'}, 'new_temp24': {'new_temp23'}, 'new_temp25': set(), 'new_temp26': set(), 'new_temp28': {'explicate_3', 'explicate_4'}, 'new_temp29': {'explicate_4'}, 'explicate_5': {'ecx', 'edx', 'new_temp31', 'new_temp32', 'explicate_6', 'eax', 'new_temp33', 'explicate_4'}, 'new_temp30': {'explicate_4'}, 'new_temp31': {'explicate_5', 'explicate_4'}, 'new_temp32': {'explicate_5'}, 'explicate_6': {'explicate_5', 'new_temp34'}, 'new_temp33': {'explicate_5'}, 'new_temp34': {'explicate_6'}, 'new_temp35': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp19': 4, 'new_temp2': 5, 'new_temp1': 6, 'x': 7, 'new_temp17': 4, 'explicate_3': 4, 'explicate_4': 6, 'new_temp23': 4, 'new_temp0': 4, 'new_temp12': 6, 'new_temp10': 6, 'explicate_5': 4, 'new_temp27': 1, 'new_temp13': 1, 'new_temp11': 1, 'new_temp22': 1, 'new_temp20': 1, 'new_temp18': 1, 'new_temp21': 1, 'new_temp28': 1, 'y': 1, 'new_temp31': 1, 'new_temp16': 1, 'new_temp14': 1, 'new_temp30': 1, 'new_temp15': 1, 'new_temp33': 1, 'new_temp8': 1, 'new_temp24': 1, 'explicate_6': 1, 'new_temp32': 1, 'new_temp29': 1, 'new_temp7': 1, 'new_temp34': 2, 'new_temp9': 1, 'new_temp25': 1, 'new_temp35': 1, 'new_temp26': 1}
Spilled set:
 {'x'}


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'x': -4, 'new_temp19': 'edi', 'new_temp2': 'ebx', 'new_temp1': 'esi', 'new_temp17': 'edi', 'explicate_3': 'edi', 'explicate_4': 'esi', 'new_temp23': 'edi', 'new_temp0': 'edi', 'new_temp12': 'esi', 'new_temp10': 'esi', 'explicate_5': 'edi', 'new_temp27': 'eax', 'new_temp13': 'eax', 'new_temp11': 'eax', 'new_temp22': 'eax', 'new_temp20': 'eax', 'new_temp18': 'eax', 'new_temp21': 'eax', 'new_temp28': 'eax', 'y': 'eax', 'new_temp31': 'eax', 'new_temp16': 'eax', 'new_temp14': 'eax', 'new_temp30': 'eax', 'new_temp15': 'eax', 'new_temp33': 'eax', 'new_temp8': 'eax', 'new_temp24': 'eax', 'explicate_6': 'eax', 'new_temp32': 'eax', 'new_temp29': 'eax', 'new_temp7': 'eax', 'new_temp34': 'ecx', 'new_temp9': 'eax', 'new_temp25': 'eax', 'new_temp35': 'eax', 'new_temp26': 'eax'}
new_temp7
new_temp7
new_temp8
new_temp8
new_temp9
new_temp9
new_temp0
new_temp10
new_temp11
new_temp11
new_temp10
new_temp0
new_temp12
new_temp13
new_temp13
new_temp12
new_temp0
new_temp0
new_temp14
new_temp14
new_temp15
new_temp15
new_temp16
new_temp16
new_temp1
new_temp17
new_temp18
new_temp18
new_temp17
new_temp1
new_temp19
new_temp20
new_temp20
new_temp19
new_temp1
new_temp1
y
explicate_3
y
explicate_4
explicate_3
new_temp21
new_temp21
explicate_4
new_temp22
new_temp22
explicate_3
new_temp23
explicate_4
new_temp24
new_temp24
new_temp23
new_temp25
new_temp25
new_temp26
new_temp26
new_temp2
explicate_4
new_temp27
new_temp27
explicate_3
new_temp28
new_temp28
explicate_3
new_temp29
new_temp29
explicate_5
explicate_3
new_temp30
new_temp30
explicate_5
explicate_4
new_temp31
new_temp31
explicate_4
new_temp32
new_temp32
explicate_6
explicate_4
new_temp33
new_temp33
explicate_6
explicate_5
new_temp34
explicate_6
new_temp34
new_temp34
new_temp35
new_temp35
new_temp2
new_temp2
