Illegal character '{'
Syntax error at ':'
Illegal character ','
Illegal character ','
Illegal character ','
Illegal character ','
Illegal character '}'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Dict(
                keys=[
                    Constant(value=1),
                    Constant(value=2),
                    Constant(value=3),
                    Constant(value=True),
                    Constant(value=False)],
                values=[
                    Constant(value=1),
                    Constant(value=2),
                    Constant(value=False),
                    Constant(value=2),
                    Constant(value=1)])),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Name(id='x', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Name(id='y', ctx=Load())])],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Constant(value=1),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Name(id='x', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Name(id='y', ctx=Load())])],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = { 1 : 1, 2 : 2, 3 : False, True : 2, False : 1 }
y = x
print(x == y)
Module(
     body=[
          Constant(value=1),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='x', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='x', ctx=Load()),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Name(id='y', ctx=Load())])],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='x', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Compare(
                    left=Name(id='x', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Name(id='y', ctx=Load())])),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp1', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
y = x
new_temp0 = x == y
new_temp1 = new_temp0
print(new_temp1)
<ast.Name object at 0x7f5feb392d40>
inject_bool(equal(project_big(explicate_2),project_big(explicate_3)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_4==explicate_5)
<ast.Name object at 0x7f5feb3932e0>

y = x
explicate_2 = x
explicate_3 = y
if(is_big(explicate_2)):
	if(is_big(explicate_3)):
		new_temp0 = inject_bool(equal(project_big(explicate_2),project_big(explicate_3)))
	else:
		new_temp0 = inject_bool(0)
else:
	if(is_big(explicate_3)):
		new_temp0 = inject_bool(0)
	else:
		if(is_int(explicate_2)):
			explicate_4 = project_int(explicate_2)
		else:
			explicate_4 = project_bool(explicate_2)
		if(is_int(explicate_3)):
			explicate_5 = project_int(explicate_3)
		else:
			explicate_5 = project_bool(explicate_3)
		new_temp0 = inject_bool(explicate_4==explicate_5)
new_temp1 = new_temp0
print(new_temp1)
--------------Explicate code-------
y = x
explicate_2 = x
explicate_3 = y
if is_big(explicate_2):
    if is_big(explicate_3):
        new_temp0 = inject_bool(equal(project_big(explicate_2), project_big(explicate_3)))
    else:
        new_temp0 = inject_bool(0)
elif is_big(explicate_3):
    new_temp0 = inject_bool(0)
else:
    if is_int(explicate_2):
        explicate_4 = project_int(explicate_2)
    else:
        explicate_4 = project_bool(explicate_2)
    if is_int(explicate_3):
        explicate_5 = project_int(explicate_3)
    else:
        explicate_5 = project_bool(explicate_3)
    new_temp0 = inject_bool(explicate_4 == explicate_5)
new_temp1 = new_temp0
print(new_temp1)


--- explicated flattened python ---
y = x
explicate_2 = x
explicate_3 = y
new_temp6 = is_big(explicate_2)
if new_temp6:
    new_temp7 = is_big(explicate_3)
    if new_temp7:
        new_temp8 = project_big(explicate_2)
        new_temp9 = project_big(explicate_3)
        new_temp10 = equal(new_temp8, new_temp9)
        new_temp11 = inject_bool(new_temp10)
        new_temp0 = new_temp11
    else:
        new_temp12 = inject_bool(0)
        new_temp0 = new_temp12
else:
    new_temp13 = is_big(explicate_3)
    if new_temp13:
        new_temp14 = inject_bool(0)
        new_temp0 = new_temp14
    else:
        new_temp15 = is_int(explicate_2)
        if new_temp15:
            new_temp16 = project_int(explicate_2)
            explicate_4 = new_temp16
        else:
            new_temp17 = project_bool(explicate_2)
            explicate_4 = new_temp17
        new_temp18 = is_int(explicate_3)
        if new_temp18:
            new_temp19 = project_int(explicate_3)
            explicate_5 = new_temp19
        else:
            new_temp20 = project_bool(explicate_3)
            explicate_5 = new_temp20
        new_temp21 = explicate_4 == explicate_5
        new_temp22 = new_temp21
        new_temp23 = inject_bool(new_temp22)
        new_temp0 = new_temp23
new_temp1 = new_temp0
print(new_temp1)


--- x86 IR ---
movl  x ,  y
movl  x ,  explicate_2
movl  y ,  explicate_3
call  is_big explicate_2
movl  eax ,  new_temp6
if1
cmp 0, new_temp6
je else1
then1
call  is_big explicate_3
movl  eax ,  new_temp7
if2
cmp 0, new_temp7
je else2
then2
call  project_big explicate_2
movl  eax ,  new_temp8
call  project_big explicate_3
movl  eax ,  new_temp9
call  equal new_temp8,new_temp9
movl  eax ,  new_temp10
call  inject_bool new_temp10
movl  eax ,  new_temp11
movl  new_temp11 ,  new_temp0
else2
call  inject_bool 0
movl  eax ,  new_temp12
movl  new_temp12 ,  new_temp0
end if2
else1
call  is_big explicate_3
movl  eax ,  new_temp13
if2
cmp 0, new_temp13
je else2
then2
call  inject_bool 0
movl  eax ,  new_temp14
movl  new_temp14 ,  new_temp0
else2
call  is_int explicate_2
movl  eax ,  new_temp15
if3
cmp 0, new_temp15
je else3
then3
call  project_int explicate_2
movl  eax ,  new_temp16
movl  new_temp16 ,  explicate_4
else3
call  project_bool explicate_2
movl  eax ,  new_temp17
movl  new_temp17 ,  explicate_4
end if3
call  is_int explicate_3
movl  eax ,  new_temp18
if4
cmp 0, new_temp18
je else4
then4
call  project_int explicate_3
movl  eax ,  new_temp19
movl  new_temp19 ,  explicate_5
else4
call  project_bool explicate_3
movl  eax ,  new_temp20
movl  new_temp20 ,  explicate_5
end if4
int_compare  explicate_4 Eq explicate_5 ,  new_temp21
movl  new_temp21 ,  new_temp22
call  inject_bool new_temp22
movl  eax ,  new_temp23
movl  new_temp23 ,  new_temp0
end if2
end if1
movl  new_temp0 ,  new_temp1
call  print new_temp1


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'y': {'explicate_2'}, 'explicate_2': {'new_temp13', 'new_temp15', 'y', 'eax', 'ecx', 'edx', 'explicate_3', 'new_temp6', 'new_temp7'}, 'explicate_3': {'new_temp13', 'new_temp8', 'new_temp15', 'new_temp17', 'eax', 'explicate_2', 'explicate_4', 'new_temp18', 'ecx', 'new_temp16', 'edx', 'new_temp6', 'new_temp7'}, 'eax': {'new_temp8', 'new_temp21', 'explicate_2', 'explicate_3', 'explicate_4'}, 'ecx': {'explicate_2', 'explicate_3', 'explicate_4', 'new_temp8'}, 'edx': {'explicate_2', 'explicate_3', 'explicate_4', 'new_temp8'}, 'new_temp6': {'explicate_2', 'explicate_3'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp7': {'explicate_2', 'explicate_3'}, 'new_temp13': {'explicate_2', 'explicate_3'}, 'new_temp8': {'eax', 'new_temp9', 'ecx', 'edx', 'explicate_3'}, 'new_temp9': {'new_temp8'}, 'new_temp10': set(), 'new_temp11': set(), 'new_temp0': set(), 'new_temp12': set(), 'new_temp14': set(), 'new_temp15': {'explicate_2', 'explicate_3'}, 'new_temp1': set(), 'new_temp16': {'explicate_3'}, 'explicate_4': {'eax', 'new_temp20', 'new_temp18', 'new_temp19', 'explicate_5', 'ecx', 'edx', 'explicate_3'}, 'new_temp17': {'explicate_3'}, 'new_temp18': {'explicate_3', 'explicate_4'}, 'new_temp19': {'explicate_4'}, 'explicate_5': {'explicate_4'}, 'new_temp20': {'explicate_4'}, 'new_temp21': {'eax'}, 'new_temp22': set(), 'new_temp23': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'explicate_4': 4, 'explicate_3': 5, 'explicate_2': 4, 'new_temp8': 4, 'new_temp13': 1, 'new_temp7': 1, 'new_temp15': 1, 'new_temp6': 1, 'new_temp18': 1, 'new_temp16': 1, 'explicate_5': 1, 'new_temp21': 2, 'new_temp19': 1, 'new_temp9': 1, 'new_temp20': 1, 'y': 1, 'new_temp17': 1, 'new_temp12': 1, 'new_temp11': 1, 'new_temp10': 1, 'new_temp23': 1, 'new_temp1': 1, 'new_temp22': 1, 'new_temp0': 1, 'new_temp14': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'explicate_4': 'edi', 'explicate_3': 'ebx', 'explicate_2': 'edi', 'new_temp8': 'edi', 'new_temp13': 'eax', 'new_temp7': 'eax', 'new_temp15': 'eax', 'new_temp6': 'eax', 'new_temp18': 'eax', 'new_temp16': 'eax', 'explicate_5': 'eax', 'new_temp21': 'ecx', 'new_temp19': 'eax', 'new_temp9': 'eax', 'new_temp20': 'eax', 'y': 'eax', 'new_temp17': 'eax', 'new_temp12': 'eax', 'new_temp11': 'eax', 'new_temp10': 'eax', 'new_temp23': 'eax', 'new_temp1': 'eax', 'new_temp22': 'eax', 'new_temp0': 'eax', 'new_temp14': 'eax'}
x
