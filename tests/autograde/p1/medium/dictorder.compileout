[(<ast.Constant object at 0x7fef40b4c070>, <ast.Constant object at 0x7fef408dc250>)]
[(<ast.Constant object at 0x7fef40b97f40>, <ast.Constant object at 0x7fef408dc160>), (<ast.Constant object at 0x7fef40b4c070>, <ast.Constant object at 0x7fef408dc250>)]
[(<ast.Constant object at 0x7fef40b97f10>, <ast.Constant object at 0x7fef408dc070>), (<ast.Constant object at 0x7fef40b97f40>, <ast.Constant object at 0x7fef408dc160>), (<ast.Constant object at 0x7fef40b4c070>, <ast.Constant object at 0x7fef408dc250>)]
[(<ast.Constant object at 0x7fef40b4f970>, <ast.Constant object at 0x7fef40b949a0>), (<ast.Constant object at 0x7fef40b97f10>, <ast.Constant object at 0x7fef408dc070>), (<ast.Constant object at 0x7fef40b97f40>, <ast.Constant object at 0x7fef408dc160>), (<ast.Constant object at 0x7fef40b4c070>, <ast.Constant object at 0x7fef408dc250>)]
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Dict(
                keys=[
                    Constant(value=1),
                    Constant(value=2),
                    Constant(value=3),
                    Constant(value=True),
                    Constant(value=False)],
                values=[
                    Constant(value=1),
                    Constant(value=2),
                    Constant(value=False),
                    Constant(value=2),
                    Constant(value=1)])),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Name(id='x', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Name(id='y', ctx=Load())])],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Dict(
                keys=[
                    Constant(value=1),
                    Constant(value=2),
                    Constant(value=3),
                    Constant(value=True),
                    Constant(value=True)],
                values=[
                    Constant(value=1),
                    Constant(value=2),
                    Constant(value=True),
                    Constant(value=2),
                    Constant(value=1)])),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Name(id='x', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Compare(
                        left=Name(id='x', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Name(id='y', ctx=Load())])],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = { 1 : 1, 2 : 2, 3 : False, True : 2, False : 1 }
y = x
print(x == y)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Dict(
                    keys=[
                         Constant(value=1),
                         Constant(value=2),
                         Constant(value=3),
                         Constant(value=True),
                         Constant(value=True)],
                    values=[
                         Constant(value=1),
                         Constant(value=2),
                         Constant(value=True),
                         Constant(value=2),
                         Constant(value=1)])),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='x', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Compare(
                              left=Name(id='x', ctx=Load()),
                              ops=[
                                   Eq()],
                              comparators=[
                                   Name(id='y', ctx=Load())])],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=Dict(
                    keys=[
                         Constant(value=1),
                         Constant(value=2),
                         Constant(value=3),
                         Constant(value=True),
                         Constant(value=True)],
                    values=[
                         Constant(value=1),
                         Constant(value=2),
                         Constant(value=True),
                         Constant(value=2),
                         Constant(value=1)])),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp0', ctx=Load())),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Name(id='x', ctx=Load())),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Compare(
                    left=Name(id='x', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Name(id='y', ctx=Load())])),
          Assign(
               targets=[
                    Name(id='new_temp2', ctx=Store())],
               value=Name(id='new_temp1', ctx=Store())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='new_temp2', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = {1: 1, 2: 2, 3: True, True: 2, True: 1}
x = new_temp0
y = x
new_temp1 = x == y
new_temp2 = new_temp1
print(new_temp2)
<ast.Dict object at 0x7fef40b94970>
<ast.Name object at 0x7fef408dc6a0>
<ast.Name object at 0x7fef408dc190>
inject_bool(equal(project_big(explicate_3),project_big(explicate_4)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_5==explicate_6)
<ast.Name object at 0x7fef408dca00>

new_temp0 = inject_big(create_dict())
set_subscript(new_temp0, inject_int(1), inject_int(1))
set_subscript(new_temp0, inject_int(2), inject_int(2))
set_subscript(new_temp0, inject_int(3), inject_bool(1))
set_subscript(new_temp0, inject_bool(1), inject_int(2))
set_subscript(new_temp0, inject_bool(1), inject_int(1))
x = new_temp0
y = x
explicate_3 = x
explicate_4 = y
if(is_big(explicate_3)):
	if(is_big(explicate_4)):
		new_temp1 = inject_bool(equal(project_big(explicate_3),project_big(explicate_4)))
	else:
		new_temp1 = inject_bool(0)
else:
	if(is_big(explicate_4)):
		new_temp1 = inject_bool(0)
	else:
		if(is_int(explicate_3)):
			explicate_5 = project_int(explicate_3)
		else:
			explicate_5 = project_bool(explicate_3)
		if(is_int(explicate_4)):
			explicate_6 = project_int(explicate_4)
		else:
			explicate_6 = project_bool(explicate_4)
		new_temp1 = inject_bool(explicate_5==explicate_6)
new_temp2 = new_temp1
print(new_temp2)
--------------Explicate code-------
new_temp0 = inject_big(create_dict())
set_subscript(new_temp0, inject_int(1), inject_int(1))
set_subscript(new_temp0, inject_int(2), inject_int(2))
set_subscript(new_temp0, inject_int(3), inject_bool(1))
set_subscript(new_temp0, inject_bool(1), inject_int(2))
set_subscript(new_temp0, inject_bool(1), inject_int(1))
x = new_temp0
y = x
explicate_3 = x
explicate_4 = y
if is_big(explicate_3):
    if is_big(explicate_4):
        new_temp1 = inject_bool(equal(project_big(explicate_3), project_big(explicate_4)))
    else:
        new_temp1 = inject_bool(0)
elif is_big(explicate_4):
    new_temp1 = inject_bool(0)
else:
    if is_int(explicate_3):
        explicate_5 = project_int(explicate_3)
    else:
        explicate_5 = project_bool(explicate_3)
    if is_int(explicate_4):
        explicate_6 = project_int(explicate_4)
    else:
        explicate_6 = project_bool(explicate_4)
    new_temp1 = inject_bool(explicate_5 == explicate_6)
new_temp2 = new_temp1
print(new_temp2)


--- explicated flattened python ---
new_temp7 = create_dict()
new_temp8 = inject_big(new_temp7)
new_temp0 = new_temp8
new_temp9 = inject_int(1)
new_temp10 = inject_int(1)
set_subscript(new_temp0, new_temp9, new_temp10)
new_temp11 = inject_int(2)
new_temp12 = inject_int(2)
set_subscript(new_temp0, new_temp11, new_temp12)
new_temp13 = inject_int(3)
new_temp14 = inject_bool(1)
set_subscript(new_temp0, new_temp13, new_temp14)
new_temp15 = inject_bool(1)
new_temp16 = inject_int(2)
set_subscript(new_temp0, new_temp15, new_temp16)
new_temp17 = inject_bool(1)
new_temp18 = inject_int(1)
set_subscript(new_temp0, new_temp17, new_temp18)
x = new_temp0
y = x
explicate_3 = x
explicate_4 = y
new_temp19 = is_big(explicate_3)
if new_temp19:
    new_temp20 = is_big(explicate_4)
    if new_temp20:
        new_temp21 = project_big(explicate_3)
        new_temp22 = project_big(explicate_4)
        new_temp23 = equal(new_temp21, new_temp22)
        new_temp24 = inject_bool(new_temp23)
        new_temp1 = new_temp24
    else:
        new_temp25 = inject_bool(0)
        new_temp1 = new_temp25
else:
    new_temp26 = is_big(explicate_4)
    if new_temp26:
        new_temp27 = inject_bool(0)
        new_temp1 = new_temp27
    else:
        new_temp28 = is_int(explicate_3)
        if new_temp28:
            new_temp29 = project_int(explicate_3)
            explicate_5 = new_temp29
        else:
            new_temp30 = project_bool(explicate_3)
            explicate_5 = new_temp30
        new_temp31 = is_int(explicate_4)
        if new_temp31:
            new_temp32 = project_int(explicate_4)
            explicate_6 = new_temp32
        else:
            new_temp33 = project_bool(explicate_4)
            explicate_6 = new_temp33
        new_temp34 = explicate_5 == explicate_6
        new_temp35 = new_temp34
        new_temp36 = inject_bool(new_temp35)
        new_temp1 = new_temp36
new_temp2 = new_temp1
print(new_temp2)


--- x86 IR ---
call  create_dict 
movl  eax ,  new_temp7
call  inject_big new_temp7
movl  eax ,  new_temp8
movl  new_temp8 ,  new_temp0
call  inject_int 1
movl  eax ,  new_temp9
call  inject_int 1
movl  eax ,  new_temp10
call  set_subscript new_temp0,new_temp9,new_temp10
call  inject_int 2
movl  eax ,  new_temp11
call  inject_int 2
movl  eax ,  new_temp12
call  set_subscript new_temp0,new_temp11,new_temp12
call  inject_int 3
movl  eax ,  new_temp13
call  inject_bool 1
movl  eax ,  new_temp14
call  set_subscript new_temp0,new_temp13,new_temp14
call  inject_bool 1
movl  eax ,  new_temp15
call  inject_int 2
movl  eax ,  new_temp16
call  set_subscript new_temp0,new_temp15,new_temp16
call  inject_bool 1
movl  eax ,  new_temp17
call  inject_int 1
movl  eax ,  new_temp18
call  set_subscript new_temp0,new_temp17,new_temp18
movl  new_temp0 ,  x
movl  x ,  y
movl  x ,  explicate_3
movl  y ,  explicate_4
call  is_big explicate_3
movl  eax ,  new_temp19
if1
cmp 0, new_temp19
je else1
then1
call  is_big explicate_4
movl  eax ,  new_temp20
if2
cmp 0, new_temp20
je else2
then2
call  project_big explicate_3
movl  eax ,  new_temp21
call  project_big explicate_4
movl  eax ,  new_temp22
call  equal new_temp21,new_temp22
movl  eax ,  new_temp23
call  inject_bool new_temp23
movl  eax ,  new_temp24
movl  new_temp24 ,  new_temp1
else2
call  inject_bool 0
movl  eax ,  new_temp25
movl  new_temp25 ,  new_temp1
end if2
else1
call  is_big explicate_4
movl  eax ,  new_temp26
if2
cmp 0, new_temp26
je else2
then2
call  inject_bool 0
movl  eax ,  new_temp27
movl  new_temp27 ,  new_temp1
else2
call  is_int explicate_3
movl  eax ,  new_temp28
if3
cmp 0, new_temp28
je else3
then3
call  project_int explicate_3
movl  eax ,  new_temp29
movl  new_temp29 ,  explicate_5
else3
call  project_bool explicate_3
movl  eax ,  new_temp30
movl  new_temp30 ,  explicate_5
end if3
call  is_int explicate_4
movl  eax ,  new_temp31
if4
cmp 0, new_temp31
je else4
then4
call  project_int explicate_4
movl  eax ,  new_temp32
movl  new_temp32 ,  explicate_6
else4
call  project_bool explicate_4
movl  eax ,  new_temp33
movl  new_temp33 ,  explicate_6
end if4
int_compare  explicate_5 Eq explicate_6 ,  new_temp34
movl  new_temp34 ,  new_temp35
call  inject_bool new_temp35
movl  eax ,  new_temp36
movl  new_temp36 ,  new_temp1
end if2
end if1
movl  new_temp1 ,  new_temp2
call  print new_temp2


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp7': set(), 'new_temp8': set(), 'new_temp0': {'new_temp16', 'new_temp17', 'new_temp15', 'ecx', 'new_temp9', 'new_temp12', 'new_temp18', 'new_temp13', 'new_temp11', 'edx', 'new_temp10', 'eax', 'new_temp14'}, 'eax': {'explicate_4', 'new_temp17', 'new_temp15', 'new_temp9', 'explicate_3', 'new_temp34', 'new_temp13', 'new_temp11', 'explicate_5', 'new_temp21', 'new_temp0'}, 'ecx': {'explicate_4', 'new_temp17', 'new_temp15', 'new_temp9', 'explicate_3', 'new_temp13', 'new_temp11', 'explicate_5', 'new_temp21', 'new_temp0'}, 'edx': {'explicate_4', 'new_temp17', 'new_temp15', 'new_temp9', 'explicate_3', 'new_temp13', 'new_temp11', 'explicate_5', 'new_temp21', 'new_temp0'}, 'new_temp9': {'edx', 'ecx', 'new_temp0', 'new_temp10', 'eax'}, 'new_temp10': {'new_temp0', 'new_temp9'}, 'new_temp11': {'edx', 'new_temp12', 'ecx', 'new_temp0', 'eax'}, 'new_temp12': {'new_temp0', 'new_temp11'}, 'new_temp13': {'edx', 'ecx', 'new_temp0', 'eax', 'new_temp14'}, 'new_temp14': {'new_temp0', 'new_temp13'}, 'new_temp15': {'new_temp16', 'edx', 'ecx', 'new_temp0', 'eax'}, 'new_temp16': {'new_temp0', 'new_temp15'}, 'new_temp17': {'edx', 'new_temp18', 'ecx', 'new_temp0', 'eax'}, 'new_temp18': {'new_temp0', 'new_temp17'}, 'x': set(), 'y': {'explicate_3'}, 'explicate_3': {'new_temp26', 'explicate_4', 'y', 'ecx', 'new_temp28', 'new_temp19', 'edx', 'eax', 'new_temp20'}, 'explicate_4': {'new_temp26', 'edx', 'ecx', 'explicate_3', 'new_temp30', 'new_temp28', 'explicate_5', 'new_temp31', 'new_temp21', 'new_temp19', 'new_temp20', 'new_temp29', 'eax'}, 'new_temp19': {'explicate_4', 'explicate_3'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp20': {'explicate_4', 'explicate_3'}, 'new_temp26': {'explicate_4', 'explicate_3'}, 'new_temp21': {'explicate_4', 'edx', 'new_temp22', 'ecx', 'eax'}, 'new_temp22': {'new_temp21'}, 'new_temp23': set(), 'new_temp24': set(), 'new_temp1': set(), 'new_temp25': set(), 'new_temp27': set(), 'new_temp28': {'explicate_4', 'explicate_3'}, 'new_temp2': set(), 'new_temp29': {'explicate_4'}, 'explicate_5': {'explicate_4', 'explicate_6', 'ecx', 'new_temp33', 'new_temp31', 'edx', 'new_temp32', 'eax'}, 'new_temp30': {'explicate_4'}, 'new_temp31': {'explicate_4', 'explicate_5'}, 'new_temp32': {'explicate_5'}, 'explicate_6': {'explicate_5'}, 'new_temp33': {'explicate_5'}, 'new_temp34': {'eax'}, 'new_temp35': set(), 'new_temp36': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp11': 4, 'new_temp0': 5, 'new_temp9': 4, 'new_temp13': 4, 'new_temp15': 4, 'new_temp17': 4, 'explicate_3': 4, 'explicate_4': 5, 'new_temp21': 4, 'explicate_5': 4, 'new_temp19': 1, 'new_temp12': 1, 'new_temp26': 1, 'new_temp14': 1, 'new_temp10': 1, 'new_temp20': 1, 'new_temp31': 1, 'new_temp28': 1, 'new_temp18': 1, 'new_temp16': 1, 'new_temp32': 1, 'new_temp33': 1, 'explicate_6': 1, 'new_temp29': 1, 'new_temp30': 1, 'new_temp34': 2, 'new_temp22': 1, 'y': 1, 'new_temp2': 1, 'new_temp1': 1, 'new_temp24': 1, 'new_temp36': 1, 'new_temp35': 1, 'new_temp27': 1, 'new_temp8': 1, 'new_temp7': 1, 'x': 1, 'new_temp25': 1, 'new_temp23': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp11': 'edi', 'new_temp0': 'ebx', 'new_temp9': 'edi', 'new_temp13': 'edi', 'new_temp15': 'edi', 'new_temp17': 'edi', 'explicate_3': 'edi', 'explicate_4': 'ebx', 'new_temp21': 'edi', 'explicate_5': 'edi', 'new_temp19': 'eax', 'new_temp12': 'eax', 'new_temp26': 'eax', 'new_temp14': 'eax', 'new_temp10': 'eax', 'new_temp20': 'eax', 'new_temp31': 'eax', 'new_temp28': 'eax', 'new_temp18': 'eax', 'new_temp16': 'eax', 'new_temp32': 'eax', 'new_temp33': 'eax', 'explicate_6': 'eax', 'new_temp29': 'eax', 'new_temp30': 'eax', 'new_temp34': 'ecx', 'new_temp22': 'eax', 'y': 'eax', 'new_temp2': 'eax', 'new_temp1': 'eax', 'new_temp24': 'eax', 'new_temp36': 'eax', 'new_temp35': 'eax', 'new_temp27': 'eax', 'new_temp8': 'eax', 'new_temp7': 'eax', 'x': 'eax', 'new_temp25': 'eax', 'new_temp23': 'eax'}
new_temp7
new_temp7
new_temp8
new_temp8
new_temp0
new_temp9
new_temp10
new_temp10
new_temp9
new_temp0
new_temp11
new_temp12
new_temp12
new_temp11
new_temp0
new_temp13
new_temp14
new_temp14
new_temp13
new_temp0
new_temp15
new_temp16
new_temp16
new_temp15
new_temp0
new_temp17
new_temp18
new_temp18
new_temp17
new_temp0
new_temp0
x
x
y
x
explicate_3
y
explicate_4
explicate_3
new_temp19
new_temp19
explicate_4
new_temp20
new_temp20
explicate_3
new_temp21
explicate_4
new_temp22
new_temp22
new_temp21
new_temp23
new_temp23
new_temp24
new_temp24
new_temp1
new_temp25
new_temp25
new_temp1
explicate_4
new_temp26
new_temp26
new_temp27
new_temp27
new_temp1
explicate_3
new_temp28
new_temp28
explicate_3
new_temp29
new_temp29
explicate_5
explicate_3
new_temp30
new_temp30
explicate_5
explicate_4
new_temp31
new_temp31
explicate_4
new_temp32
new_temp32
explicate_6
explicate_4
new_temp33
new_temp33
explicate_6
explicate_5
explicate_6
new_temp34
new_temp34
new_temp34
new_temp34
new_temp35
new_temp35
new_temp36
new_temp36
new_temp1
new_temp1
new_temp2
new_temp2
