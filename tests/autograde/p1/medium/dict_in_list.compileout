Illegal character '{'
Syntax error at ':'
Illegal character '}'
Illegal character '['
Illegal character ','
Illegal character ','
Illegal character ']'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Dict(
                keys=[
                    Constant(value=1)],
                values=[
                    Constant(value=2)])),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=List(
                elts=[
                    Constant(value=1),
                    Constant(value=2),
                    Name(id='x', ctx=Load())],
                ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='y', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Constant(value=2),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=1)),
        Constant(value=2),
        Name(id='x', ctx=Load()),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='y', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = { 1 : 2 }
y = [1, 2, x]
print(y)
Module(
     body=[
          Constant(value=2),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=1)),
          Constant(value=2),
          Name(id='x', ctx=Load()),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='y', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=1)),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='y', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
y = 1
print(y)
<ast.Constant object at 0x7fb6ace525c0>

y = inject_int(1)
print(y)
--------------Explicate code-------
y = inject_int(1)
print(y)


--- explicated flattened python ---
new_temp0 = inject_int(1)
y = new_temp0
print(y)


--- x86 IR ---
call  inject_int 1
movl  eax ,  new_temp0
movl  new_temp0 ,  y
call  print y


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp0': set(), 'y': set(), 'eax': set(), 'ecx': set(), 'edx': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp0': 1, 'y': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp0': 'eax', 'y': 'eax'}
new_temp0
new_temp0
y
y
