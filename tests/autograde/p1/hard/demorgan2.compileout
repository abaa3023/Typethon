------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='a', ctx=Store())],
            value=Constant(value=False)),
        Assign(
            targets=[
                Name(id='b', ctx=Store())],
            value=Constant(value=True)),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BoolOp(
                op=Or(),
                values=[
                    UnaryOp(
                        op=Not(),
                        operand=Compare(
                            left=BoolOp(
                                op=And(),
                                values=[
                                    Name(id='a', ctx=Load()),
                                    Name(id='b', ctx=Load())]),
                            ops=[
                                Eq()],
                            comparators=[
                                UnaryOp(
                                    op=Not(),
                                    operand=Name(id='a', ctx=Load()))])),
                    UnaryOp(
                        op=Not(),
                        operand=Name(id='b', ctx=Load()))])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='a', ctx=Store())],
            value=Constant(value=True)),
        Assign(
            targets=[
                Name(id='b', ctx=Store())],
            value=Constant(value=True)),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=UnaryOp(
                op=Not(),
                operand=Compare(
                    left=BoolOp(
                        op=And(),
                        values=[
                            Name(id='a', ctx=Load()),
                            Name(id='b', ctx=Load())]),
                    ops=[
                        Eq()],
                    comparators=[
                        Compare(
                            left=UnaryOp(
                                op=Not(),
                                operand=Name(id='a', ctx=Load())),
                            ops=[
                                Or()],
                            comparators=[
                                UnaryOp(
                                    op=Not(),
                                    operand=Name(id='b', ctx=Load()))])]))),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
a = False
b = True
x = not (a and b) == (not a) or (not b)
print(x)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='a', ctx=Store())],
               value=Constant(value=True)),
          Assign(
               targets=[
                    Name(id='b', ctx=Store())],
               value=Constant(value=True)),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=UnaryOp(
                    op=Not(),
                    operand=Compare(
                         left=BoolOp(
                              op=And(),
                              values=[
                                   Name(id='a', ctx=Load()),
                                   Name(id='b', ctx=Load())]),
                         ops=[
                              Eq()],
                         comparators=[
                              Compare(
                                   left=UnaryOp(
                                        op=Not(),
                                        operand=Name(id='a', ctx=Load())),
                                   ops=[
                                        Or()],
                                   comparators=[
                                        UnaryOp(
                                             op=Not(),
                                             operand=Name(id='b', ctx=Load()))])]))),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='a', ctx=Store())],
               value=Constant(value=True)),
          Assign(
               targets=[
                    Name(id='b', ctx=Store())],
               value=Constant(value=True)),
          If(
               test=Name(id='a', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Name(id='b', ctx=Load()))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Name(id='a', ctx=Load()))]),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          If(
               test=Name(id='a', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Constant(value=False))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Constant(value=True))]),
          If(
               test=Name(id='b', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp3', ctx=Store())],
                         value=Constant(value=False))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp3', ctx=Store())],
                         value=Constant(value=True))]),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=Compare(
                    left=Name(id='new_temp2', ctx=Load()),
                    ops=[
                         Or()],
                    comparators=[
                         Name(id='new_temp3', ctx=Load())])),
          Assign(
               targets=[
                    Name(id='new_temp5', ctx=Store())],
               value=Name(id='new_temp4', ctx=Store())),
          Assign(
               targets=[
                    Name(id='new_temp6', ctx=Store())],
               value=Compare(
                    left=Name(id='new_temp1', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Name(id='new_temp5', ctx=Load())])),
          Assign(
               targets=[
                    Name(id='new_temp7', ctx=Store())],
               value=Name(id='new_temp6', ctx=Store())),
          If(
               test=Name(id='new_temp7', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp8', ctx=Store())],
                         value=Constant(value=False))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp8', ctx=Store())],
                         value=Constant(value=True))]),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp8', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
