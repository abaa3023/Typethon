Illegal character '{'
Illegal character ':'
Illegal character '}'
Illegal character '['
Illegal character ','
Illegal character ','
Illegal character ']'
Illegal character '['
Illegal character ']'
Syntax error at '='
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Dict(
                keys=[
                    Constant(value=1)],
                values=[
                    Constant(value=2)])),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=List(
                elts=[
                    Constant(value=1),
                    Constant(value=2),
                    Name(id='x', ctx=Load())],
                ctx=Load())),
        Assign(
            targets=[
                Subscript(
                    value=Name(id='x', ctx=Load()),
                    slice=Constant(value=1),
                    ctx=Store())],
            value=Name(id='y', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Name(id='y', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = { 1 : 2 }
y = [1, 2, x]
x[1] = y
print(x)
Module(
     body=[
          Expr(
               value=Name(id='y', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Expr(
               value=Name(id='y', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
y
print(x)

print(x)
--------------Explicate code-------
print(x)


--- explicated flattened python ---
print(x)


--- x86 IR ---
call  print x


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'eax': set(), 'ecx': set(), 'edx': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {}
x
