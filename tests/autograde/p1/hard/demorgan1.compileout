Syntax error at 'or'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='a', ctx=Store())],
            value=Constant(value=True)),
        Assign(
            targets=[
                Name(id='b', ctx=Store())],
            value=Constant(value=False)),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=BoolOp(
                op=And(),
                values=[
                    UnaryOp(
                        op=Not(),
                        operand=Compare(
                            left=BoolOp(
                                op=Or(),
                                values=[
                                    Name(id='a', ctx=Load()),
                                    Name(id='b', ctx=Load())]),
                            ops=[
                                Eq()],
                            comparators=[
                                UnaryOp(
                                    op=Not(),
                                    operand=Name(id='a', ctx=Load()))])),
                    UnaryOp(
                        op=Not(),
                        operand=Name(id='b', ctx=Load()))])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
a = True
b = False
x = not (a or b) == (not a) and (not b)
print(x)
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
print(x)

print(x)
--------------Explicate code-------
print(x)


--- explicated flattened python ---
print(x)


--- x86 IR ---
call  print x


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'eax': set(), 'ecx': set(), 'edx': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {}
x
