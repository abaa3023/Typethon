--------------Original code----------------
a = True
b = False
x = not (a or b) == (not a) and (not b)
print(x)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='a', ctx=Store())],
               value=Constant(value=True)),
          Assign(
               targets=[
                    Name(id='b', ctx=Store())],
               value=Constant(value=False)),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=BoolOp(
                    op=And(),
                    values=[
                         UnaryOp(
                              op=Not(),
                              operand=Compare(
                                   left=BoolOp(
                                        op=Or(),
                                        values=[
                                             Name(id='a', ctx=Load()),
                                             Name(id='b', ctx=Load())]),
                                   ops=[
                                        Eq()],
                                   comparators=[
                                        UnaryOp(
                                             op=Not(),
                                             operand=Name(id='a', ctx=Load()))])),
                         UnaryOp(
                              op=Not(),
                              operand=Name(id='b', ctx=Load()))])),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='a', ctx=Store())],
               value=Constant(value=True)),
          Assign(
               targets=[
                    Name(id='b', ctx=Store())],
               value=Constant(value=False)),
          If(
               test=Name(id='a', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Name(id='a', ctx=Load()))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp0', ctx=Store())],
                         value=Name(id='b', ctx=Load()))]),
          Assign(
               targets=[
                    Name(id='new_temp1', ctx=Store())],
               value=Name(id='new_temp0', ctx=Store())),
          If(
               test=Name(id='a', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Constant(value=False))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp2', ctx=Store())],
                         value=Constant(value=True))]),
          Assign(
               targets=[
                    Name(id='new_temp3', ctx=Store())],
               value=Compare(
                    left=Name(id='new_temp1', ctx=Load()),
                    ops=[
                         Eq()],
                    comparators=[
                         Name(id='new_temp2', ctx=Load())])),
          Assign(
               targets=[
                    Name(id='new_temp4', ctx=Store())],
               value=Name(id='new_temp3', ctx=Store())),
          If(
               test=Name(id='new_temp4', ctx=Load()),
               body=[
                    Assign(
                         targets=[
                              Name(id='new_temp5', ctx=Store())],
                         value=Constant(value=False))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp5', ctx=Store())],
                         value=Constant(value=True))]),
          If(
               test=Name(id='new_temp5', ctx=Load()),
               body=[
                    If(
                         test=Name(id='b', ctx=Load()),
                         body=[
                              Assign(
                                   targets=[
                                        Name(id='new_temp6', ctx=Store())],
                                   value=Constant(value=False))],
                         orelse=[
                              Assign(
                                   targets=[
                                        Name(id='new_temp6', ctx=Store())],
                                   value=Constant(value=True))]),
                    Assign(
                         targets=[
                              Name(id='new_temp7', ctx=Store())],
                         value=Name(id='new_temp6', ctx=Load()))],
               orelse=[
                    Assign(
                         targets=[
                              Name(id='new_temp7', ctx=Store())],
                         value=Name(id='new_temp5', ctx=Load()))]),
          Assign(
               targets=[
                    Name(id='new_temp8', ctx=Store())],
               value=Name(id='new_temp7', ctx=Store())),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp8', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
a = True
b = False
if a:
    new_temp0 = a
else:
    new_temp0 = b
new_temp1 = new_temp0
if a:
    new_temp2 = False
else:
    new_temp2 = True
new_temp3 = new_temp1 == new_temp2
new_temp4 = new_temp3
if new_temp4:
    new_temp5 = False
else:
    new_temp5 = True
if new_temp5:
    if b:
        new_temp6 = False
    else:
        new_temp6 = True
    new_temp7 = new_temp6
else:
    new_temp7 = new_temp5
new_temp8 = new_temp7
x = new_temp8
print(x)
<ast.Constant object at 0x7f7903e756c0>
<ast.Constant object at 0x7f7903e75660>
<ast.Name object at 0x7f7903e75480>
<ast.Name object at 0x7f7903e75450>
<ast.Name object at 0x7f7903e74a30>
<ast.Constant object at 0x7f7903e74be0>
<ast.Constant object at 0x7f7903e74970>
inject_bool(equal(project_big(explicate_9),project_big(explicate_10)))
inject_bool(0)
inject_bool(0)
inject_bool(explicate_11==explicate_12)
<ast.Name object at 0x7f7903e758a0>
<ast.Constant object at 0x7f7903e74fa0>
<ast.Constant object at 0x7f7903e75510>
<ast.Constant object at 0x7f7903e759f0>
<ast.Constant object at 0x7f7903e75ab0>
<ast.Name object at 0x7f7903e75b70>
<ast.Name object at 0x7f7903e75990>
<ast.Name object at 0x7f7903e75d50>
<ast.Name object at 0x7f7903e751b0>

a = inject_bool(1)
b = inject_bool(0)
if(is_true(a)):

	new_temp0 = a
else:

	new_temp0 = b
new_temp1 = new_temp0
if(is_true(a)):

	new_temp2 = inject_bool(0)
else:

	new_temp2 = inject_bool(1)
explicate_9 = new_temp1
explicate_10 = new_temp2
if(is_big(explicate_9)):
	if(is_big(explicate_10)):
		new_temp3 = inject_bool(equal(project_big(explicate_9),project_big(explicate_10)))
	else:
		new_temp3 = inject_bool(0)
else:
	if(is_big(explicate_10)):
		new_temp3 = inject_bool(0)
	else:
		if(is_int(explicate_9)):
			explicate_11 = project_int(explicate_9)
		else:
			explicate_11 = project_bool(explicate_9)
		if(is_int(explicate_10)):
			explicate_12 = project_int(explicate_10)
		else:
			explicate_12 = project_bool(explicate_10)
		new_temp3 = inject_bool(explicate_11==explicate_12)
new_temp4 = new_temp3
if(is_true(new_temp4)):

	new_temp5 = inject_bool(0)
else:

	new_temp5 = inject_bool(1)
if(is_true(new_temp5)):

	if(is_true(b)):
	
		new_temp6 = inject_bool(0)
	else:
	
		new_temp6 = inject_bool(1)
	new_temp7 = new_temp6
else:

	new_temp7 = new_temp5
new_temp8 = new_temp7
x = new_temp8
print(x)
--------------Explicate code-------
a = inject_bool(1)
b = inject_bool(0)
if is_true(a):
    new_temp0 = a
else:
    new_temp0 = b
new_temp1 = new_temp0
if is_true(a):
    new_temp2 = inject_bool(0)
else:
    new_temp2 = inject_bool(1)
explicate_9 = new_temp1
explicate_10 = new_temp2
if is_big(explicate_9):
    if is_big(explicate_10):
        new_temp3 = inject_bool(equal(project_big(explicate_9), project_big(explicate_10)))
    else:
        new_temp3 = inject_bool(0)
elif is_big(explicate_10):
    new_temp3 = inject_bool(0)
else:
    if is_int(explicate_9):
        explicate_11 = project_int(explicate_9)
    else:
        explicate_11 = project_bool(explicate_9)
    if is_int(explicate_10):
        explicate_12 = project_int(explicate_10)
    else:
        explicate_12 = project_bool(explicate_10)
    new_temp3 = inject_bool(explicate_11 == explicate_12)
new_temp4 = new_temp3
if is_true(new_temp4):
    new_temp5 = inject_bool(0)
else:
    new_temp5 = inject_bool(1)
if is_true(new_temp5):
    if is_true(b):
        new_temp6 = inject_bool(0)
    else:
        new_temp6 = inject_bool(1)
    new_temp7 = new_temp6
else:
    new_temp7 = new_temp5
new_temp8 = new_temp7
x = new_temp8
print(x)


--- explicated flattened python ---
new_temp13 = inject_bool(1)
a = new_temp13
new_temp14 = inject_bool(0)
b = new_temp14
new_temp15 = is_true(a)
if new_temp15:
    new_temp0 = a
else:
    new_temp0 = b
new_temp1 = new_temp0
new_temp16 = is_true(a)
if new_temp16:
    new_temp17 = inject_bool(0)
    new_temp2 = new_temp17
else:
    new_temp18 = inject_bool(1)
    new_temp2 = new_temp18
explicate_9 = new_temp1
explicate_10 = new_temp2
new_temp19 = is_big(explicate_9)
if new_temp19:
    new_temp20 = is_big(explicate_10)
    if new_temp20:
        new_temp21 = project_big(explicate_9)
        new_temp22 = project_big(explicate_10)
        new_temp23 = equal(new_temp21, new_temp22)
        new_temp24 = inject_bool(new_temp23)
        new_temp3 = new_temp24
    else:
        new_temp25 = inject_bool(0)
        new_temp3 = new_temp25
else:
    new_temp26 = is_big(explicate_10)
    if new_temp26:
        new_temp27 = inject_bool(0)
        new_temp3 = new_temp27
    else:
        new_temp28 = is_int(explicate_9)
        if new_temp28:
            new_temp29 = project_int(explicate_9)
            explicate_11 = new_temp29
        else:
            new_temp30 = project_bool(explicate_9)
            explicate_11 = new_temp30
        new_temp31 = is_int(explicate_10)
        if new_temp31:
            new_temp32 = project_int(explicate_10)
            explicate_12 = new_temp32
        else:
            new_temp33 = project_bool(explicate_10)
            explicate_12 = new_temp33
        new_temp34 = explicate_11 == explicate_12
        new_temp35 = new_temp34
        new_temp36 = inject_bool(new_temp35)
        new_temp3 = new_temp36
new_temp4 = new_temp3
new_temp37 = is_true(new_temp4)
if new_temp37:
    new_temp38 = inject_bool(0)
    new_temp5 = new_temp38
else:
    new_temp39 = inject_bool(1)
    new_temp5 = new_temp39
new_temp40 = is_true(new_temp5)
if new_temp40:
    new_temp41 = is_true(b)
    if new_temp41:
        new_temp42 = inject_bool(0)
        new_temp6 = new_temp42
    else:
        new_temp43 = inject_bool(1)
        new_temp6 = new_temp43
    new_temp7 = new_temp6
else:
    new_temp7 = new_temp5
new_temp8 = new_temp7
x = new_temp8
print(x)


--- x86 IR ---
call  inject_bool 1
movl  eax ,  new_temp13
movl  new_temp13 ,  a
call  inject_bool 0
movl  eax ,  new_temp14
movl  new_temp14 ,  b
call  is_true a
movl  eax ,  new_temp15
if1
cmp 0, new_temp15
je else1
then1
movl  a ,  new_temp0
else1
movl  b ,  new_temp0
end if1
movl  new_temp0 ,  new_temp1
call  is_true a
movl  eax ,  new_temp16
if2
cmp 0, new_temp16
je else2
then2
call  inject_bool 0
movl  eax ,  new_temp17
movl  new_temp17 ,  new_temp2
else2
call  inject_bool 1
movl  eax ,  new_temp18
movl  new_temp18 ,  new_temp2
end if2
movl  new_temp1 ,  explicate_9
movl  new_temp2 ,  explicate_10
call  is_big explicate_9
movl  eax ,  new_temp19
if3
cmp 0, new_temp19
je else3
then3
call  is_big explicate_10
movl  eax ,  new_temp20
if4
cmp 0, new_temp20
je else4
then4
call  project_big explicate_9
movl  eax ,  new_temp21
call  project_big explicate_10
movl  eax ,  new_temp22
call  equal new_temp21,new_temp22
movl  eax ,  new_temp23
call  inject_bool new_temp23
movl  eax ,  new_temp24
movl  new_temp24 ,  new_temp3
else4
call  inject_bool 0
movl  eax ,  new_temp25
movl  new_temp25 ,  new_temp3
end if4
else3
call  is_big explicate_10
movl  eax ,  new_temp26
if4
cmp 0, new_temp26
je else4
then4
call  inject_bool 0
movl  eax ,  new_temp27
movl  new_temp27 ,  new_temp3
else4
call  is_int explicate_9
movl  eax ,  new_temp28
if5
cmp 0, new_temp28
je else5
then5
call  project_int explicate_9
movl  eax ,  new_temp29
movl  new_temp29 ,  explicate_11
else5
call  project_bool explicate_9
movl  eax ,  new_temp30
movl  new_temp30 ,  explicate_11
end if5
call  is_int explicate_10
movl  eax ,  new_temp31
if6
cmp 0, new_temp31
je else6
then6
call  project_int explicate_10
movl  eax ,  new_temp32
movl  new_temp32 ,  explicate_12
else6
call  project_bool explicate_10
movl  eax ,  new_temp33
movl  new_temp33 ,  explicate_12
end if6
int_compare  explicate_11 Eq explicate_12 ,  new_temp34
movl  new_temp34 ,  new_temp35
call  inject_bool new_temp35
movl  eax ,  new_temp36
movl  new_temp36 ,  new_temp3
end if4
end if3
movl  new_temp3 ,  new_temp4
call  is_true new_temp4
movl  eax ,  new_temp37
if4
cmp 0, new_temp37
je else4
then4
call  inject_bool 0
movl  eax ,  new_temp38
movl  new_temp38 ,  new_temp5
else4
call  inject_bool 1
movl  eax ,  new_temp39
movl  new_temp39 ,  new_temp5
end if4
call  is_true new_temp5
movl  eax ,  new_temp40
if5
cmp 0, new_temp40
je else5
then5
call  is_true b
movl  eax ,  new_temp41
if6
cmp 0, new_temp41
je else6
then6
call  inject_bool 0
movl  eax ,  new_temp42
movl  new_temp42 ,  new_temp6
else6
call  inject_bool 1
movl  eax ,  new_temp43
movl  new_temp43 ,  new_temp6
end if6
movl  new_temp6 ,  new_temp7
else5
movl  new_temp5 ,  new_temp7
end if5
movl  new_temp7 ,  new_temp8
movl  new_temp8 ,  x
call  print x


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp13': set(), 'a': {'new_temp0', 'b', 'edx', 'ecx', 'new_temp14', 'new_temp15', 'new_temp1', 'eax'}, 'eax': {'explicate_10', 'explicate_9', 'a', 'b', 'new_temp5', 'explicate_11', 'new_temp34', 'new_temp1', 'new_temp21'}, 'ecx': {'explicate_10', 'explicate_9', 'a', 'b', 'new_temp5', 'explicate_11', 'new_temp1', 'new_temp21'}, 'edx': {'explicate_10', 'explicate_9', 'a', 'b', 'new_temp5', 'explicate_11', 'new_temp1', 'new_temp21'}, 'new_temp14': {'a'}, 'b': {'new_temp28', 'ecx', 'new_temp22', 'new_temp16', 'new_temp25', 'new_temp2', 'new_temp5', 'new_temp4', 'new_temp24', 'explicate_12', 'eax', 'new_temp32', 'new_temp0', 'new_temp38', 'new_temp15', 'a', 'new_temp23', 'new_temp37', 'new_temp19', 'new_temp40', 'explicate_11', 'new_temp27', 'new_temp34', 'new_temp35', 'edx', 'new_temp36', 'explicate_10', 'explicate_9', 'new_temp39', 'new_temp20', 'new_temp3', 'new_temp1', 'new_temp33', 'new_temp18', 'new_temp26', 'new_temp17', 'new_temp31', 'new_temp30', 'new_temp29', 'new_temp21'}, 'new_temp15': {'b', 'a'}, 'edi': set(), 'ebx': set(), 'esi': set(), 'new_temp0': {'b', 'a'}, 'new_temp1': {'edx', 'ecx', 'new_temp18', 'new_temp16', 'new_temp2', 'new_temp17', 'a', 'b', 'eax'}, 'new_temp16': {'b', 'new_temp1'}, 'new_temp17': {'b', 'new_temp1'}, 'new_temp2': {'explicate_9', 'b', 'new_temp1'}, 'new_temp18': {'b', 'new_temp1'}, 'explicate_9': {'new_temp28', 'edx', 'ecx', 'new_temp26', 'new_temp2', 'explicate_10', 'b', 'new_temp19', 'new_temp20', 'eax'}, 'explicate_10': {'new_temp28', 'edx', 'ecx', 'new_temp26', 'explicate_9', 'new_temp31', 'b', 'new_temp19', 'new_temp20', 'new_temp30', 'new_temp29', 'explicate_11', 'eax', 'new_temp21'}, 'new_temp19': {'explicate_9', 'b', 'explicate_10'}, 'new_temp20': {'explicate_9', 'b', 'explicate_10'}, 'new_temp26': {'explicate_9', 'b', 'explicate_10'}, 'new_temp21': {'b', 'edx', 'ecx', 'new_temp22', 'eax', 'explicate_10'}, 'new_temp22': {'b', 'new_temp21'}, 'new_temp23': {'b'}, 'new_temp24': {'b'}, 'new_temp3': {'b'}, 'new_temp25': {'b'}, 'new_temp27': {'b'}, 'new_temp28': {'explicate_9', 'b', 'explicate_10'}, 'new_temp4': {'b'}, 'new_temp37': {'b'}, 'new_temp29': {'b', 'explicate_10'}, 'explicate_11': {'new_temp33', 'edx', 'ecx', 'explicate_10', 'new_temp31', 'b', 'explicate_12', 'eax', 'new_temp32'}, 'new_temp30': {'b', 'explicate_10'}, 'new_temp38': {'b'}, 'new_temp5': {'edx', 'ecx', 'b', 'new_temp40', 'eax'}, 'new_temp39': {'b'}, 'new_temp31': {'explicate_11', 'b', 'explicate_10'}, 'new_temp40': {'new_temp5', 'b'}, 'new_temp32': {'explicate_11', 'b'}, 'explicate_12': {'explicate_11', 'b'}, 'new_temp33': {'explicate_11', 'b'}, 'new_temp41': set(), 'new_temp7': set(), 'new_temp34': {'b', 'eax'}, 'new_temp35': {'b'}, 'new_temp36': {'b'}, 'new_temp42': set(), 'new_temp6': set(), 'new_temp43': set(), 'new_temp8': set(), 'x': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp21': 4, 'explicate_10': 5, 'b': 6, 'explicate_9': 4, 'explicate_11': 4, 'new_temp1': 4, 'a': 5, 'new_temp5': 4, 'new_temp31': 1, 'new_temp26': 1, 'new_temp20': 1, 'new_temp19': 1, 'new_temp28': 1, 'new_temp29': 1, 'new_temp30': 1, 'new_temp17': 1, 'new_temp18': 1, 'new_temp34': 2, 'new_temp40': 1, 'new_temp15': 1, 'new_temp33': 1, 'new_temp0': 1, 'new_temp32': 1, 'explicate_12': 1, 'new_temp2': 1, 'new_temp16': 1, 'new_temp22': 1, 'new_temp14': 1, 'new_temp37': 1, 'new_temp27': 1, 'new_temp23': 1, 'new_temp38': 1, 'new_temp3': 1, 'new_temp24': 1, 'new_temp4': 1, 'new_temp39': 1, 'new_temp36': 1, 'new_temp25': 1, 'new_temp35': 1, 'new_temp6': 1, 'new_temp7': 1, 'new_temp41': 1, 'new_temp13': 1, 'x': 1, 'new_temp42': 1, 'new_temp43': 1, 'new_temp8': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp21': 'edi', 'explicate_10': 'ebx', 'b': 'esi', 'explicate_9': 'edi', 'explicate_11': 'edi', 'new_temp1': 'edi', 'a': 'ebx', 'new_temp5': 'edi', 'new_temp31': 'eax', 'new_temp26': 'eax', 'new_temp20': 'eax', 'new_temp19': 'eax', 'new_temp28': 'eax', 'new_temp29': 'eax', 'new_temp30': 'eax', 'new_temp17': 'eax', 'new_temp18': 'eax', 'new_temp34': 'ecx', 'new_temp40': 'eax', 'new_temp15': 'eax', 'new_temp33': 'eax', 'new_temp0': 'eax', 'new_temp32': 'eax', 'explicate_12': 'eax', 'new_temp2': 'eax', 'new_temp16': 'eax', 'new_temp22': 'eax', 'new_temp14': 'eax', 'new_temp37': 'eax', 'new_temp27': 'eax', 'new_temp23': 'eax', 'new_temp38': 'eax', 'new_temp3': 'eax', 'new_temp24': 'eax', 'new_temp4': 'eax', 'new_temp39': 'eax', 'new_temp36': 'eax', 'new_temp25': 'eax', 'new_temp35': 'eax', 'new_temp6': 'eax', 'new_temp7': 'eax', 'new_temp41': 'eax', 'new_temp13': 'eax', 'x': 'eax', 'new_temp42': 'eax', 'new_temp43': 'eax', 'new_temp8': 'eax'}
new_temp13
new_temp13
a
new_temp14
new_temp14
b
a
new_temp15
new_temp15
a
new_temp0
b
new_temp0
new_temp0
new_temp1
a
new_temp16
new_temp16
new_temp17
new_temp17
new_temp2
new_temp18
new_temp18
new_temp2
new_temp1
explicate_9
new_temp2
explicate_10
explicate_9
new_temp19
new_temp19
explicate_10
new_temp20
new_temp20
explicate_9
new_temp21
explicate_10
new_temp22
new_temp22
new_temp21
new_temp23
new_temp23
new_temp24
new_temp24
new_temp3
new_temp25
new_temp25
new_temp3
explicate_10
new_temp26
new_temp26
new_temp27
new_temp27
new_temp3
explicate_9
new_temp28
new_temp28
explicate_9
new_temp29
new_temp29
explicate_11
explicate_9
new_temp30
new_temp30
explicate_11
explicate_10
new_temp31
new_temp31
explicate_10
new_temp32
new_temp32
explicate_12
explicate_10
new_temp33
new_temp33
explicate_12
explicate_11
explicate_12
new_temp34
new_temp34
new_temp34
new_temp34
new_temp35
new_temp35
new_temp36
new_temp36
new_temp3
new_temp3
new_temp4
new_temp4
new_temp37
new_temp37
new_temp38
new_temp38
new_temp5
new_temp39
new_temp39
new_temp5
new_temp5
new_temp40
new_temp40
b
new_temp41
new_temp41
new_temp42
new_temp42
new_temp6
new_temp43
new_temp43
new_temp6
new_temp6
new_temp7
new_temp5
new_temp7
new_temp7
new_temp8
new_temp8
x
x
