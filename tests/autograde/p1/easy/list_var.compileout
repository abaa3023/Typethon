Illegal character '['
Illegal character ','
Illegal character ','
Illegal character ']'
------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='a', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='b', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='c', ctx=Store())],
            value=Constant(value=3)),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=List(
                elts=[
                    Name(id='a', ctx=Load()),
                    Name(id='b', ctx=Load()),
                    Name(id='c', ctx=Load())],
                ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='a', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='b', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='c', ctx=Store())],
            value=Constant(value=3)),
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Name(id='a', ctx=Load())),
        Expr(
            value=Name(id='b', ctx=Load())),
        Expr(
            value=Name(id='c', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
a = 1
b = 2
c = 3
x = [a, b, c]
print(x)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='a', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='b', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='c', ctx=Store())],
               value=Constant(value=3)),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='a', ctx=Load())),
          Expr(
               value=Name(id='b', ctx=Load())),
          Expr(
               value=Name(id='c', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='a', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='b', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='c', ctx=Store())],
               value=Constant(value=3)),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='a', ctx=Load())),
          Expr(
               value=Name(id='b', ctx=Load())),
          Expr(
               value=Name(id='c', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
a = 1
b = 2
c = 3
x = a
b
c
print(x)
<ast.Constant object at 0x7fd68eec4280>
<ast.Constant object at 0x7fd68eec4190>
<ast.Constant object at 0x7fd68eec40a0>
<ast.Name object at 0x7fd68eec5a20>

a = inject_int(1)
b = inject_int(2)
c = inject_int(3)
x = a
print(x)
--------------Explicate code-------
a = inject_int(1)
b = inject_int(2)
c = inject_int(3)
x = a
print(x)


--- explicated flattened python ---
new_temp0 = inject_int(1)
a = new_temp0
new_temp1 = inject_int(2)
b = new_temp1
new_temp2 = inject_int(3)
c = new_temp2
x = a
print(x)


--- x86 IR ---
call  inject_int 1
movl  eax ,  new_temp0
movl  new_temp0 ,  a
call  inject_int 2
movl  eax ,  new_temp1
movl  new_temp1 ,  b
call  inject_int 3
movl  eax ,  new_temp2
movl  new_temp2 ,  c
movl  a ,  x
call  print x


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp0': set(), 'a': {'new_temp2', 'ecx', 'b', 'c', 'edx', 'eax', 'new_temp1'}, 'eax': {'a'}, 'ecx': {'a'}, 'edx': {'a'}, 'new_temp1': {'a'}, 'b': {'a'}, 'new_temp2': {'a'}, 'c': {'a'}, 'x': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'a': 4, 'new_temp1': 1, 'b': 1, 'new_temp2': 1, 'c': 1, 'new_temp0': 1, 'x': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'a': 'edi', 'new_temp1': 'eax', 'b': 'eax', 'new_temp2': 'eax', 'c': 'eax', 'new_temp0': 'eax', 'x': 'eax'}
new_temp0
new_temp0
a
new_temp1
new_temp1
b
new_temp2
new_temp2
c
a
x
x
