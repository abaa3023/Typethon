Illegal character '{'
Illegal character ':'
Illegal character '}'
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=1)),
        Assign(
            targets=[
                Name(id='y', ctx=Store())],
            value=Constant(value=2)),
        Assign(
            targets=[
                Name(id='z', ctx=Store())],
            value=Name(id='x', ctx=Load())),
        Expr(
            value=Name(id='y', ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='z', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = 1
y = 2
z = { x : y}
print(z)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='x', ctx=Load())),
          Expr(
               value=Name(id='y', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Constant(value=1)),
          Assign(
               targets=[
                    Name(id='y', ctx=Store())],
               value=Constant(value=2)),
          Assign(
               targets=[
                    Name(id='z', ctx=Store())],
               value=Name(id='x', ctx=Load())),
          Expr(
               value=Name(id='y', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='z', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
x = 1
y = 2
z = x
y
print(z)
<ast.Constant object at 0x7f59368ef100>
<ast.Constant object at 0x7f5936950fa0>
<ast.Name object at 0x7f59369510f0>

x = inject_int(1)
y = inject_int(2)
z = x
print(z)
--------------Explicate code-------
x = inject_int(1)
y = inject_int(2)
z = x
print(z)


--- explicated flattened python ---
new_temp0 = inject_int(1)
x = new_temp0
new_temp1 = inject_int(2)
y = new_temp1
z = x
print(z)


--- x86 IR ---
call  inject_int 1
movl  eax ,  new_temp0
movl  new_temp0 ,  x
call  inject_int 2
movl  eax ,  new_temp1
movl  new_temp1 ,  y
movl  x ,  z
call  print z


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp0': set(), 'x': {'ecx', 'edx', 'y', 'eax', 'new_temp1'}, 'eax': {'x'}, 'ecx': {'x'}, 'edx': {'x'}, 'new_temp1': {'x'}, 'y': {'x'}, 'z': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'x': 4, 'new_temp1': 1, 'y': 1, 'z': 1, 'new_temp0': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'x': 'edi', 'new_temp1': 'eax', 'y': 'eax', 'z': 'eax', 'new_temp0': 'eax'}
new_temp0
new_temp0
x
new_temp1
new_temp1
y
x
z
z
