------------------CORRECT TREE--------------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=List(
                elts=[
                    Constant(value=1),
                    Constant(value=2),
                    Constant(value=3)],
                ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
------------------Tree with my parser--------------
Module(
    body=[
        Assign(
            targets=[
                Name(id='x', ctx=Store())],
            value=List(
                elts=[
                    Constant(value=1),
                    Constant(value=2),
                    Constant(value=3)],
                ctx=Load())),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Name(id='x', ctx=Load())],
                keywords=[]))],
    type_ignores=[])
--------------Original code----------------
x = [1, 2, 3]
print(x)
Module(
     body=[
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=1),
                         Constant(value=2),
                         Constant(value=3)],
                    ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
Module(
     body=[
          Assign(
               targets=[
                    Name(id='new_temp0', ctx=Store())],
               value=List(
                    elts=[
                         Constant(value=1),
                         Constant(value=2),
                         Constant(value=3)],
                    ctx=Load())),
          Assign(
               targets=[
                    Name(id='x', ctx=Store())],
               value=Name(id='new_temp0', ctx=Load())),
          Expr(
               value=Call(
                    func=Name(id='print', ctx=Load()),
                    args=[
                         Name(id='x', ctx=Load())],
                    keywords=[]))],
     type_ignores=[])
--------------Code after flattening-------
new_temp0 = [1, 2, 3]
x = new_temp0
print(x)
<ast.List object at 0x7fca669d4040>
<ast.Name object at 0x7fca66a23ee0>

new_temp0 = inject_big(create_list(inject_int(3)))
set_subscript(new_temp0, inject_int(0), inject_int(1))
set_subscript(new_temp0, inject_int(1), inject_int(2))
set_subscript(new_temp0, inject_int(2), inject_int(3))
x = new_temp0
print(x)
--------------Explicate code-------
new_temp0 = inject_big(create_list(inject_int(3)))
set_subscript(new_temp0, inject_int(0), inject_int(1))
set_subscript(new_temp0, inject_int(1), inject_int(2))
set_subscript(new_temp0, inject_int(2), inject_int(3))
x = new_temp0
print(x)


--- explicated flattened python ---
new_temp1 = inject_int(3)
new_temp2 = create_list(new_temp1)
new_temp3 = inject_big(new_temp2)
new_temp0 = new_temp3
new_temp4 = inject_int(0)
new_temp5 = inject_int(1)
set_subscript(new_temp0, new_temp4, new_temp5)
new_temp6 = inject_int(1)
new_temp7 = inject_int(2)
set_subscript(new_temp0, new_temp6, new_temp7)
new_temp8 = inject_int(2)
new_temp9 = inject_int(3)
set_subscript(new_temp0, new_temp8, new_temp9)
x = new_temp0
print(x)


--- x86 IR ---
call  inject_int 3
movl  eax ,  new_temp1
call  create_list new_temp1
movl  eax ,  new_temp2
call  inject_big new_temp2
movl  eax ,  new_temp3
movl  new_temp3 ,  new_temp0
call  inject_int 0
movl  eax ,  new_temp4
call  inject_int 1
movl  eax ,  new_temp5
call  set_subscript new_temp0,new_temp4,new_temp5
call  inject_int 1
movl  eax ,  new_temp6
call  inject_int 2
movl  eax ,  new_temp7
call  set_subscript new_temp0,new_temp6,new_temp7
call  inject_int 2
movl  eax ,  new_temp8
call  inject_int 3
movl  eax ,  new_temp9
call  set_subscript new_temp0,new_temp8,new_temp9
movl  new_temp0 ,  x
call  print x


--- Control Flow Graph ---


-------------- Reset Liveness----------------


-------------- Liveness----------------


--------------Interference----------------


Interference Graph:  {'new_temp1': set(), 'new_temp2': set(), 'new_temp3': set(), 'new_temp0': {'eax', 'ecx', 'new_temp5', 'edx', 'new_temp6', 'new_temp7', 'new_temp9', 'new_temp4', 'new_temp8'}, 'eax': {'new_temp4', 'new_temp6', 'new_temp8', 'new_temp0'}, 'ecx': {'new_temp4', 'new_temp6', 'new_temp8', 'new_temp0'}, 'edx': {'new_temp4', 'new_temp6', 'new_temp8', 'new_temp0'}, 'new_temp4': {'new_temp5', 'eax', 'ecx', 'edx', 'new_temp0'}, 'new_temp5': {'new_temp4', 'new_temp0'}, 'new_temp6': {'eax', 'ecx', 'edx', 'new_temp7', 'new_temp0'}, 'new_temp7': {'new_temp6', 'new_temp0'}, 'new_temp8': {'eax', 'ecx', 'edx', 'new_temp9', 'new_temp0'}, 'new_temp9': {'new_temp8', 'new_temp0'}, 'x': set(), 'edi': set(), 'ebx': set(), 'esi': set()}


--------------Coloring----------------
Colored graph:
 {'eax': 1, 'ecx': 2, 'edx': 3, 'edi': 4, 'ebx': 5, 'esi': 6, 'new_temp8': 4, 'new_temp0': 5, 'new_temp4': 4, 'new_temp6': 4, 'new_temp9': 1, 'new_temp7': 1, 'new_temp5': 1, 'new_temp2': 1, 'new_temp3': 1, 'x': 1, 'new_temp1': 1}
Spilled set:
 set()


--------------Spilling----------------
unspillable_set
 set()
continue_looping
 False



Homes for CFG0:  {'new_temp8': 'edi', 'new_temp0': 'ebx', 'new_temp4': 'edi', 'new_temp6': 'edi', 'new_temp9': 'eax', 'new_temp7': 'eax', 'new_temp5': 'eax', 'new_temp2': 'eax', 'new_temp3': 'eax', 'x': 'eax', 'new_temp1': 'eax'}
new_temp1
new_temp1
new_temp2
new_temp2
new_temp3
new_temp3
new_temp0
new_temp4
new_temp5
new_temp5
new_temp4
new_temp0
new_temp6
new_temp7
new_temp7
new_temp6
new_temp0
new_temp8
new_temp9
new_temp9
new_temp8
new_temp0
new_temp0
x
x
